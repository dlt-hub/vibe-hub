resources:
- name: documents
  endpoint:
    path: /restaurants/{documentId}
    method: DELETE
- name: restaurants
  endpoint:
    path: /api/restaurants
    method: GET
    data_selector: data
- name: homepage
  endpoint:
    path: /api/homepage
    method: GET
    data_selector: data
- name: Category
  endpoint:
    path: /categories
    method: GET
    data_selector: data
    params: {}
- name: Restaurant
  endpoint:
    path: /restaurants
    method: GET
    data_selector: data
    params: {}
- name: restaurant
  endpoint:
    path: /restaurants
    method: POST
    data_selector: data
    params: {}
- name: category
  endpoint:
    path: /categories
    method: POST
    data_selector: data
    params: {}
- name: restaurants
  endpoint:
    path: /api/restaurants
    method: GET
    data_selector: data
- name: project_structure
  endpoint:
    path: /cms/project-structure
    method: GET
- name: collection_types
  endpoint:
    path: /cms/api/collection-types
    method: GET
    data_selector: data
- name: single_types
  endpoint:
    path: /cms/api/single-types
    method: GET
    data_selector: data
- name: content
  endpoint:
    path: /cms/features/content-manager
    method: GET
    data_selector: records
- name: content-types
  endpoint:
    path: /api/content-types
    method: GET
    data_selector: data
    params: {}
- name: components
  endpoint:
    path: /api/components
    method: GET
    data_selector: data
    params: {}
- name: audit_logs
  endpoint:
    path: /admin/audit-logs
    method: GET
    data_selector: logs
- name: custom_field_registration_server
  endpoint:
    path: /cms/configurations/functions
    method: POST
    data_selector: register
    params: {}
- name: custom_field_registration_admin
  endpoint:
    path: /cms/plugins-development/developing-plugins
    method: POST
    data_selector: register
    params: {}
- name: custom_field
  endpoint:
    path: /cms/plugins/installing-plugins-via-marketplace
    method: GET
    data_selector: attributes
    params: {}
- name: content
  endpoint:
    path: /content-manager/collection-types/:uid
    method: GET
    data_selector: data
    params:
      status: published
- name: email
  endpoint:
    path: /api/my-api-name/content-types/my-content-type-name/lifecycles
    method: POST
    data_selector: result
- name: email
  endpoint:
    path: /cms/api/email
    method: POST
    data_selector: data
- name: assets
  endpoint:
    path: /cms/api/assets
    method: GET
    data_selector: assets
    params: {}
- name: media_assets
  endpoint:
    path: /media-library/assets
    method: GET
    data_selector: assets
    params: {}
- name: preview
  endpoint:
    path: /api/preview
    method: GET
    data_selector: document
    params: {}
- name: roles
  endpoint:
    path: /admin/roles
    method: GET
- name: users
  endpoint:
    path: /admin/users
    method: GET
- name: releases
  endpoint:
    path: /releases
    method: GET
    data_selector: data
- name: posts
  endpoint:
    path: /posts
    method: GET
- name: Content API
  endpoint:
    path: /cms/api/content-api
    method: GET
- name: Document Service API
  endpoint:
    path: /cms/api/document-service
    method: GET
- name: Query Engine API
  endpoint:
    path: /cms/api/query-engine
    method: GET
- name: documents
  endpoint:
    path: /cms/api/document-service
    method: GET
    data_selector: data
    params: {}
- name: restaurants
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
- name: restaurant
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: restaurants
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: restaurants
  endpoint:
    path: /graphql
    method: POST
- name: admin_panel
  endpoint:
    path: /config/admin
    method: GET
- name: database
  endpoint:
    path: /config/database
    method: GET
- name: server
  endpoint:
    path: /config/server
    method: GET
- name: middlewares
  endpoint:
    path: /config/middlewares
    method: GET
- name: api_calls
  endpoint:
    path: /config/api
    method: GET
- name: plugins
  endpoint:
    path: /config/plugins
    method: GET
- name: typescript
  endpoint:
    path: /config/typescript
    method: GET
- name: responses
  endpoint:
    path: /api
    method: GET
    data_selector: privateAttributes
    params: {}
- name: rest
  endpoint:
    path: /v1
    method: GET
    data_selector: responses
    params:
      limit: 100
- name: cron_jobs
  endpoint:
    path: /cron-tasks
    method: POST
    data_selector: tasks
    params:
      enabled: 'true'
- name: database
  endpoint:
    path: /api/database
    method: GET
    data_selector: records
    params: {}
- name: features
  endpoint:
    path: /config/features.js|ts
    method: GET
- name: logger
  endpoint:
    path: ./config/logger.js
    method: POST
    data_selector: transports
    params: {}
- name: poweredBy
  endpoint:
    path: strapi::poweredBy
    method: POST
    data_selector: config
    params:
      poweredBy: Some Awesome Company <example.com>
- name: query
  endpoint:
    path: strapi::query
    method: POST
    data_selector: config
    params:
      arrayLimit: 50
      depth: 10
- name: response-time
  endpoint:
    path: strapi::response-time
    method: GET
- name: public
  endpoint:
    path: strapi::public
    method: GET
    data_selector: config
    params:
      defer: true
      index: index-dev.html
- name: security
  endpoint:
    path: strapi::security
    method: POST
    data_selector: config
    params:
      contentSecurityPolicy:
        useDefaults: true
        directives:
          connect-src:
          - '''self'''
          - 'https:'
          img-src:
          - '''self'''
          - 'data:'
          - 'blob:'
          - market-assets.strapi.io
          - yourBucketName.s3.yourRegion.amazonaws.com
          media-src:
          - '''self'''
          - 'data:'
          - 'blob:'
          - market-assets.strapi.io
          - yourBucketName.s3.yourRegion.amazonaws.com
          upgradeInsecureRequests: null
- name: session
  endpoint:
    path: strapi::session
    method: POST
    data_selector: config
    params:
      rolling: true
      renew: true
- name: i18n
  endpoint:
    path: /config/plugins/i18n
    method: GET
- name: myplugin
  endpoint:
    path: /config/plugins/myplugin
    method: GET
    data_selector: config
- name: my-other-plugin
  endpoint:
    path: /config/plugins/my-other-plugin
    method: GET
    data_selector: config
- name: server_configuration
  endpoint:
    path: /config/server.js
    method: GET
    data_selector: parameters
    params: {}
- name: lifecycle_functions
  endpoint:
    path: /cms/configurations/functions
    method: GET
- name: content-metrics
  endpoint:
    path: /api/content-metrics/count
    method: GET
    data_selector: body
    params: {}
- name: using_a_template
  endpoint:
    path: /cms/templates/using-a-template
    method: GET
    data_selector: data
- name: creating_a_template
  endpoint:
    path: /cms/templates/creating-a-template
    method: GET
    data_selector: data
- name: auth_local
  endpoint:
    path: /api/auth/local
    method: POST
    data_selector: body
    params: {}
- name: users_me
  endpoint:
    path: /api/users/me
    method: GET
    data_selector: body
    params: {}
- name: hello
  endpoint:
    path: /api/hello
    method: GET
    data_selector: text
    params: {}
- name: typescript_configuration
  endpoint:
    path: /cms/configurations/typescript
    method: GET
    data_selector: configurations
- name: controller
  endpoint:
    path: /cms/backend-customization/controllers
    method: GET
- name: service
  endpoint:
    path: /cms/backend-customization/services
    method: GET
- name: policy
  endpoint:
    path: /cms/backend-customization/policies
    method: GET
- name: middleware
  endpoint:
    path: /cms/backend-customization/middlewares
    method: GET
- name: migration
  endpoint:
    path: /cms/database-migrations
    method: GET
- name: openapi
  endpoint:
    path: /cms/api/openapi
    method: GET
- name: templates
  endpoint:
    path: /cms/templates
    method: GET
- name: typescript
  endpoint:
    path: /cms/typescript
    method: GET
- name: routes
  endpoint:
    path: /cms/backend-customization/routes
    method: GET
- name: policies
  endpoint:
    path: /cms/backend-customization/policies
    method: GET
- name: middlewares
  endpoint:
    path: /cms/backend-customization/middlewares
    method: GET
- name: content-types
  endpoint:
    path: /cms/backend-customization/models
    method: GET
- name: hooks
  endpoint:
    path: /cms/hooks
    method: GET
- name: controllers
  endpoint:
    path: /cms/backend-customization/controllers
    method: GET
- name: services
  endpoint:
    path: /cms/backend-customization/services
    method: GET
- name: Marketplace
  endpoint:
    path: /marketplace
    method: GET
- name: billing_details
  endpoint:
    path: /cloud/account/account-billing
    method: GET
- name: invoices
  endpoint:
    path: /cloud/account/account-invoices
    method: GET
- name: deployments
  endpoint:
    path: /deployments
    method: GET
    data_selector: deployments
- name: project_settings
  endpoint:
    path: /project/settings
    method: GET
    data_selector: settings
- name: deployment_history
  endpoint:
    path: /deployments
    method: GET
    data_selector: deployments
- name: notifications
  endpoint:
    path: /notifications
    method: GET
    data_selector: notifications
- name: projects_overview
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
- name: runtime_logs
  endpoint:
    path: /runtime-logs
    method: GET
    data_selector: logs
- name: billing_details
  endpoint:
    path: /cloud/account/account-billing
    method: GET
- name: profile_settings
  endpoint:
    path: /cloud/account/account-settings
    method: GET
- name: database_configuration
  endpoint:
    path: /cloud/advanced/database
    method: GET
- name: email_provider
  endpoint:
    path: /cloud/advanced/email
    method: GET
- name: upload_provider
  endpoint:
    path: /cloud/advanced/upload
    method: GET
- name: cli
  endpoint:
    path: /cloud/cli/cloud-cli
    method: GET
- name: caching_performance
  endpoint:
    path: /cloud/getting-started/caching
    method: GET
- name: cloud_fundamentals
  endpoint:
    path: /cloud/getting-started/cloud-fundamentals
    method: GET
- name: project_deployment
  endpoint:
    path: /cloud/getting-started/deployment
    method: GET
- name: documents
  endpoint:
    path: /api/documents
    method: POST
    data_selector: data
    params: {}
- name: count_documents
  endpoint:
    path: /api/documents/count
    method: GET
    data_selector: count
    params: {}
- name: upload
  endpoint:
    path: /api/upload
    method: POST
    data_selector: ''
    params: {}
- name: findFirst
  endpoint:
    path: /cms/api/document-service#findfirst
    method: GET
    data_selector: ''
    params:
      status: published
- name: findMany
  endpoint:
    path: /cms/api/document-service#findmany
    method: GET
    data_selector: ''
    params:
      status: published
- name: count
  endpoint:
    path: /cms/api/document-service#count
    method: GET
    data_selector: ''
    params:
      status: draft
- name: create
  endpoint:
    path: /cms/api/document-service#create
    method: POST
    data_selector: ''
    params:
      status: published
- name: update
  endpoint:
    path: /cms/api/document-service#update
    method: PUT
    data_selector: ''
    params:
      status: published
- name: documents
  endpoint:
    path: /api/documents
    method: GET
    data_selector: data
- name: unpublish
  endpoint:
    path: /api/document-service/unpublish
    method: POST
    data_selector: documentId, entries
- name: discardDraft
  endpoint:
    path: /api/document-service/discardDraft
    method: POST
    data_selector: documentId, entries
- name: count
  endpoint:
    path: /api/document-service/count
    method: GET
    data_selector: number
- name: restaurants
  endpoint:
    path: /graphql
    method: POST
    data_selector: data.restaurants
- name: projects
  endpoint:
    path: /cloud/projects
    method: GET
    data_selector: projects
- name: deployments
  endpoint:
    path: /cloud/projects/deploys
    method: GET
    data_selector: deployments
- name: notifications
  endpoint:
    path: /cloud/projects/notifications
    method: GET
    data_selector: notifications
- name: unpublish
  endpoint:
    path: /api::restaurant.restaurant/unpublish
    method: POST
    data_selector: documentId
    params: {}
- name: discardDraft
  endpoint:
    path: /api::restaurant.restaurant/discardDraft
    method: POST
    data_selector: documentId
    params: {}
- name: count
  endpoint:
    path: /api::restaurant.restaurant/count
    method: GET
    data_selector: count
    params: {}
- name: findMany
  endpoint:
    path: /api::restaurant.restaurant/findMany
    method: GET
    data_selector: documents
    params: {}
- name: findOne
  endpoint:
    path: /api::restaurant.restaurant/findOne
    method: GET
    data_selector: document
    params: {}
- name: unpublish
  endpoint:
    path: /api/documents/unpublish
    method: POST
    data_selector: entries
- name: discardDraft
  endpoint:
    path: /api/documents/discardDraft
    method: POST
    data_selector: entries
- name: count
  endpoint:
    path: /api/documents/count
    method: GET
    data_selector: count
- name: documents
  endpoint:
    path: /api/documents
    method: GET
    data_selector: data
    params: {}
- name: unpublish
  endpoint:
    path: /unpublish
    method: POST
    data_selector: entries
    params:
      locale: Only the default locale
      filters: null
      fields: {}
      populate: null
- name: discardDraft
  endpoint:
    path: /discardDraft
    method: POST
    data_selector: entries
    params:
      locale: Only the default locale
      filters: null
      fields: {}
      populate: null
- name: count
  endpoint:
    path: /count
    method: GET
    data_selector: total
    params:
      locale: Default locale
      status: '''draft'''
      filters: null
- name: documents
  endpoint:
    path: /documents
    method: GET
    data_selector: data
    params:
      status: draft
- name: unpublish
  endpoint:
    path: /api::restaurant.restaurant/unpublish
    method: POST
    data_selector: documentId
    params: {}
- name: discardDraft
  endpoint:
    path: /api::restaurant.restaurant/discardDraft
    method: POST
    data_selector: documentId
    params: {}
- name: count
  endpoint:
    path: /api::restaurant.restaurant/count
    method: GET
    data_selector: count
    params: {}
- name: documents
  endpoint:
    path: /documents
    method: GET
    data_selector: documents
- name: content_type_plural_name
  endpoint:
    path: /api/content-type-plural-name
    method: POST
    data_selector: data
    params: {}
- name: document
  endpoint:
    path: /api/content-type-plural-name/document-id
    method: PUT
    data_selector: data
    params:
      locale: locale-code
- name: locale_version
  endpoint:
    path: /api/content-type-plural-name/document-id
    method: DELETE
    data_selector: data
    params:
      locale: locale-code
- name: billing_details
  endpoint:
    path: /cloud/account/account-billing
    method: GET
    data_selector: billing
- name: invoices
  endpoint:
    path: /cloud/account/account-invoices
    method: GET
    data_selector: invoices
- name: profile_settings
  endpoint:
    path: /cloud/account/account-settings
    method: GET
    data_selector: profile
- name: database_configuration
  endpoint:
    path: /cloud/advanced/database
    method: GET
    data_selector: database
- name: email_provider
  endpoint:
    path: /cloud/advanced/email
    method: GET
    data_selector: email
- name: upload_provider
  endpoint:
    path: /cloud/advanced/upload
    method: GET
    data_selector: upload
- name: documents
  endpoint:
    path: /cms/api/document-service
    method: GET
    data_selector: documents
    params: {}
- name: unpublish
  endpoint:
    path: /api/document-service/unpublish
    method: POST
    data_selector: entries
    params:
      documentId: ID
      locale: String, '*' or null
      filters: Object
      fields: Object
      populate: Object
- name: discardDraft
  endpoint:
    path: /api/document-service/discardDraft
    method: POST
    data_selector: entries
    params:
      documentId: ID
      locale: String, '*' or null
      filters: Object
      fields: Object
      populate: Object
- name: count
  endpoint:
    path: /api/document-service/count
    method: GET
    data_selector: number
    params:
      locale: String or null
      status: '''published'' or ''draft'''
      filters: Object
- name: disconnect
  endpoint:
    path: /disconnect
    method: POST
- name: set
  endpoint:
    path: /set
    method: POST
- name: document
  endpoint:
    path: /documents
    method: GET
    data_selector: data
    params: {}
- name: upload_files
  endpoint:
    path: /api/upload
    method: POST
    data_selector: null
    params: {}
- name: api
  endpoint:
    path: /config/api.js
    method: GET
    data_selector: responses
    params: {}
- name: cron_jobs
  endpoint:
    path: /config/cron
    method: GET
    data_selector: jobs
    params: {}
- name: unpublish
  endpoint:
    path: /api::document.unpublish
    method: POST
    data_selector: entries
- name: discardDraft
  endpoint:
    path: /api::document.discardDraft
    method: POST
    data_selector: entries
- name: count
  endpoint:
    path: /api::document.count
    method: GET
    data_selector: count
- name: documents
  endpoint:
    path: /documents
    method: GET
    data_selector: data
    params: {}
- name: webhooks
  endpoint:
    path: /webhooks
    method: POST
- name: upload_files
  endpoint:
    path: /api/upload/files
    method: GET
    data_selector: files
- name: upload_specific_file
  endpoint:
    path: /api/upload/files/:id
    method: GET
    data_selector: file
- name: upload
  endpoint:
    path: /api/upload
    method: POST
    data_selector: upload_response
- name: update_file_info
  endpoint:
    path: /api/upload?id=x
    method: POST
    data_selector: update_response
- name: delete_file
  endpoint:
    path: /api/upload/files/:id
    method: DELETE
    data_selector: delete_response
- name: documents
  endpoint:
    path: /cms/api/document-service
    method: GET
    data_selector: documents
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
- name: restaurant
  endpoint:
    path: /api/restaurants
    method: GET
- name: releases
  endpoint:
    path: /releases
    method: GET
    data_selector: data
    params: {}
- name: restaurants
  endpoint:
    path: /api/restaurants
    method: GET
    data_selector: data
- name: documents
  endpoint:
    path: /documents
    method: GET
    data_selector: data
- name: unpublish
  endpoint:
    path: /api/document-service/unpublish
    method: POST
    data_selector: documentId
    params: {}
- name: discardDraft
  endpoint:
    path: /api/document-service/discardDraft
    method: POST
    data_selector: documentId
    params: {}
- name: count
  endpoint:
    path: /api/document-service/count
    method: GET
    data_selector: total
    params: {}
- name: documents
  endpoint:
    path: /documents
    method: GET
    data_selector: records
- name: content-types
  endpoint:
    path: /content-types
    method: GET
    data_selector: data
    params: {}
- name: upload_files
  endpoint:
    path: /api/upload
    method: POST
    data_selector: files
    params: {}
- name: get_file_list
  endpoint:
    path: /api/upload/files
    method: GET
    data_selector: files
    params: {}
- name: get_specific_file
  endpoint:
    path: /api/upload/files/:id
    method: GET
    data_selector: file
    params: {}
- name: delete_file
  endpoint:
    path: /api/upload/files/:id
    method: DELETE
    data_selector: status
    params: {}
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
- name: API calls
  endpoint:
    path: /config/api
    method: GET
    data_selector: responses
    params: {}
- name: Cron jobs
  endpoint:
    path: /config/cron
    method: GET
    data_selector: jobs
    params: {}
- name: Database configuration
  endpoint:
    path: /config/database
    method: GET
    data_selector: database
    params: {}
- name: Server configuration
  endpoint:
    path: /config/server
    method: GET
    data_selector: server
    params: {}
- name: injection_zones
  endpoint:
    path: /cms/plugins-development/admin-panel-api/injection-zones
    method: GET
    data_selector: injection_zones
    params: {}
- name: restaurants
  endpoint:
    path: /api/restaurants
    method: GET
    data_selector: data
- name: hello
  endpoint:
    path: /api/hello
    method: GET
    data_selector: text
- name: auth_local
  endpoint:
    path: /api/auth/local
    method: POST
    data_selector: body
- name: users_me
  endpoint:
    path: /api/users/me
    method: GET
    data_selector: body
- name: homepage
  endpoint:
    path: /api/homepage
    method: GET
    data_selector: data
    params: {}
- name: collected_usage_information
  endpoint:
    path: /collected-usage-information
    method: GET
    data_selector: data
    params: {}
- name: billing_details
  endpoint:
    path: /cloud/account/account-billing
    method: GET
- name: invoices
  endpoint:
    path: /cloud/account/account-invoices
    method: GET
- name: profile_settings
  endpoint:
    path: /cloud/account/account-settings
    method: GET
- name: database_configuration
  endpoint:
    path: /cloud/advanced/database
    method: GET
- name: email_provider
  endpoint:
    path: /cloud/advanced/email
    method: GET
- name: content_counts
  endpoint:
    path: /count
    method: GET
    data_selector: ctx.body
    params: {}
- name: account_billing
  endpoint:
    path: /account/account-billing
    method: GET
- name: account_settings
  endpoint:
    path: /account/account-settings
    method: GET
- name: database
  endpoint:
    path: /advanced/database
    method: GET
- name: email_provider
  endpoint:
    path: /advanced/email
    method: GET
- name: upload_provider
  endpoint:
    path: /advanced/upload
    method: GET
- name: cli
  endpoint:
    path: /cli/cloud-cli
    method: GET
- name: caching_performance
  endpoint:
    path: /getting-started/caching
    method: GET
- name: cloud_fundamentals
  endpoint:
    path: /getting-started/cloud-fundamentals
    method: GET
- name: deployment
  endpoint:
    path: /getting-started/deployment
    method: GET
- name: documents
  endpoint:
    path: /api/document-service
    method: GET
    data_selector: data
    params: {}
- name: documents
  endpoint:
    path: /documents
    method: GET
    data_selector: data
- name: account_billing
  endpoint:
    path: //cloud/account/account-billing
    method: GET
    data_selector: billing_details
    params: {}
- name: account_settings
  endpoint:
    path: //cloud/account/account-settings
    method: GET
    data_selector: profile_settings
    params: {}
- name: database
  endpoint:
    path: //cloud/advanced/database
    method: GET
    data_selector: database_configuration
    params: {}
- name: email_provider
  endpoint:
    path: //cloud/advanced/email
    method: GET
    data_selector: email_provider_configuration
    params: {}
- name: upload_provider
  endpoint:
    path: //cloud/advanced/upload
    method: GET
    data_selector: upload_provider_configuration
    params: {}
- name: cli
  endpoint:
    path: //cloud/cli/cloud-cli
    method: GET
    data_selector: cli_commands
    params: {}
- name: caching_performance
  endpoint:
    path: //cloud/getting-started/caching
    method: GET
    data_selector: caching_performance_details
    params: {}
- name: cloud_fundamentals
  endpoint:
    path: //cloud/getting-started/cloud-fundamentals
    method: GET
    data_selector: cloud_fundamentals_details
    params: {}
- name: backups
  endpoint:
    path: /backups
    method: GET
    data_selector: backups
    params: {}
- name: domains
  endpoint:
    path: /domains
    method: GET
    data_selector: domains
    params: {}
- name: environment_variables
  endpoint:
    path: /variables
    method: GET
    data_selector: variables
    params: {}
- name: documents
  endpoint:
    path: /cms/api/document-service
    method: GET
- name: unpublish
  endpoint:
    path: /cms/api/document-service/unpublish
    method: POST
    data_selector: ''
    params:
      locale: Only the default locale
- name: discardDraft
  endpoint:
    path: /cms/api/document-service/discardDraft
    method: POST
    data_selector: ''
    params:
      locale: Only the default locale
- name: count
  endpoint:
    path: /cms/api/document-service/count
    method: GET
    data_selector: ''
    params:
      locale: Default locale
      status: '''draft'''
- name: restaurants
  endpoint:
    path: /restaurants
    method: POST
    data_selector: data
- name: account_billing
  endpoint:
    path: /cloud/account/account-billing
    method: GET
    data_selector: billing_details
- name: account_invoices
  endpoint:
    path: /cloud/account/account-invoices
    method: GET
    data_selector: invoices
- name: profile_settings
  endpoint:
    path: /cloud/account/account-settings
    method: GET
    data_selector: profile_settings
- name: database_configuration
  endpoint:
    path: /cloud/advanced/database
    method: GET
    data_selector: database_configuration
- name: email_provider
  endpoint:
    path: /cloud/advanced/email
    method: GET
    data_selector: email_provider
- name: upload_provider
  endpoint:
    path: /cloud/advanced/upload
    method: GET
    data_selector: upload_provider
- name: command_line_interface
  endpoint:
    path: /cloud/cli/cloud-cli
    method: GET
    data_selector: cli_commands
- name: caching_performance
  endpoint:
    path: /cloud/getting-started/caching
    method: GET
    data_selector: caching_performance
- name: cloud_fundamentals
  endpoint:
    path: /cloud/getting-started/cloud-fundamentals
    method: GET
    data_selector: cloud_fundamentals
- name: project_deployment
  endpoint:
    path: /cloud/getting-started/deployment
    method: GET
    data_selector: project_deployment
- name: unpublish
  endpoint:
    path: /cms/api/document-service/unpublish
    method: POST
    data_selector: records
- name: discardDraft
  endpoint:
    path: /cms/api/document-service/discardDraft
    method: POST
    data_selector: records
- name: count
  endpoint:
    path: /cms/api/document-service/count
    method: GET
    data_selector: records
- name: documents
  endpoint:
    path: /cms/api/document-service/documents
    method: GET
    data_selector: records
    params: {}
- name: billing
  endpoint:
    path: /cloud/account/account-billing
    method: GET
    data_selector: billing_details
    params: {}
- name: invoices
  endpoint:
    path: /cloud/account/account-invoices
    method: GET
    data_selector: invoices_list
    params: {}
- name: unpublish
  endpoint:
    path: /cms/api/document-service/unpublish
    method: POST
    data_selector: documentId
- name: discardDraft
  endpoint:
    path: /cms/api/document-service/discardDraft
    method: POST
    data_selector: documentId
- name: count
  endpoint:
    path: /cms/api/document-service/count
    method: GET
    data_selector: number
- name: account_billing
  endpoint:
    path: //cloud/account/account-billing
    method: GET
- name: account_settings
  endpoint:
    path: //cloud/account/account-settings
    method: GET
- name: database
  endpoint:
    path: //cloud/advanced/database
    method: GET
- name: email_provider
  endpoint:
    path: //cloud/advanced/email
    method: GET
- name: upload_provider
  endpoint:
    path: //cloud/advanced/upload
    method: GET
- name: cli
  endpoint:
    path: //cloud/cli/cloud-cli
    method: GET
- name: caching_performance
  endpoint:
    path: //cloud/getting-started/caching
    method: GET
- name: cloud_fundamentals
  endpoint:
    path: //cloud/getting-started/cloud-fundamentals
    method: GET
- name: deployment
  endpoint:
    path: //cloud/getting-started/deployment
    method: GET
- name: general_settings
  endpoint:
    path: /cloud/projects/settings
    method: GET
    data_selector: settings
- name: environments
  endpoint:
    path: /cloud/projects/environments
    method: GET
    data_selector: environments
- name: billing_usage
  endpoint:
    path: /cloud/projects/billing-usage
    method: GET
    data_selector: billing_usage
- name: plans
  endpoint:
    path: /cloud/projects/plans
    method: GET
    data_selector: plans
- name: invoices
  endpoint:
    path: /cloud/projects/invoices
    method: GET
    data_selector: invoices
- name: unpublish
  endpoint:
    path: /unpublish
    method: POST
    data_selector: results
- name: discardDraft
  endpoint:
    path: /discardDraft
    method: POST
    data_selector: results
- name: count
  endpoint:
    path: /count
    method: GET
    data_selector: results
- name: documents
  endpoint:
    path: /cms/api/document-service
    method: GET
    data_selector: records
- name: account_billing
  endpoint:
    path: /cloud/account/account-billing
    method: GET
- name: account_settings
  endpoint:
    path: /cloud/account/account-settings
    method: GET
- name: database
  endpoint:
    path: /cloud/advanced/database
    method: GET
- name: email_provider
  endpoint:
    path: /cloud/advanced/email
    method: GET
- name: upload_provider
  endpoint:
    path: /cloud/advanced/upload
    method: GET
- name: cli
  endpoint:
    path: /cloud/cli/cloud-cli
    method: GET
- name: caching_performance
  endpoint:
    path: /cloud/getting-started/caching
    method: GET
- name: cloud_fundamentals
  endpoint:
    path: /cloud/getting-started/cloud-fundamentals
    method: GET
- name: deployment
  endpoint:
    path: /cloud/getting-started/deployment
    method: GET
- name: documents
  endpoint:
    path: /cms/api/document-service
    method: GET
- name: Project Settings
  endpoint:
    path: /cloud/projects/settings
    method: GET
    data_selector: settings
- name: Environments
  endpoint:
    path: /cloud/projects/settings/environments
    method: GET
    data_selector: environments
- name: Billing & Usage
  endpoint:
    path: /cloud/projects/settings/billing
    method: GET
    data_selector: billing
- name: Plans
  endpoint:
    path: /cloud/projects/settings/plans
    method: GET
    data_selector: plans
- name: Invoices
  endpoint:
    path: /cloud/projects/settings/invoices
    method: GET
    data_selector: invoices
- name: documents
  endpoint:
    path: /cms/api/document-service
    method: GET
    data_selector: records
- name: unpublish
  endpoint:
    path: /unpublish
    method: POST
- name: discardDraft
  endpoint:
    path: /discardDraft
    method: POST
- name: count
  endpoint:
    path: /count
    method: GET
- name: create_localized_document
  endpoint:
    path: /api/content-type-plural-name
    method: POST
- name: update_locale_version
  endpoint:
    path: /api/content-type-plural-name/document-id
    method: PUT
- name: delete_locale_version
  endpoint:
    path: /api/content-type-plural-name/document-id
    method: DELETE
- name: account_billing
  endpoint:
    path: //cloud/account/account-billing
    method: GET
- name: account_settings
  endpoint:
    path: //cloud/account/account-settings
    method: GET
- name: database
  endpoint:
    path: //cloud/advanced/database
    method: GET
- name: email_provider
  endpoint:
    path: //cloud/advanced/email
    method: GET
- name: upload_provider
  endpoint:
    path: //cloud/advanced/upload
    method: GET
- name: cli
  endpoint:
    path: //cloud/cli/cloud-cli
    method: GET
- name: caching_performance
  endpoint:
    path: //cloud/getting-started/caching
    method: GET
- name: cloud_fundamentals
  endpoint:
    path: //cloud/getting-started/cloud-fundamentals
    method: GET
- name: deployment
  endpoint:
    path: //cloud/getting-started/deployment
    method: GET
- name: Project Settings
  endpoint:
    path: /cloud/projects/settings
    method: GET
    data_selector: settings
- name: Environments
  endpoint:
    path: /cloud/projects/environments
    method: GET
    data_selector: environments
- name: Billing & Usage
  endpoint:
    path: /cloud/projects/billing
    method: GET
    data_selector: billing
- name: Plans
  endpoint:
    path: /cloud/projects/plans
    method: GET
    data_selector: plans
- name: Invoices
  endpoint:
    path: /cloud/projects/invoices
    method: GET
    data_selector: invoices
- name: unpublish
  endpoint:
    path: /unpublish
    method: POST
- name: discardDraft
  endpoint:
    path: /discardDraft
    method: POST
- name: count
  endpoint:
    path: /count
    method: GET
- name: documents
  endpoint:
    path: /api/documents
    method: GET
    data_selector: data
    params: {}
- name: Document
  endpoint:
    path: /documents
    method: GET
    data_selector: data
    params: {}
- name: status
  endpoint:
    path: /cms/api/rest/status
    method: GET
- name: upload
  endpoint:
    path: /cms/api/rest/upload
    method: POST
- name: api
  endpoint:
    path: /api
    method: GET
    data_selector: records
    params:
      limit: '25'
- name: project_settings
  endpoint:
    path: /cloud/projects/settings
    method: GET
    data_selector: settings
- name: environments
  endpoint:
    path: /cloud/projects/environments
    method: GET
    data_selector: environments
- name: billing_usage
  endpoint:
    path: /cloud/projects/billing-usage
    method: GET
    data_selector: billingUsage
- name: plans
  endpoint:
    path: /cloud/projects/plans
    method: GET
    data_selector: plans
- name: invoices
  endpoint:
    path: /cloud/projects/invoices
    method: GET
    data_selector: invoices
- name: unpublish
  endpoint:
    path: /cms/api/document-service/unpublish
    method: POST
    data_selector: records
    params: {}
- name: discardDraft
  endpoint:
    path: /cms/api/document-service/discardDraft
    method: POST
    data_selector: records
    params: {}
- name: count
  endpoint:
    path: /cms/api/document-service/count
    method: GET
    data_selector: records
    params: {}
- name: documents
  endpoint:
    path: /documents
    method: GET
    data_selector: data
    params: {}
- name: upload_files
  endpoint:
    path: /api/upload
    method: POST
- name: account_billing
  endpoint:
    path: //cloud/account/account-billing
    method: GET
    data_selector: billing_details
    params: {}
- name: profile_settings
  endpoint:
    path: //cloud/account/account-settings
    method: GET
    data_selector: profile_details
    params: {}
- name: database
  endpoint:
    path: //cloud/advanced/database
    method: GET
    data_selector: database_configuration
    params: {}
- name: email_provider
  endpoint:
    path: //cloud/advanced/email
    method: GET
    data_selector: email_configuration
    params: {}
- name: upload_provider
  endpoint:
    path: //cloud/advanced/upload
    method: GET
    data_selector: upload_configuration
    params: {}
- name: cli
  endpoint:
    path: //cloud/cli/cloud-cli
    method: GET
    data_selector: cli_commands
    params: {}
- name: caching_performance
  endpoint:
    path: //cloud/getting-started/caching
    method: GET
    data_selector: caching_details
    params: {}
- name: cloud_fundamentals
  endpoint:
    path: //cloud/getting-started/cloud-fundamentals
    method: GET
    data_selector: cloud_concepts
    params: {}
- name: deployment
  endpoint:
    path: //cloud/getting-started/deployment
    method: GET
    data_selector: deployment_steps
    params: {}
- name: documents
  endpoint:
    path: /cms/api/document-service
    method: GET
    data_selector: records
- name: upload_files
  endpoint:
    path: /api/upload/files
    method: GET
- name: get_file
  endpoint:
    path: /api/upload/files/:id
    method: GET
- name: upload_files_post
  endpoint:
    path: /api/upload
    method: POST
- name: update_file_info
  endpoint:
    path: /api/upload?id=x
    method: POST
- name: delete_file
  endpoint:
    path: /api/upload/files/:id
    method: DELETE
- name: restaurants
  endpoint:
    path: /api/restaurants
    method: GET
    data_selector: data
- name: user_registration
  endpoint:
    path: /api/auth/local/register
    method: POST
    data_selector: data
- name: project_settings
  endpoint:
    path: /cloud/projects/settings
    method: GET
- name: environments
  endpoint:
    path: /cloud/projects/environments
    method: GET
- name: billing_usage
  endpoint:
    path: /cloud/projects/billing-usage
    method: GET
- name: plans
  endpoint:
    path: /cloud/projects/plans
    method: GET
- name: invoices
  endpoint:
    path: /cloud/projects/invoices
    method: GET
- name: account_billing
  endpoint:
    path: //cloud/account/account-billing
    method: GET
- name: account_settings
  endpoint:
    path: //cloud/account/account-settings
    method: GET
- name: database_configuration
  endpoint:
    path: //cloud/advanced/database
    method: GET
- name: email_provider
  endpoint:
    path: //cloud/advanced/email
    method: GET
- name: upload_provider
  endpoint:
    path: //cloud/advanced/upload
    method: GET
- name: cli
  endpoint:
    path: //cloud/cli/cloud-cli
    method: GET
- name: caching_performance
  endpoint:
    path: //cloud/getting-started/caching
    method: GET
- name: cloud_fundamentals
  endpoint:
    path: //cloud/getting-started/cloud-fundamentals
    method: GET
- name: deployment
  endpoint:
    path: //cloud/getting-started/deployment
    method: GET
- name: documents
  endpoint:
    path: /cms/api/document-service
    method: GET
    data_selector: records
- name: unpublish
  endpoint:
    path: /cms/api/document-service/unpublish
    method: POST
    data_selector: data
- name: discardDraft
  endpoint:
    path: /cms/api/document-service/discardDraft
    method: POST
    data_selector: data
- name: count
  endpoint:
    path: /cms/api/document-service/count
    method: GET
    data_selector: data
- name: upload_files
  endpoint:
    path: /api/upload
    method: POST
    data_selector: files
- name: get_files
  endpoint:
    path: /api/upload/files
    method: GET
    data_selector: files
- name: get_specific_file
  endpoint:
    path: /api/upload/files/:id
    method: GET
    data_selector: file
- name: delete_file
  endpoint:
    path: /api/upload/files/:id
    method: DELETE
    data_selector: response
- name: Releases
  endpoint:
    path: /cms/features/releases
    method: GET
- name: Review Workflows
  endpoint:
    path: /cms/features/review-workflows
    method: GET
- name: Single Sign-On (SSO)
  endpoint:
    path: /cms/features/sso
    method: GET
- name: Users & Permissions
  endpoint:
    path: /cms/features/users-permissions
    method: GET
- name: Installation
  endpoint:
    path: /cms/installation
    method: GET
- name: Breaking Changes
  endpoint:
    path: /cms/migration/v4-to-v5/breaking-changes
    method: GET
- name: custom_fields
  endpoint:
    path: //cms/features/custom-fields
    method: GET
    data_selector: customFields
    params: {}
- name: data_management
  endpoint:
    path: //cms/features/data-management
    method: GET
    data_selector: dataManagement
    params: {}
- name: draft_and_publish
  endpoint:
    path: //cms/features/draft-and-publish
    method: GET
    data_selector: draftAndPublish
    params: {}
- name: email
  endpoint:
    path: //cms/features/email
    method: GET
    data_selector: email
    params: {}
- name: internationalization
  endpoint:
    path: //cms/features/internationalization
    method: GET
    data_selector: internationalization
    params: {}
- name: media_library
  endpoint:
    path: //cms/features/media-library
    method: GET
    data_selector: mediaLibrary
    params: {}
- name: preview
  endpoint:
    path: //cms/features/preview
    method: GET
    data_selector: preview
    params: {}
- name: rbac
  endpoint:
    path: //cms/features/rbac
    method: GET
    data_selector: rbac
    params: {}
- name: releases
  endpoint:
    path: //cms/features/releases
    method: GET
    data_selector: releases
    params: {}
- name: HeaderActionDescription
  endpoint:
    path: /addDocumentHeaderAction
    method: POST
    data_selector: actions
- name: BulkActionDescription
  endpoint:
    path: /addBulkAction
    method: POST
    data_selector: actions
- name: addEditViewSidePanel
  endpoint:
    path: /cms/plugins-development/content-manager-apis#addeditviewsidepanel
    method: POST
    data_selector: apis
- name: addDocumentAction
  endpoint:
    path: /cms/plugins-development/content-manager-apis#adddocumentaction
    method: POST
    data_selector: apis
- name: addDocumentHeaderAction
  endpoint:
    path: /cms/plugins-development/content-manager-apis#adddocumentheaderaction
    method: POST
    data_selector: apis
- name: addBulkAction
  endpoint:
    path: /cms/plugins-development/content-manager-apis#addbulkaction
    method: POST
    data_selector: apis
- name: restaurants
  endpoint:
    path: /api/restaurants
    method: GET
    data_selector: data
- name: hello
  endpoint:
    path: /api/hello
    method: GET
    data_selector: text
- name: auth_local
  endpoint:
    path: /api/auth/local
    method: POST
    data_selector: body
- name: users_me
  endpoint:
    path: /api/users/me
    method: GET
    data_selector: body
- name: restaurant
  endpoint:
    path: /api/restaurants
    method: GET
    data_selector: data
    params: {}
- name: restaurant
  endpoint:
    path: /api/restaurant
    method: GET
    data_selector: attributes
- name: article
  endpoint:
    path: /api/article
    method: GET
    data_selector: attributes
- name: category
  endpoint:
    path: /api/category
    method: GET
    data_selector: attributes
- name: tag
  endpoint:
    path: /api/tag
    method: GET
    data_selector: attributes
- name: person
  endpoint:
    path: /api/person
    method: GET
    data_selector: attributes
- name: plant
  endpoint:
    path: /api/plant
    method: GET
    data_selector: attributes
- name: book
  endpoint:
    path: /api/book
    method: GET
    data_selector: attributes
- name: ctx.request
  endpoint:
    path: /api/restaurants
    method: GET
    data_selector: body
    params:
      id: '123'
- name: restaurant
  endpoint:
    path: /api/restaurant
    method: GET
    data_selector: records
- name: custom_route
  endpoint:
    path: /articles/customRoute
    method: GET
    data_selector: records
- name: restaurant
  endpoint:
    path: /restaurants
    method: GET
- name: restaurant
  endpoint:
    path: /api/restaurant
    method: GET
    data_selector: data
    params: {}
- name: hello
  endpoint:
    path: /hello
    method: GET
    data_selector: body
    params: {}
- name: restaurant
  endpoint:
    path: /api/restaurant
    method: GET
    data_selector: data
- name: entry.create
  endpoint:
    path: /webhooks/entry.create
    method: POST
- name: entry.update
  endpoint:
    path: /webhooks/entry.update
    method: POST
- name: entry.delete
  endpoint:
    path: /webhooks/entry.delete
    method: POST
- name: entry.publish
  endpoint:
    path: /webhooks/entry.publish
    method: POST
- name: entry.unpublish
  endpoint:
    path: /webhooks/entry.unpublish
    method: POST
- name: media.create
  endpoint:
    path: /webhooks/media.create
    method: POST
- name: media.update
  endpoint:
    path: /webhooks/media.update
    method: POST
- name: media.delete
  endpoint:
    path: /webhooks/media.delete
    method: POST
- name: review-workflows.updateEntryStage
  endpoint:
    path: /webhooks/review-workflows.updateEntryStage
    method: POST
- name: releases.publish
  endpoint:
    path: /webhooks/releases.publish
    method: POST
- name: documents
  endpoint:
    path: /api/documents
    method: GET
    data_selector: records
- name: delete_document
  endpoint:
    path: /cms/api/document-service/delete
    method: DELETE
    data_selector: entries
    params:
      documentId: documentId
- name: publish_document
  endpoint:
    path: /cms/api/document-service/publish
    method: POST
    data_selector: entries
    params:
      documentId: documentId
- name: unpublish_document
  endpoint:
    path: /cms/api/document-service/unpublish
    method: POST
    data_selector: entries
    params:
      documentId: documentId
- name: discard_draft
  endpoint:
    path: /cms/api/document-service/discardDraft
    method: POST
    data_selector: entries
    params:
      documentId: documentId
- name: count_documents
  endpoint:
    path: /cms/api/document-service/count
    method: GET
    data_selector: total
    params: {}
- name: injection_zones
  endpoint:
    path: /injection-zones
    method: GET
    data_selector: zones
- name: hooks
  endpoint:
    path: /hooks
    method: GET
    data_selector: hooks
- name: reducers
  endpoint:
    path: /reducers
    method: GET
    data_selector: reducers
- name: admin_panel
  endpoint:
    path: /admin
    method: GET
    data_selector: data
    params: {}
- name: admin_panel
  endpoint:
    path: /admin
    method: GET
- name: documentation
  endpoint:
    path: /documentation
    method: GET
    data_selector: paths
    params: {}
- name: graphql
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
- name: graphql
  endpoint:
    path: /graphql
    method: POST
    data_selector: data
    params: {}
- name: locales
  endpoint:
    path: /admin/app.js
    method: GET
    data_selector: config.locales
- name: translations
  endpoint:
    path: /admin/app.js
    method: GET
    data_selector: config.translations
- name: auth_logo
  endpoint:
    path: config.auth.logo
    method: UPDATE
- name: menu_logo
  endpoint:
    path: config.menu.logo
    method: UPDATE
- name: admin_panel
  endpoint:
    path: /admin
    method: GET
- name: theme_extension
  endpoint:
    path: /cms/admin-panel-customization/theme-extension
    method: GET
- name: document
  endpoint:
    path: /api/document
    method: GET
    data_selector: data
    params: {}
- name: upload
  endpoint:
    path: /api/upload
    method: POST
    data_selector: data
    params: {}
notes:
- All content types are private by default and need to be either made public or queries
  need to be authenticated with the proper permissions.
- Local users and Strapi Cloud users are different. The databases for your Strapi
  Cloud project and your local project are different.
- The admin panel of a local Strapi project runs at http://localhost:1337/admin.
- In order to access the admin panel, your Strapi application must be launched, and
  you must be aware of the URL to its admin panel (e.g. api.example.com/admin).
- Available in both Development & Production environment.
- New entries are only considered created once some of their content has been written
  and saved once.
- Dynamic zones allow a flexible content structure.
- Different components cannot have the same field name with different types.
- Available in Development environment only.
- Uses environment variables for configuration.
- Recommended to use pm2 to manage your process.
- Read-only API tokens can only access the find and findOne functions.
- Available by default, if required plan
- Available in both Development & Production environment
- This feature requires Strapi version 5.0.0 or later.
- Custom fields extend Strapi’s capabilities by adding new types of fields to content-types
  and components.
- Ready-made custom fields can be found on the Marketplace.
- Custom fields can only be shared and distributed on the Marketplace using plugins.
- Custom fields cannot add new data types to Strapi and must use existing, built-in
  Strapi data types.
- Data Management is CLI-based only, but is partly configured in the admin panel.
- A transfer.token.salt should be defined in the config/admin configuration file.
- Available but disabled by default
- Requires setup through the Content-Type Builder
- Email feature requires a provider and configuration in the config/plugins.js|ts
  file.
- Sendmail is the default email provider, not production-ready.
- Internationalization feature must be configured from Settings and enabled on content
  types.
- Available and activated by default
- Minimum 'Access the Media Library' permission in Roles > Plugins - Upload
- Live Preview available only with the CMS Growth and Enterprise plans.
- Should be configured in the `config/admin` file
- Available and activated by default in both Development & Production environment
- Releases will not work if Draft & Publish is disabled for the content-type.
- Review Workflows feature is available with an Enterprise plan.
- Each workflow can consist of any review stages for your content.
- The Single Sign-On (SSO) feature can be made available on a Strapi application to
  allow administrators to authenticate through an identity provider.
- The Users & Permissions feature provides a full authentication process based on
  JSON Web Tokens (JWT).
- Available by default in Development & Production environments.
- The baseURL must include the protocol (http or https). An invalid URL will throw
  an error StrapiInitializationError.
- If the token is invalid or missing, the client will throw an error during initialization
  StrapiValidationError.
- OpenAPI generation feature is currently experimental. Its behavior and output might
  change in future releases without following semantic versioning.
- The GraphQL API does not support media upload. Use the REST API `POST /upload` endpoint
  for all file uploads.
- The GraphQL API does not support media upload.
- category must NOT be "pizza"
- If the `rest.maxLimit` value is less than the `rest.defaultLimit` value, `maxLimit`
  will be the limit used.
- The cron.enabled configuration option should be set to true in the ./config/server.js
  file.
- Cron jobs allow scheduling arbitrary functions for execution at specific dates.
- Environment variables can be defined in a .env file.
- Enable future flags at your own risk. Experimental features may be subject to change
  or removal, may contain breaking changes, may be unstable or not fully ready for
  use, and some parts may still be under development or using mock data.
- The array is pre-populated with internal, built-in middlewares, prefixed by `strapi::`
- If you aren't sure where to place a middleware in the stack, add it to the end of
  the list.
- Changes to the server.js file require rebuilding the admin panel.
- The API requires Strapi 5.13+
- Guide for unit testing with Jest and Supertest
- Must create a separate SQLite database for tests
- This feature is considered experimental.
- Lifecycle functions documentation has been moved to the Development section.
- Email and Upload Providers documentation have been included in the corresponding
  Features pages.
- The upgrade tool assists Strapi users in upgrading their Strapi application dependencies
  and code to a specific version.
- It's strongly recommended to review the modifications made before re-running the
  app or plugin.
- Strapi Cloud provides a pre-configured PostgreSQL database by default.
- You can also configure it to utilize an external SQL database if needed.
- You cannot delete the primary card as at least one credit card must be available
  as payment method.
- Using an external database may result in unexpected behavior and/or performance
  issues.
- On the Free plan, projects automatically scale down to zero after a short period
  of inactivity.
- Backups include only the database of your default Production environment.
- The backup feature is not available for Strapi Cloud projects on the Free or Essential
  plans.
- All notifications older than 30 days are automatically removed from the Notification
  center.
- Runtime logs are not live for projects on the Free plan and are reset each time
  the application is scaled to zero due to inactivity.
- Projects automatically scale down to zero after a short period of inactivity on
  the Free plan.
- Runtime logs are only accessible once the project is successfully deployed.
- If you don't see the Strapi CMS license key section, it probably means that your
  subscription is a legacy one and does not support custom CMS licenses.
- Updating the git repository could result in the loss of the project and its data,
  for instance if the wrong repository is selected or if the data schema between the
  old and new repository doesn't match.
- Once the ownership transfer is done, the project will be disconnected from Strapi
  Cloud. As new owner, make sure to go to the General tab of project settings to reconnect
  the project.
- No invoice is issued for the Free plan.
- Supports OAuth2 authentication.
- Free plan does not require billing information.
- There is no size limit for image files set through the configuration files.
- Custom domains are not available on the Free plan. Downgrading to the Free plan
  will result in the application domain's being restored to the default one.
- No billing step for the Free plan
- Overages are not allowed on the Free plan.
- You have to send FormData in your request body.
- The backup file will include only the database of your default Production environment.
- The Document Service API returns the draft version by default.
- REST and GraphQL APIs return the published version by default.
- This method is only available if Draft & Publish is enabled on the content-type.
- The *Runtime logs* are only accessible once the project is successfully deployed.
- Projects created by a user via their Strapi Cloud account can be shared with maintainers.
- Free plan projects automatically scale down to zero after inactivity.
- The backup file will include only the database of your default Production environment.
  It will not include assets or any other environment databases.
- Invalid URL will throw an error StrapiInitializationError.
- By default the Document Service API returns the draft version of a document when
  the Draft & Publish feature is enabled.
- Draft & Publish feature must be enabled on the content-type.
- An invalid URL will throw an error StrapiInitializationError.
- If no locale parameter is passed, the default locale version is used.
- 'Passing { status: ''draft'' } to a Document Service API query returns the same
  results as not passing any status parameter.'
- To upgrade your project to a paid plan, you will need to fill in your billing information
  in the Billing section of your Profile.
- Deploying the project will create a new Strapi Cloud project on the Free plan.
- Automatic deployment is compatible with all other deployment methods.
- By default, the Document Service API returns the draft version of a document.
- Relations, media fields, components, and dynamic zones are not populated by default.
  Use the `populate` parameter to populate these content structures.
- Querying your API with deep filters may cause performance issues. If one of your
  deep filtering queries is too slow, we recommend building a custom route with an
  optimized version of the query.
- Automatic deployment is compatible with all other deployment methods, so once a
  git repository is connected, you can trigger a new deployment to Strapi Cloud from
  the Cloud dashboard, from the CLI, or by pushing new commits to your connected repository.
- If the token is invalid or missing, the client will throw an error during initialization
  `StrapiValidationError`.
- Strapi Cloud is a hosting platform that allows to deploy already existing Strapi
  projects created with Strapi CMS.
- Omitting any parameter is equivalent to using `set`.
- Pagination methods can not be mixed. Always use either page with pageSize or start
  with limit.
- Strapi is secured by default, which means that most of your endpoints require the
  user to be authorized.
- Interactive commands such as `strapi admin:create-user` don't display prompts with
  `npm`. Please consider using the `yarn` package manager.
- It is recommended to install Strapi locally only, which requires prefixing all strapi
  commands with the package manager used for the project setup.
- If you don't see the *Strapi CMS license key* section, it probably means that your
  subscription is a legacy one and does not support custom CMS licenses. It means
  that you already have one that is automatically included on your project.
- Once the ownership transfer is done, the project will be disconnected from Strapi
  Cloud. As new owner, make sure to go to the *General* tab of project settings to
  reconnect the project.
- Querying your API with deep filters may cause performance issues.
- Use the `status` parameter to get the published version of a document.
- Depending on the complexity of your custom controllers, you may need additional
  sanitization that Strapi cannot currently account for, especially when combining
  the data from multiple sources.
- Files uploaded through REST are located in the automatically created 'API Uploads'
  folder.
- Folders are an admin panel-only feature and are not part of the Content API.
- It is recommended to install Strapi locally only.
- You should never use this command to run a Strapi application in production.
- Cron jobs that are using the key as the rule can not be removed.
- Customizing the database or the external, front-end application are outside of the
  scope of the present documentation section.
- Database migrations are experimental. This feature is still a work in progress and
  will continue to be updated and improved.
- As long as the ownership transfer or request hasn't been confirmed, there is the
  option to cancel in the same dialog that the maintainer was chosen.
- Once the ownership transfer is done, the project will be disconnected from Strapi
  Cloud. As new owner, make sure to go to the  *General* tab of project settings to
  reconnect the project.
- The backup feature is not available for Strapi Cloud projects on the Free or Essential
  plans. You will need to upgrade to the Pro or Scale plan to enable automatic backups
  and access the manual backup option.
- Uses Draft & Publish feature which must be enabled on the content-type
- By default, the Document Service API returns the draft version of a document when
  the Draft & Publish feature is enabled.
- The default endpoint path is prefixed with /api/ and should be kept as-is unless
  you configured a different API prefix.
- Since published versions are returned by default, passing no status parameter is
  equivalent to passing status=published.
- Requests sent to Strapi on any URL are handled by routes.
- 'Do not overwrite the environment variables: HOST, PORT, APP_KEYS, API_TOKEN_SALT,
  and ADMIN_JWT_SECRET.'
- It is recommended to install Strapi locally only, which requires prefixing all of
  the following `strapi` commands with the package manager used for the project setup.
- Interactive commands such as `strapi admin:create-user` don't display prompts with
  `npm`.
- Strapi is natively handling errors with a standard format.
- In order to access the admin panel, your Strapi application must be launched, and
  you must be aware of the URL to its admin panel (e.g. `api.example.com/admin`).
- If you prefer or are required to log in via an SSO provider, please refer to the
  [Single Sign-On documentation](/cms/features/sso).
- Custom fields can be added to Strapi either by installing them from the Marketplace
  or by creating your own.
- JWTs can be verified and trusted because the information is digitally signed.
- The Runtime logs are only accessible once the project is successfully deployed.
- Updating the git repository could result in the loss of the project and its data.
- Once the ownership transfer is done, the project will be disconnected from Strapi
  Cloud.
- If the API token is invalid or missing, the client will throw an error during initialization.
- If the Users & Permissions plugin is installed, the find permission must be enabled
  for the content-types that are being populated.
- Default value for draftAndPublish is true
- The privateAttributes defined in the model are merged with the privateAttributes
  defined in the global Strapi configuration.
- Once a release is published, the release itself cannot be updated.
- Injection zones are defined in the register lifecycle but components are injected
  in the bootstrap lifecycle.
- Strapi 5 has a new, flattened response format for API calls
- REST API input is validated by default in controllers
- The Entity Service API is deprecated and replaced by the Document Service API
- i18n is now part of the strapi core
- In a monorepo environment, you can configure your local plugin without using the
  Plugin SDK by adding 2 entry point files at the root of your plugin.
- A plugin can only interact with data from the /server folder.
- Jest version 26.6.3 works without an issue
- Strapi 5 introduces a new Document Service API to replace the Entity Service API
  from v4.
- Make sure to configure OAuth2 settings in your Strapi dashboard.
- Strapi does not support changing the default ID type or name.
- Strapi is not well suited for serverless environments.
- If you chose the free plan, this billing step will be skipped as you will not be
  asked to share your credit card details at the creation of the project.
- You can attach a dedicated card to your project by choosing the payment method directly
  from this page. In that way, you can manage your subscriptions with different cards.
- When using the Free plan, the buttons to upgrade to another plan are greyed out
  and unusable until you have filled in your billing information.
- Backups include only the database of your default Production environment. Assets
  uploaded to your project and databases from any secondary environments are not included.
- If an error occurs during the environment creation, the progress indicator will
  stop and display an error message. You will see a **Retry** button next to the failed
  step, allowing you to restart the creation process.
- If no locale is passed, the default locale will be assumed.
- Custom domains are not available on the Free plan.
- The Document Service API is built on top of the Query Engine API and is used to
  perform CRUD operations on documents.
- Projects automatically scale down to zero on the Free plan after a short period
  of inactivity.
- No billing step for the Free plan. To upgrade your project to a paid plan, you will
  need to fill in your billing information in the Billing section of your Profile.
- By default returns draft version of a document when Draft & Publish feature is enabled.
- Projects on the Free plan automatically scale down to zero after a short period
  of inactivity.
- By default, the REST API responses only include top-level fields and does not populate
  any relations, media fields, components, or dynamic zones.
- Uses API tokens for authentication.
- 'Content-Type should have the createLocalization permission enabled, otherwise the
  request will return a 403: Forbidden status.'
- It is not possible to change the locale of an existing localized entry.
- The Free plan does not include access to support.
- Strapi uses a Node.js feature called context to make the request context available
  anywhere.
- It is recommended to install Strapi locally only, which requires prefixing all of
  the following `strapi` commands with the package manager used for the project setup
  (e.g `npm run strapi help` or `yarn strapi help`) or a dedicated node package executor
  (e.g. `npx strapi help`).
- Queries can accept a populate parameter to explicitly define which fields to populate.
- Globally scoped custom middlewares should be added to the middlewares configuration
  file or Strapi won't load them.
- API level and plugin middlewares can be added into the specific router that they
  are relevant to.
- Policies are used for securing business logic.
- Routes can be associated with both global and scoped policies.
- Webhooks will not work for the User content-type.
- To prevent unintentionally sending any user's information to other applications.
- Cron jobs that are using the [key as the rule] can not be removed.
- If no `locale` parameter is passed, `unpublish()` only unpublishes the default locale
  version of the document.
- If no `locale` parameter is passed, `discardDraft()` discards draft data and overrides
  it with the published version only for the default locale.
- If no parameter is passed, the `count()` method the total number of documents for
  the default locale.
- Policies are functions that execute specific logic on each request before it reaches
  the controller.
- Policies can be global or scoped.
- When connecting Strapi to a PostgreSQL database, the database user requires SCHEMA
  permissions.
- A new database user explicitly created for the Strapi application will not have
  SCHEMA permissions by default, resulting in a 500 error when trying to load the
  admin console.
- Always backup your database before performing any upgrade.
- By default the Document Service API returns the default locale version of documents.
- Folders are an admin panel-only feature and are not part of the Content API (REST
  or GraphQL).
- Global policies can be associated to any route in a project.
- Using a webhook is a good way to tell third-party providers to start some processing
  (CI, build, deployment ...).
- Private fields and sensitive information are not sent in the payload.
- Strapi requires the project types to be generated in the types directory for them
  to work.
- Database user requires SCHEMA permissions.
- A new database user explicitly created for the Strapi application will not have
  SCHEMA permissions by default.
- API tokens allow users to authenticate REST and GraphQL API queries.
- Enable debugging mode with verbose logs
- Do not log anything
- All Content Manager APIs share the same API shape and must use components.
- The databases for your Strapi Cloud project and your local project are different.
- If you receive an error `Jest has detected the following 1 open handles potentially
  keeping Jest from exiting` check `jest` version as `26.6.3` works without an issue.
- Models define a representation of the content structure.
- Content-types can be created with the Content-type Builder in the admin panel or
  Strapi's interactive CLI.
- All customizations described in the pages of this section are only for the REST
  API.
- The request's context can also be accessed from anywhere in the code with the strapi.requestContext
  function.
- Uses core routers and custom routers for route management.
- Controllers represent the C in the model-view-controller (MVC) pattern.
- Services can be generated or added manually.
- Strapi provides a createCoreService factory function.
- Validate incoming requests by checking headers and payload signatures.
- Implement retries for failed webhook requests to handle transient errors.
- Log webhook events for debugging and monitoring.
- Use secure, HTTPS endpoints for receiving webhooks.
- Set up rate limiting to avoid being overwhelmed by multiple webhook requests.
- Most basic admin panel customizations will be done in the /src/admin/app file.
- The server runs in watch-admin mode by default, so the admin panel auto-reloads
  whenever you change its code.
- Draft & Publish feature is enabled for the content-type
- Strapi offers a single entry point file for its middlewares configurations.
- The default log level of the middleware logger in Strapi 5 is 'http'.
- The admin panel supports dotenv variables.
- All variables defined in a .env file and prefixed by STRAPI_ADMIN_ are available
  while customizing the admin panel through process.env.
- Injection zones are defined in the register() lifecycle but components are injected
  in the bootstrap() lifecycle.
- To use webpack as a bundler you will need to pass it as an option to the strapi
  develop command.
- only accessible with an Enterprise plan
- The admin panel is accessible at the `/admin` path.
- The back-end server and the admin panel server of Strapi both run on the same host
  and port.
- To make the admin panel accessible at another path, define or update the url property
  in the admin panel configuration file.
- 'Hot reloading while developing: In Strapi 5, the server runs in watch-admin mode
  by default, so the admin panel auto-reloads whenever you change its code.'
- You can install a third-party plugin, such as one for CKEditor, by visiting Strapi's
  Marketplace.
- You can create your own plugin to create and register a fully custom WYSIWYG field.
- The Documentation plugin is not actively maintained and may not work with Strapi
  5.
- Make sure that the cached favicon is cleared. It can be cached in your web browser
  and also with your domain management tool like Cloudflare's CDN.
- The GraphQL Sandbox is enabled by default in all environments except production.
- CORS headers for the Apollo Server landing page must be added manually if enabled
  in production.
- Set the landingPage configuration option to true to enable the GraphQL Sandbox in
  production environments.
- Disabling the GraphQL Sandbox and the introspection query is strongly recommended
  in production.
- By default, depthLimit is set to 10.
- The en locale cannot be removed from the build as it is both the fallback and the
  default locale.
- Logos uploaded via the admin panel supersede any logo set through the configuration
  files.
errors:
- '401 Unauthorized: Ensure proper permissions are set.'
- '401 Unauthorized: Recheck API key or permissions'
- '401 (unauthorized): Authentication failures return a 401 (unauthorized) error.'
- 'FileForbiddenError: Permission Errors'
- 'HTTPError: If the server is unreachable, authentication fails, or there are network
  issues'
- 'Missing Parameters: When uploading a Buffer, both filename and mimetype must be
  provided in the options object'
- 'StrapiInitializationError: Invalid URL during client initialization.'
- 'StrapiValidationError: Token is invalid or missing.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '400 Bad Request: Check request parameters.'
- '404 Not Found: Verify endpoint path.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'ApplicationError: An application error occured'
- 'PaginationError: Invalid pagination'
- 'NotFoundError: Entity not found'
- 'ForbiddenError: Forbidden access'
- 'UnauthorizedError: Unauthorized'
- 'NotImplementedError: This feature isn''t implemented'
- 'PayloadTooLargeError: Entity too large'
- 'PolicyError: Policy Failed'
- '401 Unauthorized: Recheck credentials or token expiration'
- 'TypeError: Cannot read property ''autogenerate'' of undefined'
- If a major version upgrade is detected, the upgrade tool displays a confirmation
  prompt to make sure the change is intended.
- 'Cannot delete primary card: must define another card as primary first.'
- 'StrapiInitializationError: An invalid URL will throw this error.'
- 'StrapiValidationError: The client will throw this error if the token is invalid
  or missing.'
- Project suspension for exceeding the Free plan limits
- 'FileForbiddenError: If the authenticated user does not have permission to upload
  or manage files.'
- 'HTTPError: If the server is unreachable, authentication fails, or there are network
  issues.'
- 'StrapiValidationError: If the token is invalid or missing.'
- 'Missing Parameters: When uploading a Buffer, both filename and mimetype must be
  provided in the options object.'
- '404 Not Found: The requested document does not exist.'
- '401 Unauthorized: Ensure proper authentication is provided.'
- 'Missing Parameters: When uploading a `Buffer`, both `filename` and `mimetype` must
  be provided in the options object.'
- 'Suspended: if the project has been suspended.'
- 'Incompatible version: if the project is using a Strapi version that is not compatible
  with Strapi Cloud.'
- If an error occurs during the project creation, the progress indicator will stop
  and display an error message.
- '401 Unauthorized: Check your API token or permissions.'
- '404 Not Found: The requested resource could not be found.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- 'BAD_USER_INPUT: GraphQL error code indicating bad user input'
- '401 (unauthorized): Authentication failures'
- MySQL v5 is not supported
- Only better-sqlite3 is supported
- Only mysql2 is supported
- Jest has detected the following 1 open handles potentially keeping Jest from exiting
- '401 Unauthorized: Check your API token or client credentials.'
- 'Suspended: Project has been suspended due to various reasons.'
- 'FileForbiddenError: Permission error when trying to manage files.'
- 'HTTPError: Thrown when there are network issues or authentication fails.'
- 'StrapiValidationError: Thrown if the token is invalid or missing.'
- Overages are not allowed on the Free plan.
- Error during the project creation, retry the process.
- 'FileForbiddenError: Thrown if the authenticated user does not have permission to
  upload or manage files.'
- 'HTTPError: Thrown if the server is unreachable, authentication fails, or there
  are network issues.'
- 'Missing Parameters: An error is thrown if required parameters are missing when
  uploading a Buffer.'
- 'Project may be suspended for various reasons, including: not paying the invoice,
  exceeding the limits of your free plan, or violating the terms.'
- 'Unauthorized: Ensure proper authentication.'
- 'Not Found: Check the endpoint or document ID.'
- Validate incoming requests by checking headers and payload signatures.
- Implement retries for failed webhook requests to handle transient errors.
- '500: User does not have SCHEMA permissions.'
- 'ApplicationError: Error message related to application errors'
- 'ValidationError: Error message related to validation errors'
- '401 Unauthorized: Authentication failures return a 401 error.'
- Webhook requests can be overwhelmed if not rate limited.
- '401 Unauthorized: Check authentication credentials'
- 'Unauthorized: Must provide JSON web token (JWT) for access.'
- 'Rate limit exceeded: Too many requests'
- 'Invalid query: Check the syntax of your GraphQL query'
- Excessive nesting in GraphQL queries may lead to DoS attacks.
- A large query can cause a DDoS and may cause abnormal load on your Strapi server.
- '401 Unauthorized: Check your JWT or API token'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
client:
  base_url: http://localhost:1337/api
  auth: {}
  headers: {}
  paginator: {}
source_metadata: null
