resources:
- name: projects
  endpoint:
    path: /api/projects
    method: GET
    data_selector: data
    params: {}
- name: tasks
  endpoint:
    path: /api/tasks
    method: GET
    data_selector: data
    params: {}
- name: Requirement
  endpoint:
    path: /work-instructions/wi-01-requirement
    method: GET
    data_selector: records
- name: Software Item Spec
  endpoint:
    path: /work-instructions/wi-02-software-item-spec
    method: GET
    data_selector: records
- name: Task
  endpoint:
    path: /work-instructions/wi-03-task
    method: GET
    data_selector: records
- name: Test Case
  endpoint:
    path: /work-instructions/wi-04-test-case
    method: GET
    data_selector: records
- name: Test Execution
  endpoint:
    path: /work-instructions/wi-05-test-execution
    method: GET
    data_selector: records
- name: Anomaly
  endpoint:
    path: /work-instructions/wi-06-anomaly
    method: GET
    data_selector: records
- name: Complaint
  endpoint:
    path: /work-instructions/wi-07-complaint
    method: GET
    data_selector: records
- name: Change Request
  endpoint:
    path: /work-instructions/wi-08-change-request
    method: GET
    data_selector: records
- name: CAPA
  endpoint:
    path: /work-instructions/wi-09-capa
    method: GET
    data_selector: records
- name: Risk
  endpoint:
    path: /work-instructions/wi-10-risk
    method: GET
    data_selector: records
- name: Document
  endpoint:
    path: /work-instructions/wi-11-document
    method: GET
    data_selector: records
- name: Threat
  endpoint:
    path: /api/threat
    method: GET
    data_selector: threats
- name: Asset
  endpoint:
    path: /api/asset
    method: GET
    data_selector: assets
- name: Threat Source
  endpoint:
    path: /api/threat-source
    method: GET
    data_selector: threatSources
- name: Threat Surface
  endpoint:
    path: /api/threat-surface
    method: GET
    data_selector: threatSurfaces
- name: Trust Boundary
  endpoint:
    path: /api/trust-boundary
    method: GET
    data_selector: trustBoundaries
- name: manual_vulnerability
  endpoint:
    path: /manuals/man-03-supply-chain-management-software-dependencies/vulnerability-management
    method: GET
    data_selector: vulnerabilities
    params: {}
- name: Dependency
  endpoint:
    path: /path/to/dependency/endpoint
    method: POST
    data_selector: dependencies
    params: {}
- name: cloud_configuration
  endpoint:
    path: /api/cloud/configuration
    method: GET
    data_selector: configuration_items
- name: milestones
  endpoint:
    path: /milestones
    method: GET
    data_selector: milestone_data
    params: {}
- name: test_case
  endpoint:
    path: /api/test-case
    method: GET
    data_selector: records
- name: test_execution
  endpoint:
    path: /api/test-execution
    method: GET
    data_selector: records
- name: builds
  endpoint:
    path: /api/v1/builds
    method: POST
    params:
      project: KXPRJ49GQYFQ5RR9KRTPWTRTC39YZ9W
- name: build_artifacts
  endpoint:
    path: /api/v1/build-artifacts
    method: POST
    params: {}
- name: test_case
  endpoint:
    path: /api/testcase
    method: GET
    data_selector: records
    params: {}
- name: test_execution
  endpoint:
    path: /api/testexecution
    method: GET
    data_selector: records
    params: {}
- name: builds
  endpoint:
    path: /api/v1/builds
    method: GET
    params:
      project: ''
      version: ''
      commitSha: ''
- name: build-artifacts
  endpoint:
    path: /api/v1/build-artifacts
    method: POST
    params: {}
- name: traceability_matrix
  endpoint:
    path: /api/v1/traceability
    method: GET
    data_selector: data
    params: {}
- name: Risk Configuration
  endpoint:
    path: /api/risk/configuration
    method: GET
    data_selector: riskItems
    params: {}
- name: risk_management
  endpoint:
    path: /manuals/man-08-risk-management
    method: GET
    data_selector: risks
    params: {}
- name: risk_controls
  endpoint:
    path: /manuals/man-08-risk-management#risk-controls
    method: GET
    data_selector: risk_controls
    params: {}
- name: glob_patterns
  endpoint:
    path: /api/glob_patterns
    method: GET
    data_selector: patterns
    params: {}
- name: configuration_item
  endpoint:
    path: /manuals/man-09-git-based-configuration-items
    method: GET
    data_selector: items
    params: {}
- name: configuration_items
  endpoint:
    path: /api/configuration-items
    method: GET
    data_selector: items
- name: glob_patterns
  endpoint:
    path: /glob/patterns
    method: GET
    data_selector: patterns
- name: parser_metadata
  endpoint:
    path: /parser/metadata
    method: GET
    data_selector: parsers
- name: Inputs
  endpoint:
    data_selector: Inputs content
- name: Outputs
  endpoint:
    data_selector: Outputs content
- name: glob_patterns
  endpoint:
    path: /api/glob_patterns
    method: GET
    data_selector: patterns
    params: {}
- name: project_settings
  endpoint:
    path: /api/project_settings
    method: GET
    data_selector: settings
    params: {}
- name: Inputs
  endpoint:
    data_selector: Inputs content
- name: Outputs
  endpoint:
    data_selector: Outputs content
- name: project_level_approval_rules
  endpoint:
    path: /api/project_level_approval_rules
    method: GET
    data_selector: rules
    params: {}
- name: item_level_approval_rules
  endpoint:
    path: /api/item_level_approval_rules
    method: GET
    data_selector: rules
    params: {}
- name: milestone_level_approval_rules
  endpoint:
    path: /api/milestone_level_approval_rules
    method: GET
    data_selector: rules
    params: {}
- name: Requirement
  endpoint:
    path: /api/requirement
    method: POST
    data_selector: data
- name: Software Item Specification
  endpoint:
    path: /work-instructions/wi-02-software-item-spec
    method: GET
    data_selector: records
    params: {}
- name: Test Case
  endpoint:
    path: /api/testcase
    method: POST
    data_selector: testCaseData
- name: Test Execution
  endpoint:
    path: /work-instructions/wi-05-test-execution
    method: GET
    data_selector: records
    params: {}
- name: anomaly
  endpoint:
    path: /api/anomaly
    method: POST
    data_selector: anomalies
- name: change_request
  endpoint:
    path: /api/change_request
    method: POST
    data_selector: data
    params: {}
- name: CAPA
  endpoint:
    path: /work-instructions/wi-09-capa
    method: GET
- name: Risk
  endpoint:
    path: /api/risk
    method: POST
    data_selector: riskData
- name: documents
  endpoint:
    path: /api/documents
    method: GET
    data_selector: records
    params: {}
- name: Long-Lived Document
  endpoint:
    path: /api/documents/long-lived
    method: POST
    data_selector: document
    params: {}
- name: Pointwise Document
  endpoint:
    path: /api/documents/pointwise
    method: POST
    data_selector: document
    params: {}
- name: work_items
  endpoint:
    path: /_apis/wit/workitems
    method: GET
    data_selector: value
    params: {}
- name: test_cases
  endpoint:
    path: /_apis/test/plans
    method: GET
    data_selector: value
    params: {}
- name: syncFilter
  endpoint:
    path: /sync/filter
    method: POST
    data_selector: syncFilter
    params: {}
- name: syncOptions
  endpoint:
    path: /sync/options
    method: POST
    data_selector: syncOptions
    params: {}
- name: syncScope
  endpoint:
    path: /sync/scope
    method: POST
    data_selector: syncScope
    params: {}
- name: editTestResultWindow
  endpoint:
    path: /sync/edit-window
    method: POST
    data_selector: editTestResultWindow
    params: {}
- name: jama_item_mapping
  endpoint:
    path: /jama/item/mapping
    method: GET
    data_selector: items
    params: {}
- name: jama_item_status_mapping
  endpoint:
    path: /jama/item/status/mapping
    method: GET
    data_selector: statuses
    params: {}
- name: jama_item_relationships_mapping
  endpoint:
    path: /jama/item/relationships/mapping
    method: GET
    data_selector: relationships
    params: {}
- name: jama_field_type_mapping
  endpoint:
    path: /jama/field/type/mapping
    method: GET
    data_selector: fieldMappings
    params: {}
- name: TestRail Instance URL
  endpoint:
    path: /api/testrail
    method: GET
    data_selector: records
    params: {}
- name: code_change_reviews
  endpoint:
    path: /api/code_change_reviews
    method: GET
    data_selector: reviews
- name: items
  endpoint:
    path: /items
    method: GET
    data_selector: records
    params: {}
- name: Requirement
  endpoint:
    path: /api/requirements
    method: GET
- name: work_item_relations
  endpoint:
    path: /workitems
    method: GET
    data_selector: relations
- name: test_items
  endpoint:
    path: /testitems
    method: GET
    data_selector: items
- name: Folder
  endpoint:
    path: /custom/item/types
    method: POST
    data_selector: item_types
    params: {}
- name: project_updates
  endpoint:
    path: /api/project/updates
    method: GET
    data_selector: data
    params: {}
- name: items
  endpoint:
    path: /api/items
    method: GET
    data_selector: data
    params:
      incremental: updated_at
- name: builds
  endpoint:
    path: /api/v1/builds
    method: POST
    data_selector: response
    params: {}
- name: build_artifacts
  endpoint:
    path: /api/v1/build-artifacts
    method: POST
    data_selector: response
    params: {}
- name: build_artifacts
  endpoint:
    path: /api/v1/build-artifacts
    method: POST
    data_selector: ok
    params:
      project: KXPRJ11T0R3MGR39WCVN0PEKP77HVP0
- name: builds
  endpoint:
    path: /api/v1/builds
    method: POST
    data_selector: ok
    params:
      project: KXPRJ11T0R3MGR39WCVN0PEKP77HVP0
      version: '1.0'
- name: groups
  endpoint:
    path: /api/v1/groups
    method: GET
    data_selector: groups
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: projects
    params: {}
- name: create_project
  endpoint:
    path: /projects
    method: POST
    data_selector: id
    params: {}
- name: project_settings
  endpoint:
    path: /projects/{projectId}
    method: GET
    data_selector: id
    params: {}
- name: change_project_settings
  endpoint:
    path: /projects/{projectId}
    method: POST
    data_selector: id
    params: {}
- name: delete_project
  endpoint:
    path: /projects/{projectId}
    method: DELETE
    data_selector: ''
    params: {}
- name: versions
  endpoint:
    path: /projects/{projectId}/versions
    method: GET
    data_selector: versions
    params: {}
- name: create_version
  endpoint:
    path: /projects/{projectId}/versions
    method: POST
    data_selector: id
    params: {}
- name: change_version_settings
  endpoint:
    path: /projects/{projectId}/versions/{versionId}
    method: POST
    data_selector: id
    params: {}
- name: delete_version
  endpoint:
    path: /projects/{projectId}/versions/{versionId}
    method: DELETE
    data_selector: ''
    params: {}
- name: generate_sbom
  endpoint:
    path: /projects/{projectId}/generated-documents/sbom
    method: GET
    data_selector: ''
    params: {}
- name: items
  endpoint:
    path: /projects/{projectId}/items
    method: GET
    data_selector: items
    params:
      maxResults: '1000'
      startAt: '0'
- name: item_records
  endpoint:
    path: /projects/{projectId}/items/{itemId}/records
    method: GET
    data_selector: records
    params:
      maxResults: '1000'
      startAt: '0'
- name: project_records
  endpoint:
    path: /projects/{projectId}/records
    method: GET
    data_selector: records
    params:
      maxResults: '1000'
      startAt: '0'
- name: webhook_events
  endpoint:
    path: /api/webhooks
    method: POST
    data_selector: notifications
    params: {}
- name: Requirement
  endpoint:
    path: /work-instructions/wi-01-requirement
    method: GET
- name: Software Item Spec
  endpoint:
    path: /work-instructions/wi-02-software-item-spec
    method: GET
- name: Task
  endpoint:
    path: /work-instructions/wi-03-task
    method: GET
- name: Test Case
  endpoint:
    path: /work-instructions/wi-04-test-case
    method: GET
- name: Test Execution
  endpoint:
    path: /work-instructions/wi-05-test-execution
    method: GET
- name: Anomaly
  endpoint:
    path: /work-instructions/wi-06-anomaly
    method: GET
- name: Complaint
  endpoint:
    path: /work-instructions/wi-07-complaint
    method: GET
- name: Change Request
  endpoint:
    path: /work-instructions/wi-08-change-request
    method: GET
- name: CAPA
  endpoint:
    path: /work-instructions/wi-09-capa
    method: GET
- name: Risk
  endpoint:
    path: /work-instructions/wi-10-risk
    method: GET
- name: Document
  endpoint:
    path: /work-instructions/wi-11-document
    method: GET
- name: change_management
  endpoint:
    path: /change_management
    method: GET
    data_selector: records
    params: {}
- name: software_development_process
  endpoint:
    path: /software_development_process
    method: GET
    data_selector: records
    params: {}
- name: default_configuration
  endpoint:
    path: /default_configuration
    method: GET
    data_selector: records
    params: {}
- name: approval_rules
  endpoint:
    path: /approval_rules
    method: GET
    data_selector: records
    params: {}
- name: item_management
  endpoint:
    path: /item_management
    method: GET
    data_selector: records
    params: {}
- name: versions_releases
  endpoint:
    path: /versions_releases
    method: GET
    data_selector: records
    params: {}
- name: Ketryx Query Language
  endpoint:
    path: /api/ketryx-query
    method: GET
    data_selector: items
    params: {}
- name: types
  endpoint:
    path: /types
    method: GET
    data_selector: records
    params: {}
- name: states
  endpoint:
    path: /states
    method: GET
    data_selector: records
    params: {}
- name: flags
  endpoint:
    path: /flags
    method: GET
    data_selector: records
    params: {}
- name: projects
  endpoint:
    path: /projects
    method: GET
    data_selector: records
    params: {}
- name: updated_after
  endpoint:
    path: /updated_after
    method: GET
    data_selector: records
    params: {}
- name: assignee
  endpoint:
    path: /assignee
    method: GET
    data_selector: records
    params: {}
notes:
- 'Ketryx supports two MFA methods: WebAuthn and OTP'
- Ketryx allows teams to use portions of the Ketryx Framework relevant to their quality
  system and day-to-day activities.
- Configuration Items are how members build validated systems.
- 'Ketryx supports three different monitoring options: Automatic, Active, and Inactive.'
- Software maintenance should be performed in a controlled manner using a risk-based
  approach.
- Manually created dependencies do not have their version automatically parsed from
  a source of truth.
- Ketryx does not attempt to scan for vulnerabilities for manually created dependencies.
- Vulnerability management is integral to computer security and network security.
- Proper vulnerability management ensures that potential vulnerabilities are identified
  and addressed, reducing the risk of security breaches.
- CVSS vectors of version 3.0, 3.1, and 4.0 are supported.
- Ketryx will always preserve the original CVSS score provided by the advisory, and
  your rescored assessment will be displayed alongside it for comparison and tracking.
- Ketryx supports CycloneDX files in JSON format. Version 1.4, 1.5, and 1.6 of the
  CycloneDX specification are supported.
- Any manual changes made to the values of custom fields that are mapped through this
  setting will be overwritten the next time an SBOM is processed.
- Ketryx supports SPDX files in JSON format. Version 2.2 and 2.3 of the SPDX specification
  are supported.
- Ketryx requires an AWS account with AWS Config enabled.
- Cloud configuration settings may change, but released cloud configuration items
  will keep track of their environment name.
- Milestones provide natural breakpoints to verify compliance with relevant regulations,
  standards, and guidelines.
- Milestones must be configured to track progress effectively.
- Milestone statuses include Open, Ready, Approved, Outdated, Reapprovable, and Blocked
  By Missing Approval.
- API keys are required for programmatic interactions
- Permissions for API keys include reporting test results and retrieving release status
- The Ketryx project ID must be passed via the project parameter.
- Either the version or the commitSha parameter must be set.
- API keys remain active until they are revoked.
- Requires OAuth2 setup with refresh token.
- Traceability matrix must be fulfilled for final approval.
- Ketryx allows any risk management methodology to be used.
- Risk controls can lead to new risks, which are tracked as well.
- Non-strict mode is the default to allow for more flexibility.
- Strict modes enforce selection of pre-defined harm and associated severity.
- Users can maintain configuration items in Git repositories.
- Glob patterns define the locations of configuration items within a Git repository.
- Uses glob patterns to define file locations within a Git repository.
- Ketryx only processes attachments when the Markdown file itself changes. If you
  update an attachment without changing the Markdown file that references it, Ketryx
  will not detect or reprocess the updated attachment.
- Git-based configuration items allow users to maintain configuration items in Git
  repositories.
- Users with Manage item-level approval rules permission can configure approval rules
  for individual items.
- Milestone-level approval rules do not apply to the milestone's items.
- All configuration controls are enabled by default but can be disabled at the project
  level.
- Ketryx provides the capability to generate an archive containing all relevant project
  data in JSON format.
- Ensure the project is connected to Ketryx.
- The *Task* should be SMART (Specific, Measurable, Achievable, Relevant, and Testable).
- The *Task* should also be traceable to all other needed items, with clearly defined
  interfaces; not conflict with another *Task*; and conform to any provided design
  input.
- Ensure the desired project is selected and connected to Ketryx.
- Records for each Anomaly will be held based on the records and retention policy.
- Ketryx can move an Anomaly to a controlled and effective state by transitioning
  its status to Closed.
- Ensure your project is connected to Ketryx.
- CAPA process involves systematic approach to identify, investigate, and address
  issues.
- Users should create a Risk to represent certain risks after product-level risk analysis.
- Supports various file types including CSV, DOCX, PDF, and more.
- Users can assign training for specific documents.
- Enable documents as items option must be selected in organization's advanced settings.
- 'Bulk Upload of Documents and Custom Fields: It is possible to upload multiple documents
  simultaneously. However, custom fields cannot be included during the bulk upload
  process. These fields must be added manually after the upload is complete.'
- 'Commenting on Documents: Similar to other configuration items in Ketryx, documents
  support comments.'
- 'Folder Structure Impact: The folder structure used for organizing documents has
  no effect on their functionality or behavior within the system.'
- 'Cross-Referencing Between Projects: Currently, cross-referencing documents across
  different projects is not supported. This functionality is expected to be introduced
  in a future update.'
- Variant management currently only works for vulnerability impact assessments.
- Each Jira instance can only be connected to one Ketryx organization.
- Initial connection should be made from a service account with Azure DevOps administrator
  privileges.
- The integration allows mapping Azure DevOps fields to Ketryx items.
- Initial connection should be made from a service account with TestRail administrator
  privileges.
- Configure sync filters at the organization level before initiating synchronization.
- Connection should be made from a service account with a named Creator license and
  administrative privileges.
- As of November 2025, API access requires a named Creator license.
- The initial connection should be made from a service account with Polarion administrator
  privileges.
- When any item is deleted in Polarion it is marked as deleted in Ketryx but remains
  linked for traceability.
- Private repositories require authentication.
- Default analyzed branch is 'main' or 'master'.
- Ketryx does not support Code Change Reviews with Azure DevOps at this time.
- Ketryx supports SOUP dependency analysis using an App Password for private repositories.
- Only by using the Repository Access Token can you access Code Change Reviews.
- Public repositories do not require a Personal Access Token for basic integration
  tasks.
- Private repositories require a Personal Access Token for secure communication.
- Ketryx does not support Code Change Reviews with GitLab at this time.
- Authentication needs to happen via a Personal Access Token for GitHub.
- Access tokens can be generated at the user level and provide authorization for specific
  scopes.
- Custom authentication methods can be configured based on company domain.
- Requires OAuth2 for authentication
- Configuring these advanced settings incorrectly can have undesired consequences
  for your configuration items, Jira configuration, and member authentication.
- Enforce that Requirements have a required (extra) field 'Acceptance Criteria' before
  they can be approved
- Approve in Ketryx and transition and lock the Jama item
- Transition in Jama and control the Ketryx item without further approvals
- Adjust approval groups for Requirements of type 'Intended use'
- Only require electronic signatures on Risk items
- Enable Assistant Sidebar
- Enable AI
- Enable enhanced AI-based item creation and editing
- Use custom prompt group with a set of templates
- Use a custom OpenAI instance on Azure
- Use a custom OpenAI endpoint
- Enable version deletion
- Enable item invalidation
- Treat items with the status of 'Cancel' as removed/obsolete
- Status name to represent deleted items in a controlled state is 'Closed'
- Status name to represent deleted items in an uncontrolled state is 'Resolved'
- Allow setting the 'Document ID' field even after an item is fully approved
- Track the extra fields 'Acceptance Criteria' and 'Source'
- Do not require Anomalies with an Environment of 'internal' to be controlled
- Enforce Anomalies with a Resolution of 'Duplicate' to have a status of either 'Done'
  or 'Cancel'
- Enforce that all Test Cases that are risk controls are included in the test plan
- Enable automatic risk item updates on risk configuration change
- Configure different report build documents relevant for a release
- 'Transitions are allowed based on the project''s observe-only flag: In observe-only
  mode, transitions are not allowed; otherwise they are allowed.'
- 'Item creation is allowed based on the project''s observe-only flag: In observe-only
  mode, item creation is not allowed; otherwise it is allowed.'
- 'Item editing is allowed based on the project''s observe-only flag: In observe-only
  mode, item editing is not allowed; otherwise it is allowed.'
- 'Item restoring is allowed based on the project''s observe-only flag: In observe-only
  mode, item restoring is not allowed; otherwise it is allowed.'
- Notifications are sent unless the project is in observe-only mode.
- Template-based release documents are considered out of date when any active records
  in the relevant project and version change.
- Requires setup of connected app in Ketryx
- Adding custom item types should only be performed by your Ketryx organization owner
  and Jira instance admin.
- After adding a custom item type, it is not recommended to change its lifecycle afterwards.
- Data is automatically synchronized between Ketryx and other systems.
- Ketryx now includes a built-in CVSS calculator that mirrors the FIRST.org standard.
- Guests are prohibited from editing any data under any circumstances.
- Creating a Design History File for regulatory submission requires systematic documentation
  of every development decision.
- This structured approach not only streamlines the generation of essential technical
  documents like the SRS, SDS, Risk Management File, and Test Reports, but also helps
  ensure compliance with regulatory requirements from bodies such as the FDA.
- A maintained Design History File is not just a regulatory requirement, it's your
  demonstration of systematic design controls and commitment to patient safety.
- API keys can be configured at the organization level under Organization > API keys.
- 'Authorization: Bearer KXTK_...'
- Uploading an additional SPDX JSON file will overwrite the previous SPDX JSON file
  upload if it is uploaded to the same project, version, and uses the same buildName.
- Uploading an additional CycloneDX JSON file will overwrite the previous CycloneDX
  JSON file upload if it is uploaded to the same project, version, and buildName.
- Providing a unique buildName when uploading multiple CycloneDX JSON build artifacts
  to the same project and version is recommended.
- Ketryx supports multi-factor authentication (MFA) for electronic signatures.
- Ketryx allows teams to develop software across tools with full traceability.
- Configuration Items govern all aspects of the Total Product Life Cycle.
- Ketryx supports AWS as a native integration.
- Ketryx separates between 'full' KQL and Simplified KQL, which is a subset of KQL
  that focuses on filtering for item types, relations, and particular core item data.
errors:
- '401 Unauthorized: Check your credentials or token expiration'
- '403 Forbidden: Insufficient permissions for the requested resource'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '403 Forbidden: Check IAM permissions.'
- '404 Not Found: Resource does not exist.'
- '401 Unauthorized: Check API key or permissions'
- '403 Forbidden: Insufficient permissions for requested operation'
- '401 Unauthorized: Recheck API key validity'
- '401 Unauthorized: Check OAuth token validity.'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Check the request format and required fields.'
- '401 Unauthorized: Verify OAuth credentials.'
- '404 Not Found: Ensure the endpoint exists.'
- '403 Forbidden: Check your permissions or the PAT settings.'
- '404 Not Found: Ensure the endpoint is correct or the work item exists.'
- 'Access to the repository denied: Ensure correct permissions are set on the Repository
  Access Token.'
- '401 Unauthorized: Check if the token has the required permissions.'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'Unauthorized: Recheck API key permissions'
- '400: The request is not valid.'
- '401: The requester is not authenticated.'
- '403: The requester is unauthorized.'
- '404: The resource was not found.'
- '401 Unauthorized: Check the token or client credentials.'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - Personal Access Token
  - Project Access Token
  - Okta
  - OpenID Connect
  - API keys
client:
  base_url: https://api.ketryx.com
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://login.ketryx.com/oauth2/token
    client_id: '{{ dlt.secrets[''ketryx_client_id''] }}'
    client_secret: '{{ dlt.secrets[''ketryx_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''ketryx_refresh_token''] }}'
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
