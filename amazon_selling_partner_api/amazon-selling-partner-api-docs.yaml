resources:
- name: listFinancialEventGroups
  endpoint:
    path: /finances/v0/financialEventGroups
    method: GET
    data_selector: financialEventGroups
    params: {}
- name: listFinancialEventsByGroupId
  endpoint:
    path: /finances/v0/financialEventGroups/{eventGroupId}/financialEvents
    method: GET
    data_selector: financialEvents
    params: {}
- name: listFinancialEventsByOrderId
  endpoint:
    path: /finances/v0/orders/{orderId}/financialEvents
    method: GET
    data_selector: financialEvents
    params: {}
- name: financial_events
  endpoint:
    path: /financialEvents
    method: GET
    data_selector: financialEvents
    params: {}
- name: financial_event_group
  endpoint:
    path: /financialEventGroups
    method: GET
    data_selector: FinancialEventGroupList
    params: {}
- name: financial_events
  endpoint:
    path: /financialEvents
    method: GET
    data_selector: FinancialEvents
    params: {}
- name: RentalTransactionEventList
  endpoint:
    path: /rentaltransactioneventlist
    method: GET
    data_selector: array
- name: RetrochargeEventList
  endpoint:
    path: /retrochargeeventlist
    method: GET
    data_selector: array
- name: SAFETReimbursementEventList
  endpoint:
    path: /safetreimbursementeventlist
    method: GET
    data_selector: array
- name: SellerDealPaymentEventList
  endpoint:
    path: /sellerdealpaymenteventlist
    method: GET
    data_selector: array
- name: SellerReviewEnrollmentPaymentEventList
  endpoint:
    path: /sellerreviewenrollmentpaymenteventlist
    method: GET
    data_selector: array
- name: ServiceFeeEventList
  endpoint:
    path: /servicefeeeventlist
    method: GET
    data_selector: array
- name: ShipmentEventList
  endpoint:
    path: /shipmenteventlist
    method: GET
    data_selector: array
- name: TaxWithholdingEventList
  endpoint:
    path: /taxwithholdingeventlist
    method: GET
    data_selector: array
- name: contentDocuments
  endpoint:
    path: /aplus/2020-11-01/contentDocuments
    method: GET
- name: createContentDocument
  endpoint:
    path: /aplus/2020-11-01/contentDocuments
    method: POST
- name: getContentDocument
  endpoint:
    path: /aplus/2020-11-01/contentDocuments/{contentReferenceKey}
    method: GET
- name: updateContentDocument
  endpoint:
    path: /aplus/2020-11-01/contentDocuments/{contentReferenceKey}
    method: POST
- name: listContentDocumentAsinRelations
  endpoint:
    path: /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins
    method: GET
- name: postContentDocumentAsinRelations
  endpoint:
    path: /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins
    method: POST
- name: validateContentDocumentAsinRelations
  endpoint:
    path: /aplus/2020-11-01/contentAsinValidations
    method: POST
- name: searchContentPublishRecords
  endpoint:
    path: /aplus/2020-11-01/contentPublishRecords
    method: GET
- name: postContentDocumentApprovalSubmission
  endpoint:
    path: /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/approvalSubmissions
    method: POST
- name: postContentDocumentSuspendSubmission
  endpoint:
    path: /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/suspendSubmissions
    method: POST
- name: createDestination
  endpoint:
    path: /notifications/v1/destinations
    method: POST
- name: deleteDestination
  endpoint:
    path: /notifications/v1/destinations/{destinationId}
    method: DELETE
- name: deleteSubscriptionById
  endpoint:
    path: /notifications/v2/subscriptions/{notificationType}/{subscriptionId}
    method: DELETE
- name: getDestination
  endpoint:
    path: /notifications/v1/destinations/{destinationId}
    method: GET
- name: getDestinations
  endpoint:
    path: /notifications/v1/destinations
    method: GET
- name: getSubscriptionById
  endpoint:
    path: /notifications/v1/subscriptions/{notificationType}/{subscriptionId}
    method: GET
- name: getAuthorizationCode
  endpoint:
    path: /authorization/v1/authorizationCode
    method: GET
- name: createDestination
  endpoint:
    path: /notifications/v1/destinations
    method: POST
- name: deleteDestination
  endpoint:
    path: /notifications/v1/destinations/{destinationId}
    method: DELETE
- name: deleteSubscriptionById
  endpoint:
    path: /notifications/v2/subscriptions/{notificationType}/{subscriptionId}
    method: DELETE
- name: getDestination
  endpoint:
    path: /notifications/v1/destinations/{destinationId}
    method: GET
- name: getDestinations
  endpoint:
    path: /notifications/v1/destinations
    method: GET
- name: getSubscriptionById
  endpoint:
    path: /notifications/v1/subscriptions/{notificationType}/{subscriptionId}
    method: GET
- name: getAuthorizationCode
  endpoint:
    path: /authorization/v1/authorizationCode
    method: GET
- name: contentDocument
  endpoint:
    path: /contentDocument
    method: GET
    data_selector: contentModuleList
- name: standard_image_sidebar_module
  endpoint:
    path: /modules/standard_image_sidebar
    method: GET
    data_selector: images
- name: standard_single_side_image_module
  endpoint:
    path: /modules/standard_single_side_image
    method: GET
    data_selector: images
- name: standard_four_image_text_module
  endpoint:
    path: /modules/standard_four_image_text
    method: GET
    data_selector: images
- name: standard_comparison_table_module
  endpoint:
    path: /modules/standard_comparison_table
    method: GET
    data_selector: images
- name: standard_multiple_image_text_module
  endpoint:
    path: /modules/standard_multiple_image_text
    method: GET
    data_selector: images
- name: standard_single_image_specs_detail_module
  endpoint:
    path: /modules/standard_single_image_specs_detail
    method: GET
    data_selector: images
- name: standard_single_image_highlights_module
  endpoint:
    path: /modules/standard_single_image_highlights
    method: GET
    data_selector: images
- name: standard_three_image_text_module
  endpoint:
    path: /modules/standard_three_image_text
    method: GET
    data_selector: images
- name: standard_four_image_text_quadrant_module
  endpoint:
    path: /modules/standard_four_image_text_quadrant
    method: GET
    data_selector: images
- name: standard_image_text_overlay_module
  endpoint:
    path: /modules/standard_image_text_overlay
    method: GET
    data_selector: images
- name: standard_text_module
  endpoint:
    path: /modules/standard_text
    method: GET
    data_selector: images
- name: standard_product_description_module
  endpoint:
    path: /modules/standard_product_description
    method: GET
    data_selector: images
- name: standard_tech_specs_module
  endpoint:
    path: /modules/standard_tech_specs
    method: GET
    data_selector: images
- name: StandardCompanyLogoModule
  endpoint:
    path: /services/data/vXX.X/sobjects/StandardCompanyLogoModule
    method: GET
    data_selector: images
    params: {}
- name: StandardHeaderImageTextModule
  endpoint:
    path: /services/data/vXX.X/sobjects/StandardHeaderImageTextModule
    method: GET
    data_selector: images
    params: {}
- name: cancelFeed
  endpoint:
    path: /feeds/2020-09-04/feeds/{feedId}
    method: DELETE
- name: createFulfillmentOrder
  endpoint:
    path: /fba/outbound/2020-07-01/fulfillmentOrders
    method: POST
- name: getOrders
  endpoint:
    path: /orders/v0/orders
    method: GET
- name: cancelFeed
  endpoint:
    path: /feeds/2020-09-04/feeds/{feedId}
    method: DELETE
- name: createContentDocument
  endpoint:
    path: /aplus/2020-11-01/contentDocuments
    method: POST
- name: getReport
  endpoint:
    path: /reports/2020-09-04/reports/{reportId}
    method: GET
- name: confirmCustomizationDetails
  endpoint:
    path: /messaging/v1/orders/{amazonOrderId}/messages/confirmCustomizationDetails
    method: POST
- name: CreateAmazonMotors
  endpoint:
    path: /messaging/v1/orders/{amazonOrderId}/messages/amazonMotors
    method: POST
- name: createConfirmDeliveryDetails
  endpoint:
    path: /messaging/v1/orders/{amazonOrderId}/messages/confirmDeliveryDetails
    method: POST
- name: createConfirmOrderDetails
  endpoint:
    path: /messaging/v1/orders/{amazonOrderId}/messages/confirmOrderDetails
    method: POST
- name: createConfirmServiceDetails
  endpoint:
    path: /messaging/v1/orders/{amazonOrderId}/messages/confirmServiceDetails
    method: POST
- name: createDestination
  endpoint:
    path: /notifications/v1/destinations
    method: POST
- name: createDigitalAccessKey
  endpoint:
    path: /messaging/v1/orders/{amazonOrderId}/messages/digitalAccessKey
    method: POST
- name: createLegalDisclosure
  endpoint:
    path: /messaging/v1/orders/{amazonOrderId}/messages/legalDisclosure
    method: POST
- name: createNegativeFeedbackRemoval
  endpoint:
    path: /messaging/v1/orders/{amazonOrderId}/messages/negativeFeedbackRemoval
    method: POST
- name: createUnexpectedProblem
  endpoint:
    path: /messaging/v1/orders/{amazonOrderId}/messages/unexpectedProblem
    method: POST
- name: createUploadDestination
  endpoint:
    path: /uploads/v1/uploadDestinations
    method: POST
- name: CreateWarranty
  endpoint:
    path: /messaging/v1/orders/{amazonOrderId}/messages/warranty
    method: POST
- name: getAdditionalSellerInputs
  endpoint:
    path: /mfn/v0/additionalSellerInputs
    method: POST
- name: GetAttributes
  endpoint:
    path: /messaging/v1/orders/{amazonOrderId}/attributes
    method: GET
- name: getDestination
  endpoint:
    path: /notifications/v1/destinations/{destinationId}
    method: GET
- name: getDestinations
  endpoint:
    path: /notifications/v1/destinations
    method: GET
- name: getMarketplaceParticipations
  endpoint:
    path: /sellers/v1/marketplaceParticipations
    method: GET
- name: getMessagingActionsForOrder
  endpoint:
    path: /messaging/v1/orders/{amazonOrderId}
    method: GET
- name: getMyFeesEstimateForASIN
  endpoint:
    path: /products/fees/v0/items/{Asin}/feesEstimate
    method: POST
- name: getMyFeesEstimateForSKU
  endpoint:
    path: /products/fees/v0/listings/{SellerSKU}/feesEstimate
    method: POST
- name: getOrderAddress
  endpoint:
    path: /orders/v0/orders/{orderId}/address
    method: GET
- name: getOrderBuyerInfo
  endpoint:
    path: /orders/v0/orders/{orderId}/buyerInfo
    method: GET
- name: getOrder
  endpoint:
    path: /orders/v0/orders/{orderId}
    method: GET
- name: getOrderItemsBuyerInfo
  endpoint:
    path: /orders/v0/orders/{orderId}/orderItems/buyerInfo
    method: GET
- name: getOrderItems
  endpoint:
    path: /orders/v0/orders/{orderId}/orderItems
    method: GET
- name: getOrderMetrics
  endpoint:
    path: /sales/v1/orderMetrics
    method: GET
- name: getOrders
  endpoint:
    path: /orders/v0/orders
    method: GET
- name: sendInvoice
  endpoint:
    path: /messaging/v1/orders/{amazonOrderId}/messages/invoice
    method: POST
- name: createDestination
  endpoint:
    path: /notifications/v1/destinations
    method: POST
- name: createProductReviewAndSellerFeedbackSolicitation
  endpoint:
    path: /solicitations/v1/orders/{amazonOrderId}/solicitations/productReviewAndSellerFeedback
    method: POST
- name: getDestination
  endpoint:
    path: /notifications/v1/destinations/{destinationId}
    method: GET
- name: getDestinations
  endpoint:
    path: /notifications/v1/destinations
    method: GET
- name: getMyFeesEstimateForASIN
  endpoint:
    path: /products/fees/v0/items/{Asin}/feesEstimate
    method: POST
- name: getMyFeesEstimateForSKU
  endpoint:
    path: /products/fees/v0/listings/{SellerSKU}/feesEstimate
    method: POST
- name: getOrderAddress
  endpoint:
    path: /orders/v0/orders/{orderId}/address
    method: GET
- name: getOrderBuyerInfo
  endpoint:
    path: /orders/v0/orders/{orderId}/buyerInfo
    method: GET
- name: getOrder
  endpoint:
    path: /orders/v0/orders/{orderId}
    method: GET
- name: getOrderItemsBuyerInfo
  endpoint:
    path: /orders/v0/orders/{orderId}/orderItems/buyerInfo
    method: GET
- name: getOrderItems
  endpoint:
    path: /orders/v0/orders/{orderId}/orderItems
    method: GET
- name: getOrderMetrics
  endpoint:
    path: /sales/v1/orderMetrics
    method: GET
- name: getOrders
  endpoint:
    path: /orders/v0/orders
    method: GET
- name: getSolicitationActionsForOrder
  endpoint:
    path: /solicitations/v1/orders/{amazonOrderId}
    method: GET
- name: shipments
  endpoint:
    path: /fba/inbound/v0/shipments/{shipmentId}/preorder/confirm
    method: PUT
    data_selector: response
    params:
      marketplace: ATVPDKIKX0DER
- name: getAccount
  endpoint:
    path: /shipping/v1/account
    method: GET
- name: getOrders
  endpoint:
    path: /orders/v0/orders
    method: GET
- name: getShipment
  endpoint:
    path: /mfn/v0/shipments/{shipmentId}
    method: GET
- name: cancelReport
  endpoint:
    path: /reports/2020-09-04/reports/{reportId}
    method: DELETE
- name: createReport
  endpoint:
    path: /reports/2020-09-04/reports
    method: POST
- name: getOrders
  endpoint:
    path: /orders/v0/orders
    method: GET
- name: listFinancialEvents
  endpoint:
    path: /finances/v0/financialEvents
    method: GET
- name: cancelFeed
  endpoint:
    path: /feeds/2020-09-04/feeds/{feedId}
    method: DELETE
- name: getOrder
  endpoint:
    path: /orders/v0/orders/{orderId}
    method: GET
- name: cancelFeed
  endpoint:
    path: /feeds/2020-09-04/feeds/{feedId}
    method: DELETE
- name: createFeed
  endpoint:
    path: /feeds/2020-09-04/feeds
    method: POST
- name: getCompetitivePricing
  endpoint:
    path: /products/pricing/v0/competitivePrice
    method: GET
- name: getOrder
  endpoint:
    path: /orders/v0/orders/{orderId}
    method: GET
- name: getReport
  endpoint:
    path: /reports/2020-09-04/reports/{reportId}
    method: GET
- name: cancelFeed
  endpoint:
    path: /feeds/2020-09-04/feeds/{feedId}
    method: DELETE
- name: getAccount
  endpoint:
    path: /shipping/v1/account
    method: GET
- name: getCatalogItem
  endpoint:
    path: /catalog/2020-12-01/items/{asin}
    method: GET
- name: getOrder
  endpoint:
    path: /orders/v0/orders/{orderId}
    method: GET
- name: getPricing
  endpoint:
    path: /products/pricing/v0/price
    method: GET
- name: minUtf8ByteLength
  endpoint:
    path: /minUtf8ByteLength
    method: GET
    data_selector: records
- name: getOrderRegulatedInfo
  endpoint:
    path: /orders/v0/orders/{orderId}
    method: GET
- name: updateVerificationStatus
  endpoint:
    path: /orders/v0/orders/{orderId}/verification-status
    method: PUT
- name: getOrders
  endpoint:
    path: /orders/v0/orders
    method: GET
- name: createRestrictedDataToken
  endpoint:
    path: /tokens/2021-03-01/restrictedDataToken
    method: POST
    data_selector: restrictedResources
- name: getOrderRegulatedInfo
  endpoint:
    path: /orders/v0/orders/{orderId}/regulatedInfo
    method: GET
    data_selector: payload
- name: updateVerificationStatus
  endpoint:
    path: /orders/v0/orders/{orderId}/regulatedInfo
    method: PATCH
    data_selector: regulatedOrderVerificationStatus
- name: searchContentDocuments
  endpoint:
    path: /aplus/2020-11-01/contentDocuments
    method: GET
    data_selector: contentDocuments
    params:
      marketplaceId: required
      pageToken: optional
- name: createContentDocument
  endpoint:
    path: /aplus/2020-11-01/contentDocuments
    method: POST
    data_selector: contentDocument
    params:
      marketplaceId: required
      postContentDocumentRequest: required
- name: getContentDocument
  endpoint:
    path: /aplus/2020-11-01/contentDocuments/{contentReferenceKey}
    method: GET
    data_selector: contentDocument
    params:
      contentReferenceKey: required
      marketplaceId: required
      includedDataSet: required
- name: updateContentDocument
  endpoint:
    path: /aplus/2020-11-01/contentDocuments/{contentReferenceKey}
    method: POST
    data_selector: contentDocument
    params:
      contentReferenceKey: required
      marketplaceId: required
      postContentDocumentRequest: required
- name: listContentDocumentAsinRelations
  endpoint:
    path: /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins
    method: GET
    data_selector: asinRelations
    params:
      contentReferenceKey: required
      marketplaceId: required
      includedDataSet: optional
      asinSet: optional
      pageToken: optional
- name: contentDocuments
  endpoint:
    path: /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins
    method: POST
    data_selector: response
- name: contentAsinValidations
  endpoint:
    path: /aplus/2020-11-01/contentAsinValidations
    method: POST
    data_selector: response
- name: contentPublishRecords
  endpoint:
    path: /aplus/2020-11-01/contentPublishRecords
    method: GET
    data_selector: response
- name: contentDocumentApprovalSubmission
  endpoint:
    path: /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/approvalSubmissions
    method: POST
    data_selector: response
- name: contentDocumentSuspendSubmission
  endpoint:
    path: /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/suspendSubmissions
    method: POST
    data_selector: response
- name: asin_metadata
  endpoint:
    path: /asinMetadata
    method: GET
- name: publish_record_list
  endpoint:
    path: /publishRecordList
    method: GET
- name: content_record
  endpoint:
    path: /contentRecord
    method: GET
- name: contentDocuments
  endpoint:
    path: /aplus/2020-11-01/contentDocuments
    method: GET
- name: contentDocumentAsinRelations
  endpoint:
    path: /aplus/2020-11-01/contentDocumentAsinRelations
    method: GET
- name: contentPublishRecords
  endpoint:
    path: /aplus/2020-11-01/contentPublishRecords
    method: GET
- name: archiveSupplySource
  endpoint:
    path: /supplySources/2020-07-01/supplySources/{supplySourceId}
    method: DELETE
- name: cancelReport
  endpoint:
    path: /reports/2020-09-04/reports/{reportId}
    method: DELETE
- name: createReport
  endpoint:
    path: /reports/2020-09-04/reports
    method: POST
- name: getOrders
  endpoint:
    path: /orders/v0/orders
    method: GET
- name: cancelFeed
  endpoint:
    path: /feeds/2020-09-04/feeds/{feedId}
    method: DELETE
- name: createFeed
  endpoint:
    path: /feeds/2021-06-30/feeds
    method: POST
- name: getOrders
  endpoint:
    path: /orders/v0/orders
    method: GET
- name: cancelReport
  endpoint:
    path: /reports/2020-09-04/reports/{reportId}
    method: DELETE
- name: createReport
  endpoint:
    path: /reports/2020-09-04/reports
    method: POST
- name: getReports
  endpoint:
    path: /reports/2020-09-04/reports
    method: GET
- name: generateOrderScenarios
  endpoint:
    path: /vendor/directFulfillment/sandbox/2021-10-28/orders
    method: POST
    data_selector: transactionId
- name: getOrderScenarios
  endpoint:
    path: /vendor/directFulfillment/sandbox/2021-10-28/transactions/{transactionId}
    method: GET
    data_selector: orders
- name: getOrderScenarios
  endpoint:
    path: /vendor/directFulfillment/sandbox/2021-10-28/transactions/{transactionId}
    method: GET
    data_selector: transactionStatus
    params:
      transactionId: required
- name: GET_VENDOR_FORECASTING_REPORT
  endpoint:
    path: /reports/GET_VENDOR_FORECASTING_REPORT
    method: GET
- name: GET_VENDOR_INVENTORY_REPORT
  endpoint:
    path: /reports/GET_VENDOR_INVENTORY_REPORT
    method: GET
- name: GET_VENDOR_SALES_REPORT
  endpoint:
    path: /reports/GET_VENDOR_SALES_REPORT
    method: GET
- name: GET_VENDOR_TRAFFIC_REPORT
  endpoint:
    path: /reports/GET_VENDOR_TRAFFIC_REPORT
    method: GET
- name: inventory_report
  endpoint:
    path: /reports/inventory
    method: GET
    data_selector: inventoryAggregate
- name: sales_report
  endpoint:
    path: /reports/sales
    method: GET
    data_selector: reportDetails
- name: sellers_api
  endpoint:
    path: /fba/inbound/v0/shipments/{shipmentId}/preorder/confirm
    method: PUT
- name: sellers
  endpoint:
    path: /sellers/v1
    method: GET
    data_selector: payload
    params: {}
- name: shipments
  endpoint:
    path: /fba/inbound/v0/shipments/{shipmentId}/preorder/confirm
    method: PUT
    data_selector: response
    params:
      MarketplaceId: ATVPDKIKX0DER
      NeedByDate: '2020-10-10'
- name: sellers
  endpoint:
    path: /sellers
    method: GET
    data_selector: records
- name: create_destination
  endpoint:
    path: /notifications/v1/destinations
    method: POST
    data_selector: payload
    params: {}
- name: delete_destination
  endpoint:
    path: /notifications/v1/destinations/{destinationId}
    method: DELETE
    data_selector: payload
    params: {}
- name: get_destinations
  endpoint:
    path: /notifications/v1/destinations
    method: GET
    data_selector: payload
    params: {}
- name: Brand Analytics
  endpoint:
    path: /reports/createReport
    method: POST
    data_selector: reports
    params: {}
- name: Product Listing
  endpoint:
    path: /catalog/items/getCatalogItem
    method: GET
    data_selector: items
    params: {}
- name: Pricing
  endpoint:
    path: /pricing/getPricing
    method: GET
    data_selector: pricing
    params: {}
- name: Amazon Fulfillment
  endpoint:
    path: /fba/shipments/getLabels
    method: GET
    data_selector: labels
    params: {}
- name: Buyer Communication
  endpoint:
    path: /messaging/getMessagingActionsForOrder
    method: GET
    data_selector: actions
    params: {}
- name: Inventory and Order Tracking
  endpoint:
    path: /reports/createReport
    method: POST
    data_selector: reports
    params: {}
- name: getAuthorizationCode
  endpoint:
    path: /authorization/v1/authorizationCode
    method: GET
    data_selector: ''
- name: getAuthorizationCode
  endpoint:
    path: /authorization/v1/authorizationCode
    method: GET
    data_selector: payload
    params:
      sellingPartnerId: ''
      developerId: ''
      mwsAuthToken: ''
- name: listCatalogItems
  endpoint:
    path: /catalog/v0/items
    method: GET
    data_selector: items
    params:
      MarketplaceId: required
      Query: optional
      QueryContextId: optional
      SellerSKU: optional
      UPC: optional
      EAN: optional
      ISBN: optional
      JAN: optional
- name: getCatalogItem
  endpoint:
    path: /catalog/v0/items/{asin}
    method: GET
    data_selector: item
    params:
      MarketplaceId: required
      asin: required
- name: listCatalogCategories
  endpoint:
    path: /catalog/v0/categories
    method: GET
    data_selector: categories
    params:
      MarketplaceId: required
      ASIN: optional
      SellerSKU: optional
- name: SalesRankList
  endpoint:
    path: /listCatalogItems
    method: GET
- name: ListCatalogCategoriesResponse
  endpoint:
    path: /listCatalogCategories
    method: GET
- name: searchCatalogItems
  endpoint:
    path: /catalog/2020-12-01/catalogItems
    method: GET
    data_selector: data
    params: {}
- name: getCatalogItem
  endpoint:
    path: /catalog/2020-12-01/catalogItems/{itemId}
    method: GET
    data_selector: data
    params: {}
- name: searchCatalogItems
  endpoint:
    path: /catalog/2020-12-01/items
    method: GET
    data_selector: ItemSearchResults
    params:
      keywords: ''
      marketplaceIds: ''
      includedData: ''
      brandNames: ''
      classificationIds: ''
      pageSize: 10
      pageToken: ''
      keywordsLocale: ''
      locale: ''
- name: getCatalogItem
  endpoint:
    path: /catalog/2020-12-01/items/{asin}
    method: GET
    data_selector: Item
    params:
      asin: ''
      marketplaceIds: ''
      includedData: ''
      locale: ''
- name: ItemImagesByMarketplace
  endpoint:
    path: /itemImagesByMarketplace
    method: GET
    data_selector: images
    params:
      marketplaceId: required
- name: ItemProductTypes
  endpoint:
    path: /itemProductTypes
    method: GET
    data_selector: productTypes
    params: {}
- name: ItemSalesRanks
  endpoint:
    path: /itemSalesRanks
    method: GET
    data_selector: ranks
    params:
      marketplaceId: required
- name: ItemSummaries
  endpoint:
    path: /itemSummaries
    method: GET
    data_selector: summaries
    params:
      marketplaceId: required
- name: ItemVariations
  endpoint:
    path: /itemVariations
    method: GET
    data_selector: variations
    params:
      marketplaceId: required
- name: searchCatalogItems
  endpoint:
    path: /catalog/2022-04-01/items
    method: GET
    data_selector: ItemSearchResults
    params:
      pageSize: 10
- name: getCatalogItem
  endpoint:
    path: /catalog/2022-04-01/items/{asin}
    method: GET
    data_selector: Item
    params: {}
- name: item_dimensions_by_marketplace
  endpoint:
    path: /item/dimensions
    method: GET
    data_selector: dimensions
    params:
      marketplaceId: required
- name: item_identifiers_by_marketplace
  endpoint:
    path: /item/identifiers
    method: GET
    data_selector: identifiers
    params:
      marketplaceId: required
- name: item_images_by_marketplace
  endpoint:
    path: /item/images
    method: GET
    data_selector: images
    params:
      marketplaceId: required
- name: item_sales_ranks_by_marketplace
  endpoint:
    path: /item/salesRanks
    method: GET
    data_selector: classificationRanks
    params:
      marketplaceId: required
- name: item_summaries_by_marketplace
  endpoint:
    path: /item/summaries
    method: GET
    data_selector: summaryDetails
    params:
      marketplaceId: required
- name: listHandoverSlots
  endpoint:
    path: /easyShip/2022-03-23/timeSlot
    method: POST
- name: getScheduledPackage
  endpoint:
    path: /easyShip/2022-03-23/package
    method: GET
- name: createScheduledPackage
  endpoint:
    path: /easyShip/2022-03-23/package
    method: POST
- name: updateScheduledPackages
  endpoint:
    path: /easyShip/2022-03-23/package
    method: PATCH
- name: listHandoverSlots
  endpoint:
    path: /listHandoverSlots
    method: POST
    data_selector: timeSlots
    params:
      marketplaceId: string
      amazonOrderId: AmazonOrderId
      packageDimensions: Dimensions
      packageWeight: Weight
- name: createScheduledPackage
  endpoint:
    path: /createScheduledPackage
    method: POST
    data_selector: scheduledPackageId
    params:
      amazonOrderId: AmazonOrderId
      marketplaceId: string
      packageDetails: PackageDetails
- name: updateScheduledPackages
  endpoint:
    path: /updateScheduledPackages
    method: POST
    data_selector: updatePackageDetailsList
    params:
      marketplaceId: string
      updatePackageDetailsList: UpdatePackageDetailsList
- name: getItemEligibilityPreview
  endpoint:
    path: /fba/inbound/v1/eligibility/itemPreview
    method: GET
    data_selector: payload
    params:
      asin: required
      program: required
      marketplaceIds: optional
- name: IneligibilityReasonList
  endpoint:
    path: /ineligibilityreasonlist
    method: GET
    data_selector: ineligibilityReasons
- name: Program
  endpoint:
    path: /program
    method: GET
    data_selector: programs
- name: getInventorySummaries
  endpoint:
    path: /fba/inventory/v1/summaries
    method: GET
    data_selector: payload.inventorySummaries
    params:
      granularityType: required
      granularityId: required
      marketplaceIds: required
- name: InventorySummaries
  endpoint:
    path: /getInventorySummaries
    method: GET
- name: getSmallAndLightEnrollmentBySellerSKU
  endpoint:
    path: /getSmallAndLightEnrollmentBySellerSKU
    method: GET
- name: putSmallAndLightEnrollmentBySellerSKU
  endpoint:
    path: /putSmallAndLightEnrollmentBySellerSKU
    method: PUT
- name: deleteSmallAndLightEnrollmentBySellerSKU
  endpoint:
    path: /deleteSmallAndLightEnrollmentBySellerSKU
    method: DELETE
- name: getSmallAndLightEligibilityBySellerSKU
  endpoint:
    path: /getSmallAndLightEligibilityBySellerSKU
    method: GET
- name: getSmallAndLightFeePreview
  endpoint:
    path: /getSmallAndLightFeePreview
    method: GET
- name: getSmallAndLightEnrollmentBySellerSKU
  endpoint:
    path: /fba/smallAndLight/v1/enrollments/{sellerSKU}
    method: GET
    data_selector: SmallAndLightEnrollment
    params:
      marketplaceIds: required
- name: putSmallAndLightEnrollmentBySellerSKU
  endpoint:
    path: /fba/smallAndLight/v1/enrollments/{sellerSKU}
    method: PUT
    data_selector: SmallAndLightEnrollment
    params:
      marketplaceIds: required
- name: deleteSmallAndLightEnrollmentBySellerSKU
  endpoint:
    path: /fba/smallAndLight/v1/enrollments/{sellerSKU}
    method: DELETE
    data_selector: No Content
    params:
      marketplaceIds: required
- name: getSmallAndLightEligibilityBySellerSKU
  endpoint:
    path: /fba/smallAndLight/v1/eligibilities/{sellerSKU}
    method: GET
    data_selector: SmallAndLightEligibility
    params:
      marketplaceIds: required
- name: getSmallAndLightFeePreview
  endpoint:
    path: /fba/smallAndLight/v1/feePreviews
    method: POST
    data_selector: SmallAndLightFeePreviews
    params: {}
- name: small_and_light_enrollment
  endpoint:
    path: /getSmallAndLightEnrollmentBySellerSKU
    method: GET
    data_selector: records
    params:
      marketplaceId: required
      sellerSKU: required
- name: small_and_light_eligibility
  endpoint:
    path: /getSmallAndLightEligibilityBySellerSKU
    method: GET
    data_selector: records
    params:
      marketplaceId: required
      sellerSKU: required
- name: small_and_light_fee_preview
  endpoint:
    path: /getSmallAndLightFeePreview
    method: POST
    data_selector: data
    params:
      marketplaceId: required
      items: required
- name: listings_feed
  endpoint:
    path: /feeds/listings
    method: POST
    data_selector: feedType
    params:
      feedType: JSON_LISTINGS_FEED
- name: product_feed
  endpoint:
    path: /feeds/product
    method: POST
    data_selector: feedType
    params:
      feedType: POST_PRODUCT_DATA
- name: inventory_feed
  endpoint:
    path: /feeds/inventory
    method: POST
    data_selector: feedType
    params:
      feedType: POST_INVENTORY_AVAILABILITY_DATA
- name: overrides_feed
  endpoint:
    path: /feeds/overrides
    method: POST
    data_selector: feedType
    params:
      feedType: POST_PRODUCT_OVERRIDES_DATA
- name: pricing_feed
  endpoint:
    path: /feeds/pricing
    method: POST
    data_selector: feedType
    params:
      feedType: POST_PRODUCT_PRICING_DATA
- name: product_images_feed
  endpoint:
    path: /feeds/product_images
    method: POST
    data_selector: feedType
    params:
      feedType: POST_PRODUCT_IMAGE_DATA
- name: relationships_feed
  endpoint:
    path: /feeds/relationships
    method: POST
    data_selector: feedType
    params:
      feedType: POST_PRODUCT_RELATIONSHIP_DATA
- name: flat_file_inventory_loader_feed
  endpoint:
    path: /feeds/flat_file_inventory_loader
    method: POST
    data_selector: feedType
    params:
      feedType: POST_FLAT_FILE_INVLOADER_DATA
- name: flat_file_listings_feed
  endpoint:
    path: /feeds/flat_file_listings
    method: POST
    data_selector: feedType
    params:
      feedType: POST_FLAT_FILE_LISTINGS_DATA
- name: flat_file_book_loader_feed
  endpoint:
    path: /feeds/flat_file_book_loader
    method: POST
    data_selector: feedType
    params:
      feedType: POST_FLAT_FILE_BOOKLOADER_DATA
- name: flat_file_music_loader_feed
  endpoint:
    path: /feeds/flat_file_music_loader
    method: POST
    data_selector: feedType
    params:
      feedType: POST_FLAT_FILE_CONVERGENCE_LISTINGS_DATA
- name: flat_file_video_loader_feed
  endpoint:
    path: /feeds/flat_file_video_loader
    method: POST
    data_selector: feedType
    params:
      feedType: POST_FLAT_FILE_LISTINGS_DATA
- name: flat_file_price_and_quantity_update_feed
  endpoint:
    path: /feeds/flat_file_price_and_quantity_update
    method: POST
    data_selector: feedType
    params:
      feedType: POST_FLAT_FILE_PRICEANDQUANTITYONLY_UPDATE_DATA
- name: uiie_inventory_feed
  endpoint:
    path: /feeds/uiie_inventory
    method: POST
    data_selector: feedType
    params:
      feedType: POST_UIEE_BOOKLOADER_DATA
- name: aces_3_0_data_feed
  endpoint:
    path: /feeds/aces_data
    method: POST
    data_selector: feedType
    params:
      feedType: POST_STD_ACES_DATA
- name: FBA Fulfillment Order Feed
  endpoint:
    path: POST_FULFILLMENT_ORDER_REQUEST_DATA
    method: POST
- name: FBA Fulfillment Order Cancellation Feed
  endpoint:
    path: POST_FULFILLMENT_ORDER_CANCELLATION_REQUEST_DATA
    method: POST
- name: FBA Inbound Shipment Carton Information Feed
  endpoint:
    path: POST_FBA_INBOUND_CARTON_CONTENTS
    method: POST
- name: Flat File FBA Fulfillment Order Feed
  endpoint:
    path: POST_FLAT_FILE_FULFILLMENT_ORDER_REQUEST_DATA
    method: POST
- name: Flat File FBA Fulfillment Order Cancellation Feed
  endpoint:
    path: POST_FLAT_FILE_FULFILLMENT_ORDER_CANCELLATION_REQUEST_DATA
    method: POST
- name: Flat File FBA Create Inbound Shipment Plan Feed
  endpoint:
    path: POST_FLAT_FILE_FBA_CREATE_INBOUND_PLAN
    method: POST
- name: Flat File FBA Update Inbound Shipment Plan Feed
  endpoint:
    path: POST_FLAT_FILE_FBA_UPDATE_INBOUND_PLAN
    method: POST
- name: Flat File FBA Create Removal Feed
  endpoint:
    path: POST_FLAT_FILE_FBA_CREATE_REMOVAL
    method: POST
- name: getFeeds
  endpoint:
    path: /feeds/2020-09-04/feeds
    method: GET
    data_selector: feeds
    params:
      pageSize: 10
- name: createFeed
  endpoint:
    path: /feeds/2020-09-04/feeds
    method: POST
    data_selector: feed
    params: {}
- name: getFeed
  endpoint:
    path: /feeds/2020-09-04/feeds/{feedId}
    method: GET
    data_selector: payload
- name: cancelFeed
  endpoint:
    path: /feeds/2020-09-04/feeds/{feedId}
    method: DELETE
    data_selector: payload
- name: createFeedDocument
  endpoint:
    path: /feeds/2020-09-04/documents
    method: POST
    data_selector: payload
- name: getFeedDocument
  endpoint:
    path: /feeds/2020-09-04/documents/{feedDocumentId}
    method: GET
    data_selector: payload
- name: getFeeds
  endpoint:
    path: /feeds/2021-06-30/feeds
    method: GET
    data_selector: feeds
    params:
      pageSize: 10
- name: createFeed
  endpoint:
    path: /feeds/2021-06-30/feeds
    method: POST
    data_selector: feed
    params: {}
- name: getFeed
  endpoint:
    path: /feeds/2021-06-30/feeds/{feedId}
    method: GET
    data_selector: feed
    params: {}
- name: cancelFeed
  endpoint:
    path: /feeds/2021-06-30/feeds/{feedId}
    method: DELETE
    data_selector: feed
    params: {}
- name: createFeedDocument
  endpoint:
    path: /feeds/2021-06-30/documents
    method: POST
- name: getFeedDocument
  endpoint:
    path: /feeds/2021-06-30/documents/{feedDocumentId}
    method: GET
- name: getInboundGuidance
  endpoint:
    path: /fba/inbound/v0/itemsGuidance
    method: GET
    data_selector: ''
    params: {}
- name: createInboundShipmentPlan
  endpoint:
    path: /fba/inbound/v0/plans
    method: POST
    data_selector: ''
    params: {}
- name: updateInboundShipment
  endpoint:
    path: /fba/inbound/v0/shipments/{shipmentId}
    method: PUT
    data_selector: InboundShipmentResponse
    params: {}
- name: createInboundShipment
  endpoint:
    path: /fba/inbound/v0/shipments/{shipmentId}
    method: POST
    data_selector: InboundShipmentResponse
    params: {}
- name: getPreorderInfo
  endpoint:
    path: /fba/inbound/v0/shipments/{shipmentId}/preorder
    method: GET
    data_selector: GetPreorderInfoResponse
    params: {}
- name: confirmPreorder
  endpoint:
    path: /fba/inbound/v0/shipments/{shipmentId}/preorder/confirm
    method: PUT
    data_selector: ConfirmPreorderResponse
    params: {}
- name: getPrepInstructions
  endpoint:
    path: /fba/inbound/v0/prepInstructions
    method: GET
    data_selector: GetPrepInstructionsResponse
    params: {}
- name: getTransportDetails
  endpoint:
    path: /shipments/{shipmentId}/transport
    method: GET
    data_selector: response
    params: {}
- name: putTransportDetails
  endpoint:
    path: /shipments/{shipmentId}/transport
    method: PUT
    data_selector: response
    params: {}
- name: voidTransport
  endpoint:
    path: /shipments/{shipmentId}/transport/void
    method: POST
    data_selector: response
    params: {}
- name: estimateTransport
  endpoint:
    path: /shipments/{shipmentId}/transport/estimate
    method: POST
    data_selector: response
    params: {}
- name: confirmTransport
  endpoint:
    path: /shipments/{shipmentId}/transport/confirm
    method: POST
    data_selector: response
    params: {}
- name: getLabels
  endpoint:
    path: /fba/inbound/v0/shipments/{shipmentId}/labels
    method: GET
    data_selector: labels
- name: getBillOfLading
  endpoint:
    path: /fba/inbound/v0/shipments/{shipmentId}/billOfLading
    method: GET
    data_selector: billOfLading
- name: getShipments
  endpoint:
    path: /fba/inbound/v0/shipments
    method: GET
    data_selector: shipments
- name: getShipmentItemsByShipmentId
  endpoint:
    path: /fba/inbound/v0/shipments/{shipmentId}/items
    method: GET
    data_selector: items
- name: shipment_items
  endpoint:
    path: /shipmentItems
    method: GET
    data_selector: items
    params:
      MarketplaceId: required
      QueryType: required
      LastUpdatedAfter: optional
      LastUpdatedBefore: optional
      NextToken: optional
- name: GetInboundGuidance
  endpoint:
    path: /getInboundGuidance
    method: GET
    data_selector: payload
    params: {}
- name: GetLabels
  endpoint:
    path: /getLabels
    method: GET
    data_selector: payload
    params: {}
- name: GetPreorderInfo
  endpoint:
    path: /getPreorderInfo
    method: GET
    data_selector: payload
    params: {}
- name: GetPrepInstructions
  endpoint:
    path: /getPrepInstructions
    method: GET
    data_selector: payload
    params: {}
- name: GetTransportDetails
  endpoint:
    path: /getTransportDetails
    method: GET
    data_selector: payload
    params: {}
- name: GetShipmentItems
  endpoint:
    path: /getShipmentItems
    method: GET
    data_selector: payload
    params: {}
- name: GetShipments
  endpoint:
    path: /getShipments
    method: GET
    data_selector: payload
    params: {}
- name: NonPartneredLtlDataOutput
  endpoint:
    path: /nonpartneredltldataoutput
    method: GET
    data_selector: records
- name: NonPartneredSmallParcelDataInput
  endpoint:
    path: /nonpartneredsmallparceldatainput
    method: POST
    data_selector: records
- name: NonPartneredSmallParcelDataOutput
  endpoint:
    path: /nonpartneredsmallparceldatainput
    method: GET
    data_selector: records
- name: PartneredEstimate
  endpoint:
    path: /partneredestimate
    method: POST
    data_selector: records
- name: TransportHeader
  endpoint:
    path: /transport/header
    method: GET
    data_selector: TransportHeader
    params: {}
- name: TransportDetailInput
  endpoint:
    path: /transport/detail/input
    method: POST
    data_selector: TransportDetailInput
    params: {}
- name: TransportDetailOutput
  endpoint:
    path: /transport/detail/output
    method: GET
    data_selector: TransportDetailOutput
    params: {}
- name: TransportResult
  endpoint:
    path: /transport/result
    method: GET
    data_selector: TransportResult
    params: {}
- name: getShipments
  endpoint:
    path: /getShipments
    method: GET
- name: getShipmentItems
  endpoint:
    path: /getShipmentItems
    method: GET
- name: getFulfillmentPreview
  endpoint:
    path: /fba/outbound/2020-07-01/fulfillmentOrders/preview
    method: POST
- name: listAllFulfillmentOrders
  endpoint:
    path: /fba/outbound/2020-07-01/fulfillmentOrders
    method: GET
- name: createFulfillmentOrder
  endpoint:
    path: /fba/outbound/2020-07-01/fulfillmentOrders
    method: POST
- name: getPackageTrackingDetails
  endpoint:
    path: /fba/outbound/2020-07-01/tracking
    method: GET
    data_selector: trackingInformation
    params:
      packageNumber: required
- name: listReturnReasonCodes
  endpoint:
    path: /fba/outbound/2020-07-01/returnReasonCodes
    method: GET
    data_selector: returnReasonCodes
    params:
      sellerSku: required
      marketplaceId: optional
      sellerFulfillmentOrderId: optional
      language: required
- name: createFulfillmentReturn
  endpoint:
    path: /fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}/return
    method: PUT
    data_selector: returnCreationResult
    params:
      body: required
      sellerFulfillmentOrderId: required
- name: getFulfillmentOrder
  endpoint:
    path: /fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}
    method: GET
    data_selector: fulfillmentOrder
    params:
      sellerFulfillmentOrderId: required
- name: updateFulfillmentOrder
  endpoint:
    path: /fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}
    method: PUT
    data_selector: fulfillmentOrderUpdateResult
    params:
      body: required
      sellerFulfillmentOrderId: required
- name: cancelFulfillmentOrder
  endpoint:
    path: /fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}/cancel
    method: PUT
    data_selector: CancelFulfillmentOrderResponse
- name: getFeatures
  endpoint:
    path: /fba/outbound/2020-07-01/features
    method: GET
    data_selector: GetFeaturesResponse
- name: getFeatureInventory
  endpoint:
    path: /fba/outbound/2020-07-01/features/inventory/{featureName}
    method: GET
    data_selector: GetFeatureInventoryResponse
- name: getFeatureSKU
  endpoint:
    path: /fba/outbound/2020-07-01/features/inventory/{featureName}/{sellerSku}
    method: GET
    data_selector: GetFeatureSkuResponse
- name: CreateFulfillmentOrder
  endpoint:
    path: /createFulfillmentOrder
    method: POST
    data_selector: payload
    params: {}
- name: CreateFulfillmentReturn
  endpoint:
    path: /createFulfillmentReturn
    method: POST
    data_selector: payload
    params: {}
- name: fulfillment_shipment
  endpoint:
    path: /fulfillment_shipments
    method: GET
    data_selector: fulfillmentShipments
- name: fulfillment_order
  endpoint:
    path: /fulfillment_orders
    method: GET
    data_selector: fulfillmentOrders
- name: ShippingWeightCalculationMethod
- name: Listings Feed Message
  endpoint:
    path: /en/references/listings-feed-message-schema-v2.html
    method: GET
    data_selector: properties
    params: {}
- name: Listings Feed Processing Report
  endpoint:
    path: /en/references/listings-feed-processing-report-schema-v2
    method: GET
    data_selector: summary
- name: Listings Feed Message
  endpoint:
    path: /en/references/listings-feed-message-schema-v2
    method: GET
    data_selector: issues
- name: processing_report
  endpoint:
    path: /en/references/listings-feed-processing-report-schema-v2.html
    method: GET
    data_selector: header
    params: {}
- name: Listings Feed Schema V2 example
  endpoint:
    path: /en/references/listings-feed-schema-v2-example.html
    method: GET
    data_selector: messages
    params: {}
- name: listings_feed
  endpoint:
    path: /en/references/listings-feed-schema-v2.html
    method: GET
    data_selector: messages
    params: {}
- name: header
  endpoint:
    path: /services/data/vXX.X/sobjects/Header
    method: GET
    data_selector: header
- name: messages
  endpoint:
    path: /services/data/vXX.X/sobjects/Messages
    method: GET
    data_selector: messages
- name: putListingsItem
  endpoint:
    path: /listings/2020-09-01/items/{sellerId}/{sku}
    method: PUT
    data_selector: body
    params:
      marketplaceIds: ''
      issueLocale: ''
- name: deleteListingsItem
  endpoint:
    path: /listings/2020-09-01/items/{sellerId}/{sku}
    method: DELETE
    data_selector: body
    params:
      marketplaceIds: ''
      issueLocale: ''
- name: patchListingsItem
  endpoint:
    path: /listings/2020-09-01/items/{sellerId}/{sku}
    method: PATCH
    data_selector: body
    params:
      marketplaceIds: ''
      issueLocale: ''
- name: ListingsItemPatchRequest
  endpoint:
    path: /patchListingsItem
    method: PATCH
    data_selector: patches
- name: ListingsItemPutRequest
  endpoint:
    path: /putListingsItem
    method: PUT
    data_selector: attributes
- name: ListingsItemSubmissionResponse
  endpoint:
    path: /submissionResponse
    method: GET
    data_selector: issues
- name: getListingsItem
  endpoint:
    path: /listings/2021-08-01/items/{sellerId}/{sku}
    method: GET
    data_selector: Item
    params:
      marketplaceIds: ''
      issueLocale: ''
      includedData: ''
- name: putListingsItem
  endpoint:
    path: /listings/2021-08-01/items/{sellerId}/{sku}
    method: PUT
    data_selector: ListingsItemSubmissionResponse
    params:
      marketplaceIds: ''
      issueLocale: ''
      body: ''
- name: deleteListingsItem
  endpoint:
    path: /listings/2021-08-01/items/{sellerId}/{sku}
    method: DELETE
    data_selector: ListingsItemSubmissionResponse
    params:
      marketplaceIds: ''
      issueLocale: ''
- name: patchListingsItem
  endpoint:
    path: /listings/2021-08-01/items/{sellerId}/{sku}
    method: PATCH
    data_selector: ListingsItemSubmissionResponse
    params:
      marketplaceIds: ''
      issueLocale: ''
      body: ''
- name: item
  endpoint:
    path: /listings/items
    method: GET
    data_selector: items
- name: eligibleShipmentServicesOld
  endpoint:
    path: /mfn/v0/eligibleServices
    method: POST
- name: eligibleShipmentServices
  endpoint:
    path: /mfn/v0/eligibleShippingServices
    method: POST
- name: shipment
  endpoint:
    path: /mfn/v0/shipments/{shipmentId}
    method: GET
- name: cancelShipment
  endpoint:
    path: /mfn/v0/shipments/{shipmentId}
    method: DELETE
    data_selector: CancelShipmentResponse
- name: createShipment
  endpoint:
    path: /mfn/v0/shipments
    method: POST
    data_selector: CreateShipmentResponse
- name: getAdditionalSellerInputs
  endpoint:
    path: /mfn/v0/additionalSellerInputs
    method: POST
    data_selector: GetAdditionalSellerInputsResponse
- name: AvailableCarrierWillPickUpOptions
  endpoint:
    path: /availableCarrierWillPickUpOptions
    method: GET
    data_selector: options
- name: AvailableDeliveryExperienceOptions
  endpoint:
    path: /availableDeliveryExperienceOptions
    method: GET
    data_selector: options
- name: PackageDimensions
  endpoint:
    path: /packagedimensions
    method: GET
    data_selector: dimensions
    params: {}
- name: PhoneNumber
  endpoint:
    path: /phonenumber
    method: GET
    data_selector: phoneNumber
    params: {}
- name: PostalCode
  endpoint:
    path: /postalcode
    method: GET
    data_selector: postalCode
    params: {}
- name: Shipment
  endpoint:
    path: /shipment
    method: GET
    data_selector: shipment
    params: {}
- name: ShipmentRequestDetails
  endpoint:
    path: /shipmentrequestdetails
    method: GET
    data_selector: requestDetails
    params: {}
- name: ShippingService
  endpoint:
    path: /shippingservice
    method: GET
    data_selector: shippingService
    params: {}
- name: TermsAndConditionsNotAcceptedCarrierList
  endpoint:
    path: /terms-and-conditions-not-accepted-carrier-list
    method: GET
    data_selector: TermsAndConditionsNotAcceptedCarrier
- name: Timestamp
  endpoint:
    path: /timestamp
    method: GET
    data_selector: timestamp
- name: TrackingId
  endpoint:
    path: /tracking-id
    method: GET
    data_selector: trackingId
- name: TransparencyCode
  endpoint:
    path: /transparency-code
    method: GET
    data_selector: transparencyCode
- name: TransparencyCodeList
  endpoint:
    path: /transparency-code-list
    method: GET
    data_selector: TransparencyCode
- name: UnitOfLength
  endpoint:
    path: /unit-of-length
    method: GET
    data_selector: unitOfLength
- name: UnitOfWeight
  endpoint:
    path: /unit-of-weight
    method: GET
    data_selector: unitOfWeight
- name: Weight
  endpoint:
    path: /weight
    method: GET
    data_selector: Weight
- name: getMessagingActionsForOrder
  endpoint:
    path: /messaging/v1/orders/{amazonOrderId}
    method: GET
- name: confirmCustomizationDetails
  endpoint:
    path: /messaging/v1/orders/{amazonOrderId}/messages/confirmCustomizationDetails
    method: POST
- name: createConfirmDeliveryDetails
  endpoint:
    path: /messaging/v1/orders/{amazonOrderId}/messages/confirmDeliveryDetails
    method: POST
    data_selector: CreateConfirmDeliveryDetailsResponse
    params: {}
- name: createLegalDisclosure
  endpoint:
    path: /messaging/v1/orders/{amazonOrderId}/messages/legalDisclosure
    method: POST
    data_selector: CreateLegalDisclosureResponse
    params: {}
- name: createNegativeFeedbackRemoval
  endpoint:
    path: /messaging/v1/orders/{amazonOrderId}/messages/negativeFeedbackRemoval
    method: POST
    data_selector: CreateNegativeFeedbackRemovalResponse
    params: {}
- name: createConfirmOrderDetails
  endpoint:
    path: /messaging/v1/orders/{amazonOrderId}/messages/confirmOrderDetails
    method: POST
    data_selector: CreateConfirmOrderDetailsResponse
    params: {}
- name: createConfirmServiceDetails
  endpoint:
    path: /messaging/v1/orders/{amazonOrderId}/messages/confirmServiceDetails
    method: POST
    data_selector: response
    params: {}
- name: createAmazonMotors
  endpoint:
    path: /messaging/v1/orders/{amazonOrderId}/messages/amazonMotors
    method: POST
    data_selector: response
    params: {}
- name: createWarranty
  endpoint:
    path: /messaging/v1/orders/{amazonOrderId}/messages/warranty
    method: POST
    data_selector: response
    params: {}
- name: getAttributes
  endpoint:
    path: /messaging/v1/orders/{amazonOrderId}/attributes
    method: GET
    data_selector: response
    params: {}
- name: createDigitalAccessKey
  endpoint:
    path: /orders/{amazonOrderId}/messages/digitalAccessKey
    method: POST
- name: createUnexpectedProblem
  endpoint:
    path: /orders/{amazonOrderId}/messages/unexpectedProblem
    method: POST
- name: sendInvoice
  endpoint:
    path: /orders/{amazonOrderId}/messages/invoice
    method: POST
- name: createLegalDisclosure
  endpoint:
    path: /createLegalDisclosure
    method: POST
    data_selector: errors
    params: {}
- name: createConfirmOrderDetails
  endpoint:
    path: /createConfirmOrderDetails
    method: POST
    data_selector: errors
    params: {}
- name: createConfirmServiceDetails
  endpoint:
    path: /createConfirmServiceDetails
    method: POST
    data_selector: errors
    params: {}
- name: createAmazonMotors
  endpoint:
    path: /createAmazonMotors
    method: POST
    data_selector: errors
    params: {}
- name: createWarranty
  endpoint:
    path: /createWarranty
    method: POST
    data_selector: errors
    params: {}
- name: getAttributes
  endpoint:
    path: /getAttributes
    method: GET
    data_selector: buyer
    params: {}
- name: createDigitalAccessKey
  endpoint:
    path: /createDigitalAccessKey
    method: POST
    data_selector: errors
    params: {}
- name: createUnexpectedProblem
  endpoint:
    path: /createUnexpectedProblem
    method: POST
    data_selector: errors
    params: {}
- name: getSubscription
  endpoint:
    path: /getSubscription
    method: GET
- name: createSubscription
  endpoint:
    path: /createSubscription
    method: POST
- name: getSubscriptionById
  endpoint:
    path: /getSubscriptionById
    method: GET
- name: deleteSubscriptionById
  endpoint:
    path: /deleteSubscriptionById
    method: DELETE
- name: getDestinations
  endpoint:
    path: /getDestinations
    method: GET
- name: createDestination
  endpoint:
    path: /createDestination
    method: POST
- name: getDestination
  endpoint:
    path: /getDestination
    method: GET
- name: deleteDestination
  endpoint:
    path: /deleteDestination
    method: DELETE
- name: getSubscription
  endpoint:
    path: /notifications/v1/subscriptions/{notificationType}
    method: GET
- name: createSubscription
  endpoint:
    path: /notifications/v1/subscriptions/{notificationType}
    method: POST
- name: getSubscriptionById
  endpoint:
    path: /subscriptions/{notificationType}/{subscriptionId}
    method: GET
    data_selector: GetSubscriptionByIdResponse
- name: deleteSubscriptionById
  endpoint:
    path: /subscriptions/{notificationType}/{subscriptionId}
    method: DELETE
    data_selector: DeleteSubscriptionByIdResponse
- name: getDestinations
  endpoint:
    path: /destinations
    method: GET
    data_selector: GetDestinationsResponse
- name: createDestination
  endpoint:
    path: /destinations
    method: POST
    data_selector: CreateDestinationResponse
- name: getDestination
  endpoint:
    path: /notifications/v1/destinations/{destinationId}
    method: GET
    data_selector: payload
    params:
      destinationId: required
- name: deleteDestination
  endpoint:
    path: /notifications/v1/destinations/{destinationId}
    method: DELETE
    data_selector: payload
    params:
      destinationId: required
- name: getDestination
  endpoint:
    path: /getDestination
    method: GET
- name: getDestinations
  endpoint:
    path: /getDestinations
    method: GET
- name: deleteDestination
  endpoint:
    path: /deleteDestination
    method: DELETE
- name: getOrders
  endpoint:
    path: /orders/v0/orders
    method: GET
    data_selector: orders
    params:
      CreatedAfter: string
      CreatedBefore: string
      LastUpdatedAfter: string
      LastUpdatedBefore: string
      OrderStatuses: array
      MarketplaceIds: array
      FulfillmentChannels: array
      PaymentMethods: array
      BuyerEmail: string
      SellerOrderId: string
      MaxResultsPerPage: integer
      EasyShipShipmentStatuses: array
      NextToken: string
      AmazonOrderIds: array
      ActualFulfillmentSupplySourceId: string
      IsISPU: boolean
      StoreChainStoreId: string
- name: getOrder
  endpoint:
    path: /orders/v0/orders/{orderId}
    method: GET
    data_selector: GetOrderResponse
    params: {}
- name: getOrderBuyerInfo
  endpoint:
    path: /orders/v0/orders/{orderId}/buyerInfo
    method: GET
    data_selector: GetOrderBuyerInfoResponse
    params: {}
- name: getOrderAddress
  endpoint:
    path: /orders/v0/orders/{orderId}/address
    method: GET
    data_selector: GetOrderAddressResponse
    params: {}
- name: getOrderItems
  endpoint:
    path: /orders/v0/orders/{orderId}/orderItems
    method: GET
    data_selector: GetOrderItemsResponse
    params:
      NextToken: ''
- name: getOrderItemsBuyerInfo
  endpoint:
    path: /orders/v0/orders/{orderId}/orderItems/buyerInfo
    method: GET
    data_selector: GetOrderItemsBuyerInfoResponse
    params:
      NextToken: ''
- name: updateShipmentStatus
  endpoint:
    path: /orders/v0/orders/{orderId}/shipment
    method: POST
    data_selector: No Content
    params: {}
- name: getOrderRegulatedInfo
  endpoint:
    path: /orders/v0/orders/{orderId}/regulatedInfo
    method: GET
    data_selector: payload
    params: {}
- name: updateVerificationStatus
  endpoint:
    path: /orders/v0/orders/{orderId}/regulatedInfo
    method: PATCH
    data_selector: No Content
    params: {}
- name: order
  endpoint:
    path: /orders
    method: GET
    data_selector: Orders
    params: {}
- name: order_buyer_info
  endpoint:
    path: /order_buyer_info
    method: GET
    data_selector: BuyerInfo
    params: {}
- name: order_regulated_info
  endpoint:
    path: /order_regulated_info
    method: GET
    data_selector: RegulatedInfo
    params: {}
- name: order_address
  endpoint:
    path: /order_address
    method: GET
    data_selector: Address
    params: {}
- name: order_items
  endpoint:
    path: /order_items
    method: GET
    data_selector: OrderItems
    params: {}
- name: order_item
  endpoint:
    path: /orderitems
    method: GET
    data_selector: OrderItems
    params: {}
- name: order_items_buyer_info_list
  endpoint:
    path: /orderitems/buyer-info
    method: GET
    data_selector: OrderItemBuyerInfoList
    params: {}
- name: getMyFeesEstimateForSKU
  endpoint:
    path: /products/fees/v0/listings/{SellerSKU}/feesEstimate
    method: POST
- name: getMyFeesEstimateForASIN
  endpoint:
    path: /products/fees/v0/items/{Asin}/feesEstimate
    method: POST
- name: getMyFeesEstimates
  endpoint:
    path: /products/fees/v0/feesEstimate
    method: POST
    data_selector: payload
    params: {}
- name: pricing
  endpoint:
    path: /products/pricing/v0/price
    method: GET
    data_selector: response
    params:
      MarketplaceId: required
      Asins: optional
      Skus: optional
      ItemType: required
      ItemCondition: optional
      OfferType: optional
- name: competitive_pricing
  endpoint:
    path: /products/pricing/v0/competitivePrice
    method: GET
    data_selector: response
    params:
      MarketplaceId: required
      Asins: optional
      Skus: optional
      ItemType: required
      CustomerType: optional
- name: getListingOffers
  endpoint:
    path: /products/pricing/v0/listings/{SellerSKU}/offers
    method: GET
    data_selector: offers
    params:
      MarketplaceId: required
      ItemCondition: required
      SellerSKU: required
      CustomerType: optional
- name: getItemOffers
  endpoint:
    path: /products/pricing/v0/items/{Asin}/offers
    method: GET
    data_selector: offers
    params:
      MarketplaceId: required
      ItemCondition: required
      Asin: required
      CustomerType: optional
- name: getItemOffersBatch
  endpoint:
    path: /batches/products/pricing/v0/itemOffers
    method: POST
    data_selector: responses
    params:
      getItemOffersBatchRequestBody: required
- name: getListingOffersBatch
  endpoint:
    path: /batches/products/pricing/v0/listingOffers
    method: POST
    data_selector: responses
    params:
      getListingOffersBatchRequestBody: required
- name: listing_offers
  endpoint:
    path: /getListingOffersBatch
    method: GET
    data_selector: responses
    params: {}
- name: item_offers
  endpoint:
    path: /getItemOffersBatch
    method: GET
    data_selector: responses
    params: {}
- name: BuyBoxPrices
  endpoint:
    path: /buyboxprices
    method: GET
    data_selector: BuyBoxPrices
- name: LowestPrices
  endpoint:
    path: /lowestprices
    method: GET
    data_selector: LowestPrices
- name: NumberOfOffers
  endpoint:
    path: /numberofoffers
    method: GET
    data_selector: NumberOfOffers
- name: OfferDetailList
  endpoint:
    path: /offerdetaillist
    method: GET
    data_selector: OfferDetailList
- name: getPricing
  endpoint:
    path: /getPricing
    method: GET
- name: getCompetitivePricing
  endpoint:
    path: /getCompetitivePricing
    method: GET
- name: getListingOffers
  endpoint:
    path: /getListingOffers
    method: GET
- name: getItemOffers
  endpoint:
    path: /getItemOffers
    method: GET
- name: getItemOffersBatch
  endpoint:
    path: /getItemOffersBatch
    method: GET
- name: getListingOffersBatch
  endpoint:
    path: /getListingOffersBatch
    method: GET
- name: meta-schema
  endpoint:
    path: /schemas.amazon.com/selling-partners/definitions/product-types/meta-schema/v1
    method: GET
- name: vocabulary
  endpoint:
    path: /schemas.amazon.com/selling-partners/definitions/product-types/vocabulary/v1
    method: GET
- name: searchDefinitionsProductTypes
  endpoint:
    path: /definitions/2020-09-01/productTypes
    method: GET
    data_selector: productTypes
    params:
      marketplaceIds: ''
- name: getDefinitionsProductType
  endpoint:
    path: /definitions/2020-09-01/productTypes/{productType}
    method: GET
    data_selector: productTypeDefinition
    params:
      marketplaceIds: ''
      productType: ''
- name: ProductTypeVersion
  endpoint:
    path: /path/to/productTypeVersion
    method: GET
- name: ProductType
  endpoint:
    path: /path/to/productType
    method: GET
- name: ProductTypeList
  endpoint:
    path: /path/to/productTypeList
    method: GET
- name: Locale
  endpoint:
    path: /path/to/locale
    method: GET
- name: RequirementsEnforced
  endpoint:
    path: /path/to/requirementsEnforced
    method: GET
- name: Requirements
  endpoint:
    path: /path/to/requirements
    method: GET
- name: Market Basket Analysis Report
  endpoint:
    path: /reports/GET_BRAND_ANALYTICS_MARKET_BASKET_REPORT
    method: GET
    data_selector: reportData
    params:
      reportOptions:
        reportPeriod: WEEK
- name: Amazon Search Terms Report
  endpoint:
    path: /reports/GET_BRAND_ANALYTICS_SEARCH_TERMS_REPORT
    method: GET
    data_selector: reportData
    params:
      reportOptions:
        reportPeriod: WEEK
- name: Repeat Purchase
  endpoint:
    path: /reports/GET_BRAND_ANALYTICS_REPEAT_PURCHASE_REPORT
    method: GET
    data_selector: reportData
    params:
      reportOptions:
        reportPeriod: WEEK
- name: Alternate Purchase
  endpoint:
    path: /reports/GET_BRAND_ANALYTICS_ALTERNATE_PURCHASE_REPORT
    method: GET
    data_selector: reportData
    params:
      reportOptions:
        reportPeriod: WEEK
- name: Item Comparison Report
  endpoint:
    path: /reports/GET_BRAND_ANALYTICS_ITEM_COMPARISON_REPORT
    method: GET
    data_selector: reportData
    params:
      reportOptions:
        reportPeriod: WEEK
- name: Market Basket Analysis Report
  endpoint:
    path: /reports/GET_BRAND_ANALYTICS_MARKET_BASKET_REPORT
    method: GET
    data_selector: reportData
    params:
      reportOptions:
        reportPeriod: WEEK
- name: Amazon Search Terms Report
  endpoint:
    path: /reports/GET_BRAND_ANALYTICS_SEARCH_TERMS_REPORT
    method: GET
    data_selector: reportData
    params:
      reportOptions:
        reportPeriod: WEEK
- name: Repeat Purchase
  endpoint:
    path: /reports/GET_BRAND_ANALYTICS_REPEAT_PURCHASE_REPORT
    method: GET
    data_selector: reportData
    params:
      reportOptions:
        reportPeriod: WEEK
- name: Alternate Purchase
  endpoint:
    path: /reports/GET_BRAND_ANALYTICS_ALTERNATE_PURCHASE_REPORT
    method: GET
    data_selector: reportData
    params:
      reportOptions:
        reportPeriod: WEEK
- name: Item Comparison Report
  endpoint:
    path: /reports/GET_BRAND_ANALYTICS_ITEM_COMPARISON_REPORT
    method: GET
    data_selector: reportData
    params:
      reportOptions:
        reportPeriod: WEEK
- name: Vendor Sales Report
  endpoint:
    path: /reports/GET_VENDOR_SALES_REPORT
    method: GET
    data_selector: reportData
    params:
      reportOptions:
        reportPeriod: WEEK
        distributorView: SOURCING
        sellingProgram: RETAIL
- name: Net Pure Product Margin Report
  endpoint:
    path: /reports/GET_VENDOR_NET_PURE_PRODUCT_MARGIN_REPORT
    method: GET
    data_selector: reportData
    params:
      reportOptions:
        reportPeriod: WEEK
- name: Vendor Traffic Report
  endpoint:
    path: /reports/GET_VENDOR_TRAFFIC_REPORT
    method: GET
    data_selector: reportData
    params:
      reportOptions:
        reportPeriod: WEEK
- name: Vendor Forecasting Report
  endpoint:
    path: /reports/GET_VENDOR_FORECASTING_REPORT
    method: GET
    data_selector: reportData
    params:
      reportOptions:
        sellingProgram: RETAIL
- name: Vendor Inventory Report
  endpoint:
    path: /reports/GET_VENDOR_INVENTORY_REPORT
    method: GET
    data_selector: reportData
    params:
      reportOptions:
        reportPeriod: WEEK
        distributorView: SOURCING
        sellingProgram: RETAIL
- name: Sales and Traffic Business Report
  endpoint:
    path: /reports/GET_SALES_AND_TRAFFIC_REPORT
    method: GET
    data_selector: reportData
    params:
      reportOptions:
        dateGranularity: MONTH
        asinGranularity: CHILD
- name: Inventory Report
  endpoint:
    path: GET_FLAT_FILE_OPEN_LISTINGS_DATA
    method: GET
    data_selector: reportOptions
    params:
      custom: 'false'
- name: All Listings Report
  endpoint:
    path: GET_MERCHANT_LISTINGS_ALL_DATA
    method: GET
    data_selector: reportOptions
    params:
      custom: 'false'
- name: Active Listings Report
  endpoint:
    path: GET_MERCHANT_LISTINGS_DATA
    method: GET
    data_selector: reportOptions
    params: {}
- name: Inactive Listings Report
  endpoint:
    path: GET_MERCHANT_LISTINGS_INACTIVE_DATA
    method: GET
    data_selector: reportOptions
    params: {}
- name: Open Listings Report
  endpoint:
    path: GET_MERCHANT_LISTINGS_DATA_BACK_COMPAT
    method: GET
    data_selector: reportOptions
    params:
      custom: 'false'
- name: Open Listings Report Lite
  endpoint:
    path: GET_MERCHANT_LISTINGS_DATA_LITE
    method: GET
    data_selector: reportOptions
    params: {}
- name: Open Listings Report Liter
  endpoint:
    path: GET_MERCHANT_LISTINGS_DATA_LITER
    method: GET
    data_selector: reportOptions
    params: {}
- name: Canceled Listings Report
  endpoint:
    path: GET_MERCHANT_CANCELLED_LISTINGS_DATA
    method: GET
    data_selector: reportOptions
    params:
      custom: 'false'
- name: Suppressed Listings Report
  endpoint:
    path: GET_MERCHANTS_LISTINGS_FYP_REPORT
    method: GET
    data_selector: reportOptions
    params: {}
- name: 'Pan-European Eligibility: FBA ASINs'
  endpoint:
    path: GET_PAN_EU_OFFER_STATUS
    method: GET
    data_selector: reportOptions
    params: {}
- name: 'Pan-European Eligibility: Self-fulfilled ASINs'
  endpoint:
    path: GET_MFN_PAN_EU_OFFER_STATUS
    method: GET
    data_selector: reportOptions
    params: {}
- name: Referral Fee Preview Report
  endpoint:
    path: GET_REFERRAL_FEE_PREVIEW_REPORT
    method: GET
    data_selector: reportOptions
    params: {}
- name: Unshipped Orders Report
  endpoint:
    path: GET_FLAT_FILE_ACTIONABLE_ORDER_DATA_SHIPPING
    method: GET
    data_selector: reportOptions
    params:
      ShowSalesChannel: 'false'
- name: Scheduled XML Order Report (Invoicing)
  endpoint:
    path: GET_ORDER_REPORT_DATA_INVOICING
    method: GET
    data_selector: reportOptions
    params: {}
- name: Scheduled XML Order Report (Tax)
  endpoint:
    path: GET_ORDER_REPORT_DATA_TAX
    method: GET
    data_selector: reportOptions
    params: {}
- name: Scheduled XML Order Report (Shipping)
  endpoint:
    path: GET_ORDER_REPORT_DATA_SHIPPING
    method: GET
    data_selector: reportOptions
    params: {}
- name: Requested or Scheduled Flat File Order Report (Invoicing)
  endpoint:
    path: GET_FLAT_FILE_ORDER_REPORT_DATA_INVOICING
    method: GET
    data_selector: reportOptions
    params:
      ShowSalesChannel: 'false'
- name: Requested or Scheduled Flat File Order Report (Shipping)
  endpoint:
    path: GET_FLAT_FILE_ORDER_REPORT_DATA_SHIPPING
    method: GET
    data_selector: reportOptions
    params:
      ShowSalesChannel: 'false'
- name: Requested or Scheduled Flat File Order Report (Tax)
  endpoint:
    path: GET_FLAT_FILE_ORDER_REPORT_DATA_TAX
    method: GET
    data_selector: reportOptions
    params:
      ShowSalesChannel: 'false'
- name: Flat File Orders By Last Update Report
  endpoint:
    path: GET_FLAT_FILE_ALL_ORDERS_DATA_BY_LAST_UPDATE_GENERAL
    method: GET
    data_selector: reportOptions
    params: {}
- name: Flat File Orders By Order Date Report
  endpoint:
    path: GET_FLAT_FILE_ALL_ORDERS_DATA_BY_ORDER_DATE_GENERAL
    method: GET
    data_selector: reportOptions
    params: {}
- name: Flat File Archived Orders Report
  endpoint:
    path: GET_FLAT_FILE_ARCHIVED_ORDERS_DATA_BY_ORDER_DATE
    method: GET
    data_selector: reportOptions
    params: {}
- name: XML Orders By Last Update Report
  endpoint:
    path: GET_XML_ALL_ORDERS_DATA_BY_LAST_UPDATE_GENERAL
    method: GET
    data_selector: reportOptions
    params: {}
- name: XML Orders By Order Date Report
  endpoint:
    path: GET_XML_ALL_ORDERS_DATA_BY_ORDER_DATE_GENERAL
    method: GET
    data_selector: reportOptions
    params: {}
- name: Flat File Pending Orders Report
  endpoint:
    path: GET_FLAT_FILE_PENDING_ORDERS_DATA
    method: GET
    data_selector: reportOptions
    params: {}
- name: XML Pending Orders Report
  endpoint:
    path: GET_PENDING_ORDERS_DATA
    method: GET
    data_selector: reportOptions
    params: {}
- name: Converged Flat File Pending Orders Report
  endpoint:
    path: GET_CONVERGED_FLAT_FILE_PENDING_ORDERS_DATA
    method: GET
    data_selector: reportOptions
    params: {}
- name: XML Returns Report by Return Date
  endpoint:
    path: GET_XML_RETURNS_DATA_BY_RETURN_DATE
    method: GET
    data_selector: reportOptions
    params: {}
- name: Flat File Returns Report by Return Date
  endpoint:
    path: GET_FLAT_FILE_RETURNS_DATA_BY_RETURN_DATE
    method: GET
    data_selector: reportOptions
    params: {}
- name: XML Prime Returns Report by Return Date
  endpoint:
    path: GET_XML_MFN_PRIME_RETURNS_REPORT
    method: GET
    data_selector: reportOptions
    params: {}
- name: CSV Prime Returns Report by Return Date
  endpoint:
    path: GET_CSV_MFN_PRIME_RETURNS_REPORT
    method: GET
    data_selector: reportOptions
    params: {}
- name: XML Return Attributes Report by Return Date
  endpoint:
    path: GET_XML_MFN_SKU_RETURN_ATTRIBUTES_REPORT
    method: GET
    data_selector: reportOptions
    params: {}
- name: Flat File Return Attributes Report by Return Date
  endpoint:
    path: GET_FLAT_FILE_MFN_SKU_RETURN_ATTRIBUTES_REPORT
    method: GET
    data_selector: reportOptions
    params: {}
- name: Flat File Feedback Report
  endpoint:
    path: GET_SELLER_FEEDBACK_DATA
    method: GET
    data_selector: reportOptions
    params: {}
- name: XML Customer Metrics Report
  endpoint:
    path: GET_V1_SELLER_PERFORMANCE_REPORT
    method: GET
    data_selector: reportOptions
    params: {}
- name: Seller Performance Report
  endpoint:
    path: GET_V2_SELLER_PERFORMANCE_REPORT
    method: GET
    data_selector: reportOptions
    params: {}
- name: Promotions Performance Report
  endpoint:
    path: GET_PROMOTION_PERFORMANCE_REPORT
    method: GET
    data_selector: reportOptions
    params:
      promotionStartDateFrom: ''
      promotionStartDateTo: ''
- name: Coupons Performance Report
  endpoint:
    path: GET_COUPON_PERFORMANCE_REPORT
    method: GET
    data_selector: reportOptions
    params:
      campaignStartDateFrom: ''
      campaignStartDateTo: ''
- name: settlement_report_flat_file
  endpoint:
    path: /getReports
    method: GET
    data_selector: reports
    params:
      reportType: GET_V2_SETTLEMENT_REPORT_DATA_FLAT_FILE
- name: settlement_report_xml
  endpoint:
    path: /getReports
    method: GET
    data_selector: reports
    params:
      reportType: GET_V2_SETTLEMENT_REPORT_DATA_XML
- name: settlement_report_flat_file_v2
  endpoint:
    path: /getReports
    method: GET
    data_selector: reports
    params:
      reportType: GET_V2_SETTLEMENT_REPORT_DATA_FLAT_FILE_V2
- name: fba_fulfilled_shipments_report
  endpoint:
    path: /getReports
    method: GET
    data_selector: reports
    params:
      reportType: GET_AMAZON_FULFILLED_SHIPMENTS_DATA_GENERAL
- name: fba_fulfilled_shipments_report_invoicing
  endpoint:
    path: /getReports
    method: GET
    data_selector: reports
    params:
      reportType: GET_AMAZON_FULFILLED_SHIPMENTS_DATA_INVOICING
- name: fba_fulfilled_shipments_report_tax
  endpoint:
    path: /getReports
    method: GET
    data_selector: reports
    params:
      reportType: GET_AMAZON_FULFILLED_SHIPMENTS_DATA_TAX
- name: flat_file_all_orders_report_by_last_update
  endpoint:
    path: /getReports
    method: GET
    data_selector: reports
    params:
      reportType: GET_FLAT_FILE_ALL_ORDERS_DATA_BY_LAST_UPDATE_GENERAL
- name: flat_file_all_orders_report_by_order_date
  endpoint:
    path: /getReports
    method: GET
    data_selector: reports
    params:
      reportType: GET_FLAT_FILE_ALL_ORDERS_DATA_BY_ORDER_DATE_GENERAL
- name: xml_all_orders_report_by_last_update
  endpoint:
    path: /getReports
    method: GET
    data_selector: reports
    params:
      reportType: GET_XML_ALL_ORDERS_DATA_BY_LAST_UPDATE_GENERAL
- name: xml_all_orders_report_by_order_date
  endpoint:
    path: /getReports
    method: GET
    data_selector: reports
    params:
      reportType: GET_XML_ALL_ORDERS_DATA_BY_ORDER_DATE_GENERAL
- name: Sales Tax Report
  endpoint:
    path: /reports/get_flat_file_sales_tax_data
    method: GET
    data_selector: report
    params: {}
- name: Amazon VAT Calculation Report
  endpoint:
    path: /reports/sc_vat_tax_report
    method: GET
    data_selector: report
    params: {}
- name: Amazon VAT Transactions Report
  endpoint:
    path: /reports/get_vat_transaction_data
    method: GET
    data_selector: report
    params: {}
- name: On Demand GST Merchant Tax Report B2B
  endpoint:
    path: /reports/get_gst_mtr_b2b_custom
    method: GET
    data_selector: report
    params: {}
- name: On Demand GST Merchant Tax Report B2C
  endpoint:
    path: /reports/get_gst_mtr_b2c_custom
    method: GET
    data_selector: report
    params: {}
- name: On Demand Stock Transfer Report
  endpoint:
    path: /reports/get_gst_str_adhoc
    method: GET
    data_selector: report
    params: {}
- name: Flat File VAT Invoice Data Report (VIDR)
  endpoint:
    path: /reports/get_flat_file_vat_invoice_data_report
    method: GET
    data_selector: report
    params: {}
- name: XML VAT Invoice Data Report (VIDR)
  endpoint:
    path: /reports/get_xml_vat_invoice_data_report
    method: GET
    data_selector: report
    params: {}
- name: Browse Tree Report
  endpoint:
    path: /reports/get_xml_browse_tree_data
    method: GET
    data_selector: report
    params: {}
- name: EasyShip Report
  endpoint:
    path: /reports/get_easyship_documents
    method: GET
    data_selector: report
    params: {}
- name: EasyShip Picked Up Report
  endpoint:
    path: /reports/get_easyship_pickedup
    method: GET
    data_selector: report
    params: {}
- name: EasyShip Waiting for Pick Up Report
  endpoint:
    path: /reports/get_easyship_waiting_for_pickup
    method: GET
    data_selector: report
    params: {}
- name: Manage Quotes Report
  endpoint:
    path: /reports/rfqd_bulk_download
    method: GET
    data_selector: report
    params: {}
- name: Referral Fee Discounts Report
  endpoint:
    path: /reports/fee_discounts_report
    method: GET
    data_selector: report
    params: {}
- name: B2B Product Opportunities - Recommended for You Report
  endpoint:
    path: /reports/get_b2b_product_opportunities_recommended_for_you
    method: GET
    data_selector: report
    params: {}
- name: B2B Product Opportunities - Not yet on Amazon
  endpoint:
    path: /reports/get_b2b_product_opportunities_not_yet_on_amazon
    method: GET
    data_selector: report
    params: {}
- name: EPR Monthly Report
  endpoint:
    path: /reports/get_epr_monthly_reports
    method: GET
    data_selector: report
    params: {}
- name: EPR Quarterly Report
  endpoint:
    path: /reports/get_epr_quarterly_reports
    method: GET
    data_selector: report
    params: {}
- name: EPR Annual Report
  endpoint:
    path: /reports/get_epr_annual_reports
    method: GET
    data_selector: report
    params: {}
- name: getReports
  endpoint:
    path: /reports/2020-09-04/reports
    method: GET
- name: createReport
  endpoint:
    path: /reports/2020-09-04/reports
    method: POST
- name: getReport
  endpoint:
    path: /reports/{reportId}
    method: GET
    data_selector: reportDetails
    params: {}
- name: cancelReport
  endpoint:
    path: /reports/{reportId}
    method: DELETE
    data_selector: cancelledReports
    params: {}
- name: getReportSchedules
  endpoint:
    path: /schedules
    method: GET
    data_selector: reportSchedules
    params: {}
- name: createReportSchedule
  endpoint:
    path: /schedules
    method: POST
    data_selector: createdReportSchedule
    params: {}
- name: getReportSchedule
  endpoint:
    path: /schedules/{reportScheduleId}
    method: GET
    data_selector: reportScheduleDetails
    params: {}
- name: cancelReportSchedule
  endpoint:
    path: /reports/2020-09-04/schedules/{reportScheduleId}
    method: DELETE
- name: getReportDocument
  endpoint:
    path: /reports/2020-09-04/documents/{reportDocumentId}
    method: GET
- name: getReports
  endpoint:
    path: /reports/2021-06-30/reports
    method: GET
    data_selector: reports
    params:
      pageSize: 10
- name: createReport
  endpoint:
    path: /reports/2021-06-30/reports
    method: POST
    data_selector: report
    params: {}
- name: getReport
  endpoint:
    path: /reports/2021-06-30/reports/{reportId}
    method: GET
    data_selector: report
    params: {}
- name: cancelReport
  endpoint:
    path: /reports/2021-06-30/reports/{reportId}
    method: DELETE
    data_selector: no content
    params: {}
- name: getReportSchedules
  endpoint:
    path: /reports/2021-06-30/schedules
    method: GET
    data_selector: reportScheduleList
    params:
      reportTypes: ''
- name: createReportSchedule
  endpoint:
    path: /reports/2021-06-30/schedules
    method: POST
    data_selector: createReportScheduleResponse
    params:
      body: ''
- name: getReportSchedule
  endpoint:
    path: /reports/2021-06-30/schedules/{reportScheduleId}
    method: GET
    data_selector: reportSchedule
    params: {}
- name: cancelReportSchedule
  endpoint:
    path: /reports/2021-06-30/schedules/{reportScheduleId}
    method: DELETE
- name: getReportDocument
  endpoint:
    path: /reports/2021-06-30/documents/{reportDocumentId}
    method: GET
- name: getOrderMetrics
  endpoint:
    path: /orders/v0/getOrderMetrics
    method: GET
- name: order_metrics
  endpoint:
    path: /sales/v1/orderMetrics
    method: GET
    data_selector: payload
    params:
      marketplaceIds: ''
      interval: ''
      granularity: Total
      buyerType: All
      firstDayOfWeek: Monday
- name: FirstDayOfWeek
  endpoint:
    path: /firstdayofweek
    method: GET
    data_selector: Value
- name: marketplace_participations
  endpoint:
    path: /sellers/v1/marketplaceParticipations
    method: GET
    data_selector: payload
- name: service_job
  endpoint:
    path: /service/v1/serviceJobs/{serviceJobId}
    method: GET
    data_selector: serviceJobDetails
- name: cancel_service_job
  endpoint:
    path: /service/v1/serviceJobs/{serviceJobId}/cancellations
    method: PUT
    data_selector: cancellationResponse
- name: completeServiceJob
  endpoint:
    path: /service/v1/serviceJobs/{serviceJobId}/completions
    method: PUT
    params: {}
- name: getServiceJobs
  endpoint:
    path: /service/v1/serviceJobs
    method: GET
    params:
      pageSize: '20'
      marketplaceIds: ''
- name: addAppointmentForServiceJob
  endpoint:
    path: /service/v1/serviceJobs/{serviceJobId}/appointments
    method: POST
    params: {}
- name: rescheduleAppointmentForServiceJob
  endpoint:
    path: /service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}
    method: POST
    params: {}
- name: assignAppointmentResources
  endpoint:
    path: /service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/resources
    method: PUT
    data_selector: success
    params: {}
- name: setAppointmentFulfillmentData
  endpoint:
    path: /service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/fulfillment
    method: PUT
    data_selector: success
    params: {}
- name: updateSchedule
  endpoint:
    path: /service/v1/serviceResources/{resourceId}/schedules
    method: PUT
    data_selector: success
    params: {}
- name: createReservation
  endpoint:
    path: /service/v1/reservation
    method: POST
    data_selector: success
    params: {}
- name: updateReservation
  endpoint:
    path: /service/v1/reservation/{reservationId}
    method: PUT
    data_selector: success
    params: {}
- name: cancelReservation
  endpoint:
    path: /service/v1/reservation/{reservationId}
    method: DELETE
    data_selector: response
    params: {}
- name: createServiceDocumentUploadDestination
  endpoint:
    path: /service/v1/documents
    method: POST
    data_selector: response
    params: {}
- name: service_job
  endpoint:
    path: /getServiceJobs
    method: GET
    data_selector: jobs
- name: getShipmentDetails
  endpoint:
    path: /getShipmentDetails
    method: GET
- name: submitInvoice
  endpoint:
    path: /submitInvoice
    method: POST
- name: getInvoiceStatus
  endpoint:
    path: /getInvoiceStatus
    method: GET
- name: getShipmentDetails
  endpoint:
    path: /fba/outbound/brazil/v0/shipments/{shipmentId}
    method: GET
    data_selector: GetShipmentDetailsResponse
- name: submitInvoice
  endpoint:
    path: /fba/outbound/brazil/v0/shipments/{shipmentId}/invoice
    method: POST
    data_selector: SubmitInvoiceResponse
- name: getInvoiceStatus
  endpoint:
    path: /fba/outbound/brazil/v0/shipments/{shipmentId}/invoice/status
    method: GET
    data_selector: payload
- name: createShipment
  endpoint:
    path: /createShipment
    method: POST
- name: getShipment
  endpoint:
    path: /getShipment
    method: GET
- name: cancelShipment
  endpoint:
    path: /cancelShipment
    method: DELETE
- name: purchaseLabels
  endpoint:
    path: /purchaseLabels
    method: POST
- name: retrieveShippingLabel
  endpoint:
    path: /retrieveShippingLabel
    method: GET
- name: purchaseShipment
  endpoint:
    path: /purchaseShipment
    method: POST
- name: getRates
  endpoint:
    path: /getRates
    method: GET
- name: getAccount
  endpoint:
    path: /getAccount
    method: GET
- name: getTrackingInformation
  endpoint:
    path: /getTrackingInformation
    method: GET
- name: createShipment
  endpoint:
    path: /shipping/v1/shipments
    method: POST
- name: getShipment
  endpoint:
    path: /shipping/v1/shipments/{shipmentId}
    method: GET
- name: cancelShipment
  endpoint:
    path: /shipping/v1/shipments/{shipmentId}/cancel
    method: POST
- name: purchaseLabels
  endpoint:
    path: /shipments/{shipmentId}/purchaseLabels
    method: POST
    data_selector: PurchaseLabelsResponse
- name: retrieveShippingLabel
  endpoint:
    path: /shipments/{shipmentId}/containers/{trackingId}/label
    method: POST
    data_selector: RetrieveShippingLabelResponse
- name: purchaseShipment
  endpoint:
    path: /purchaseShipment
    method: POST
    data_selector: PurchaseShipmentResponse
- name: getRates
  endpoint:
    path: /rates
    method: POST
    data_selector: GetRatesResponse
- name: getAccount
  endpoint:
    path: /account
    method: GET
    data_selector: GetAccountResponse
- name: tracking_information
  endpoint:
    path: /shipping/v1/tracking/{trackingId}
    method: GET
    data_selector: trackingInformation
    params: {}
- name: purchaseShipment
  endpoint:
    path: /purchaseshipment
    method: POST
    data_selector: payload
- name: createShipment
  endpoint:
    path: /createshipment
    method: POST
    data_selector: payload
- name: getShipment
  endpoint:
    path: /getshipment
    method: GET
    data_selector: payload
- name: getRates
  endpoint:
    path: /getrates
    method: GET
    data_selector: payload
- name: getAccount
  endpoint:
    path: /getaccount
    method: GET
    data_selector: payload
- name: getTrackingInformation
  endpoint:
    path: /gettrackinginformation
    method: GET
    data_selector: payload
- name: getSolicitationActionsForOrder
  endpoint:
    path: /solicitations/v1/orders/{amazonOrderId}
    method: GET
    data_selector: _links.actions
    params:
      amazonOrderId: required
      marketplaceIds: required
- name: createProductReviewAndSellerFeedbackSolicitation
  endpoint:
    path: /solicitations/v1/orders/{amazonOrderId}/solicitations/productReviewAndSellerFeedback
    method: POST
    data_selector: response
    params:
      amazonOrderId: required
      marketplaceIds: required
- name: getSolicitationActionResponse
  endpoint:
    path: /getSolicitationActionResponse
    method: GET
- name: getSchemaResponse
  endpoint:
    path: /getSchemaResponse
    method: GET
- name: createProductReviewAndSellerFeedbackSolicitationResponse
  endpoint:
    path: /createProductReviewAndSellerFeedbackSolicitationResponse
    method: POST
- name: createRestrictedDataToken
  endpoint:
    path: /tokens/2021-03-01/restrictedDataToken
    method: POST
- name: uploadDestinations
  endpoint:
    path: /uploads/2020-11-01/uploadDestinations/{resource}
    method: POST
    data_selector: payload
    params:
      marketplaceIds: ''
      contentMD5: ''
      resource: ''
      contentType: ''
- name: submitInventoryUpdate
  endpoint:
    path: /vendor/directFulfillment/inventory/v1/warehouses/{warehouseId}/items
    method: POST
- name: getOrders
  endpoint:
    path: /vendor/directFulfillment/orders/2021-12-28/purchaseOrders
    method: GET
    data_selector: orders
    params:
      createdAfter: ''
      createdBefore: ''
      includeDetails: 'true'
- name: getOrder
  endpoint:
    path: /vendor/directFulfillment/orders/2021-12-28/purchaseOrders/{purchaseOrderNumber}
    method: GET
    data_selector: orderDetails
    params: {}
- name: submitAcknowledgement
  endpoint:
    path: /vendor/directFulfillment/orders/2021-12-28/acknowledgements
    method: POST
    data_selector: transactionId
    params: {}
- name: orderAcknowledgement
  endpoint:
    path: /orders/acknowledgement
    method: POST
    data_selector: orderAcknowledgements
- name: getOrders
  endpoint:
    path: /orders
    method: GET
    data_selector: orders
- name: getOrder
  endpoint:
    path: /orders/{orderId}
    method: GET
    data_selector: order
- name: getOrders
  endpoint:
    path: /vendor/directFulfillment/orders/v1/purchaseOrders
    method: GET
    data_selector: results
    params:
      createdAfter: required
      createdBefore: required
      includeDetails: optional
- name: getOrder
  endpoint:
    path: /vendor/directFulfillment/orders/v1/purchaseOrders/{purchaseOrderNumber}
    method: GET
    data_selector: result
    params:
      purchaseOrderNumber: required
- name: submitAcknowledgement
  endpoint:
    path: /vendor/directFulfillment/orders/v1/acknowledgements
    method: POST
    data_selector: payload
- name: OrderStatus
  endpoint:
    path: /orderstatus
    method: GET
    data_selector: records
- name: Type
  endpoint:
    path: /type
    method: GET
    data_selector: records
- name: UnitOfMeasure
  endpoint:
    path: /unitofmeasure
    method: GET
    data_selector: records
- name: TaxRegistrationType
  endpoint:
    path: /taxregistrationtype
    method: GET
    data_selector: records
- name: SortOrder
  endpoint:
    path: /sortorder
    method: GET
    data_selector: records
- name: invoice
  endpoint:
    path: /invoices
    method: GET
    data_selector: invoices
- name: submitInvoice
  endpoint:
    path: /vendor/directFulfillment/payments/v1/invoices
    method: POST
- name: ItemQuantity
  endpoint:
    path: /itemQuantity
    method: GET
    data_selector: amount
    params: {}
- name: SubmitInvoiceResponse
  endpoint:
    path: /submitInvoiceResponse
    method: GET
    data_selector: payload
    params: {}
- name: TransactionReference
  endpoint:
    path: /transactionReference
    method: GET
    data_selector: transactionId
    params: {}
- name: ErrorList
  endpoint:
    path: /errorList
    method: GET
    data_selector: errors
    params: {}
- name: generateOrderScenarios
  endpoint:
    path: /vendor/directFulfillment/sandbox/2021-10-28/orders
    method: POST
    data_selector: TransactionReference
- name: getOrderScenarios
  endpoint:
    path: /vendor/directFulfillment/sandbox/2021-10-28/transactions/{transactionId}
    method: GET
    data_selector: TransactionStatus
- name: getShippingLabels
  endpoint:
    path: /vendor/directFulfillment/shipping/2021-12-28/shippingLabels
    method: GET
    params:
      createdAfter: ''
      createdBefore: ''
      limit: ''
      shipFromPartyId: ''
      sortOrder: ASC
      nextToken: ''
- name: submitShippingLabelRequest
  endpoint:
    path: /vendor/directFulfillment/shipping/2021-12-28/shippingLabels
    method: POST
- name: getShippingLabel
  endpoint:
    path: /vendor/directFulfillment/shipping/2021-12-28/shippingLabels/{purchaseOrderNumber}
    method: GET
- name: ShippingLabel
  endpoint:
    path: /shipping-labels
    method: GET
    data_selector: shippingLabels
- name: ShippingLabelRequest
  endpoint:
    path: /submit-shipping-label
    method: POST
    data_selector: labelData
- name: PackedItem
  endpoint:
    path: /packed-items
    method: GET
    data_selector: packedItems
- name: getTransactionStatus
  endpoint:
    path: /vendor/directFulfillment/transactions/v1/transactions/{transactionId}
    method: GET
    data_selector: payload
    params:
      transactionId: string
- name: submitInvoices
  endpoint:
    path: /vendor/payments/v1/invoices
    method: POST
    data_selector: payload
- name: TaxDetails
  endpoint:
    path: /taxdetails
    method: GET
    data_selector: records
- name: Money
  endpoint:
    path: /money
    method: GET
    data_selector: records
- name: AdditionalDetails
  endpoint:
    path: /additionaldetails
    method: GET
    data_selector: records
- name: ChargeDetails
  endpoint:
    path: /chargedetails
    method: GET
    data_selector: records
- name: AllowanceDetails
  endpoint:
    path: /allowancedetails
    method: GET
    data_selector: records
- name: PaymentTerms
  endpoint:
    path: /paymentterms
    method: GET
    data_selector: records
- name: CreditNoteDetails
  endpoint:
    path: /creditnotedetails
    method: GET
    data_selector: records
- name: ItemQuantity
  endpoint:
    path: /itemquantity
    method: GET
    data_selector: records
- name: getPurchaseOrders
  endpoint:
    path: /vendor/orders/v1/purchaseOrders
    method: GET
    data_selector: purchaseOrders
    params:
      limit: 100
      createdAfter: string
      createdBefore: string
      changedAfter: string
      changedBefore: string
      includeDetails: 'true'
      isPOChanged: 'false'
- name: getPurchaseOrder
  endpoint:
    path: /vendor/orders/v1/purchaseOrders/{purchaseOrderNumber}
    method: GET
    data_selector: purchaseOrder
    params:
      purchaseOrderNumber: string
- name: submitAcknowledgement
  endpoint:
    path: /acknowledgements
    method: POST
    data_selector: payload
- name: getPurchaseOrdersStatus
  endpoint:
    path: /purchaseOrdersStatus
    method: GET
    data_selector: payload
- name: Address
  endpoint:
    path: /address
    method: GET
    data_selector: address
- name: OrderItem
  endpoint:
    path: /orderitem
    method: GET
    data_selector: orderItem
- name: SubmitAcknowledgementResponse
  endpoint:
    path: /submitAcknowledgementResponse
    method: POST
    data_selector: payload
- name: GetPurchaseOrdersStatusResponse
  endpoint:
    path: /getPurchaseOrdersStatusResponse
    method: GET
    data_selector: payload
- name: shipment_confirmations
  endpoint:
    path: /vendor/shipping/v1/shipmentConfirmations
    method: POST
    data_selector: SubmitShipmentConfirmationsResponse
- name: getTransaction
  endpoint:
    path: /vendor/transactions/v1/transactions/{transactionId}
    method: GET
    data_selector: payload
- name: shipments
  endpoint:
    path: /fba/inbound/v0/shipments/{shipmentId}/preorder/confirm
    method: PUT
    data_selector: response
    params:
      marketplace: ATVPDKIKX0DER
- name: createDestination
  endpoint:
    path: /notifications/v1/destinations
    method: POST
- name: deleteDestination
  endpoint:
    path: /notifications/v1/destinations/{destinationId}
    method: DELETE
- name: deleteSubscriptionById
  endpoint:
    path: /notifications/v2/subscriptions/{notificationType}/{subscriptionId}
    method: DELETE
- name: getDestination
  endpoint:
    path: /notifications/v1/destinations/{destinationId}
    method: GET
- name: getDestinations
  endpoint:
    path: /notifications/v1/destinations
    method: GET
- name: getSubscriptionById
  endpoint:
    path: /notifications/v1/subscriptions/{notificationType}/{subscriptionId}
    method: GET
- name: getAuthorizationCode
  endpoint:
    path: /authorization/v1/authorizationCode
    method: GET
- name: sellers_api
  endpoint:
    path: /fba/inbound/v0/shipments/{shipmentId}/preorder/confirm
    method: PUT
    data_selector: ''
    params: {}
notes:
- 销售伙伴API是一个基于REST的API，帮助亚马逊销售伙伴以编程方式访问其订单、发货、付款等数据。
- 通过销售伙伴API，你可以设置一个OAuth授权工作流程，让销售伙伴从亚马逊卖家中心合作伙伴网络详情页或自己的网站上启动。
- Uses OAuth2 with refresh token — requires setup of IAM roles and policies.
- 使用OAuth2，要求设置连接应用程序
- LWA授权码在5分钟后失效。请确保在过期前将其换成LWA刷新令牌。
- 访问令牌发出后，其有效期为一小时。
- LWA授权码在5分钟后过期。请确保在过期前将其换成LWA刷新令牌。
- 访问令牌发出后，其有效期为一小时。同一访问令牌可用于多次API调用，直到过期。
- LWA access token expires after one hour.
- For restricted operations, use a restricted access token (RDT).
- 重要的是：这是你查看或下载AWS秘密访问密钥的唯一机会，你将需要它来验证你对销售伙伴API的调用。
- Authorization is regional; ensure the OAuth URI matches the partner's region.
- LWA authorization code expires after 5 minutes.
- When calling restricted operations, include a restricted data token (RDT) instead
  of LWA access token.
- Uses OAuth2 with refresh token — requires setup of connected app in Amazon
- To avoid untrusted certificate authority errors, update your trust store to trust
  LWA authorization server.
- Uses AWS credentials for authentication
- Ensure IAM policy is attached to the IAM entity used for API calls
- 混合SP-API应用程序的授权在一年后过期。请务必让你的销售伙伴在他们的授权过期前每年重新授权你的SP-API混合应用。
- 生成一个新的刷新令牌不会使以前的刷新令牌失效。
- When calling restricted operations, include RDT instead of LWA access token.
- Sandbox is for testing functionality, not scalability testing. Calls to sandbox
  endpoints are subject to throttling limits. Rate = 5 requests per second; Burst
  = 15.
- If you want to maintain separate API integrations for different businesses, you
  can register as a developer separately for each vendor group.
- 'API supports multiple regions: NA, EU, FE.'
- The Selling Partner API protects customers' Personally Identifiable Information
  (PII) by requiring a Restricted Data Token (RDT) with calls to restricted operations.
- An LWA authorization code expires after five minutes. Be sure to exchange it for
  an LWA refresh token before it expires.
- After an access token is issued it is valid for one hour.
- Unless you have a delegatee application, you get an RDT by calling the createRestrictedDataToken
  operation of the Tokens API.
- The authorization model for the Selling Partner API is based on Login with Amazon,
  Amazon's implementation of OAuth 2.0.
- An LWA access token expires one hour after it is issued.
- When calling restricted operations, include a Restricted Access Token (RDT) instead
  of an LWA access token.
- Uses AWS Signature Version 4 for authentication
- SP-API Application Assistance available for both PII and non-PII permissions
- SP-API Technical Integration Consultation for seamless connectivity
- Avoid submitting a lot of feeds with only a few records in each feed.
- All inventory feeds, other than POST_PRODUCT_DATA, can be submitted at the same
  time.
- Application registration is an irreversible process that changes the authorization
  model. If you are updating a hybrid application, make sure that you have implemented
  OAuth authorization before registering your application.
- Functionality may not be entirely available in this region.
- Amazon does not provide technical support for third-party JSON Schema libraries.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Amazon does not provide technical support for third-party JSON Schema libraries
  and this is provided as an example only.
- 'Private Developer: I build application(s) that integrate my own company with Amazon
  Services APIs'
- An RDT remains valid for one hour.
- Requires the restricted resources to be specified in the request body.
- The orderId must be provided in the path parameter for retrieving regulated information.
- A Login with Amazon (LWA) refresh token appears with every Authorize app button
  that you click.
- If you click an Authorize app button multiple times, a new refresh token is generated
  each time. Generating a new refresh token does not invalidate previous refresh tokens.
- Default rate limit is 10 requests per second.
- SP-API Application Assistance (for both PII and non-PII permissions)
- Second Review Consulting to ease platform approvals
- SP-API Audit Consulting to safeguard your business
- Selling Partner API operations have associated usage plans that specify the rate
  limits.
- If your application is consistently throttled, it might mean that your call patterns
  could be further optimized.
- The dynamic sandbox allows testing without affecting production data.
- The GET_VENDOR_DEMAND_FORECAST_REPORT, GET_VENDOR_INVENTORY_HEALTH_AND_PLANNING_REPORT,
  and GET_VENDOR_SALES_DIAGNOSTIC_REPORT report types will be deprecated on June 27,
  2022.
- New reports mimic the dashboards that will launch in Vendor Central later in 2022.
- For hybrid Selling Partner API applications, if an MWS auth token was returned,
  your application is also authorized to make calls to Amazon MWS on the selling partner's
  behalf.
- We offer comprehensive, professional and efficient support
- 使用 OAuth2 生成访问令牌 — 需要在 api 中设置连接应用程序
- You must create and configure IAM policies and entities before registering your
  application.
- Old and new IAM ARNs are valid for 14 days when updating IAM ARN.
- 你的应用程序的授权方式取决于应用程序的类型
- LWA刷新令牌是一个长期存在的令牌，你可以用它来交换LWA访问令牌。
- 销售伙伴API使用AWS的签名版本4签名流程来验证请求
- 你需要学习如何签署HTTP请求，只有当你手动创建它们时
- Uses AWS credentials for authentication.
- Authorization is region-specific.
- Make sure to have partners reauthorize your SP-API hybrid app annually before their
  authorization expires.
- LWA授权码在5分钟后过期。请确保在它过期前将其换成LWA刷新令牌。
- 使用生成的SDK将刷新令牌换成访问令牌
- User-Agent头的长度超过500个字符，Selling Partner API将拒绝该头
- OAuth authorization workflow is region-specific.
- LWA authorization code expires in 5 minutes.
- In restricted operations, include RDT instead of LWA access token.
- Ensure to update your trust store to avoid untrusted CA errors when calling the
  LWA authorization server.
- 沙盒是用来测试功能的，而不是可扩展性测试。对沙盒端点的调用受制于这些节流限制。
- 速率 = 每秒5个请求；爆发 = 15。
- 销售伙伴API是Amazon MWS的现代化，包括以前Amazon MWS提供的所有功能。所有未来的开发将只适用于销售伙伴API。
- Requires setup of connected app in Seller Central
- API的可靠性取决于你的容量和资源的大小，以满足应用程序随着时间变化的需求。
- 在销售伙伴API中，使用令牌桶算法对请求进行速率限制。
- Developers must encrypt all Amazon information in transit using HTTP over TLS 1.2
  (HTTPS).
- Developers must use industry best practices for static encryption of all PII.
- 所有的数据，尤其是PII，在静止状态和传输过程中都应该进行加密保护。
- Roles are required to access specific operations or resources.
- Pagination occurs when the response exceeds the page size, use nextToken for next
  page.
- Messages containing listings data submissions for the Selling Partner.
- Comprehensive support for SP-API Application Assistance
- Technical Integration Consultation for seamless connectivity
- Audit Consulting to safeguard your business
- Rate limit is 1 request per second, with a burst capacity of 5 requests.
- Selling partners whose business demands require higher throughput may see higher
  rate and burst values than those shown.
- The getDestination and deleteDestination APIs are grantless.
- Unless specifying a previous productTypeVersion, the Amazon product type definitions
  always describe the latest up-to-date Amazon catalog requirements.
- Amazon is continually expanding support for new and existing Amazon product types
  in the Product Type Definitions API.
- Authorizations of a hybrid SP-API application expire after one year.
- An LWA authorization code expires after five minutes.
- An access token obtained through the token exchange is valid for one hour.
- For restricted operations, include a Restricted Data Token (RDT) instead of an LWA
  access token.
- The Selling Partner API uses the AWS Signature Version 4 Signing Process for authenticating
  requests.
- You need to learn how to sign HTTP requests only when you manually create them.
- You will not have access to the AWS access key again after this step.
- If you lose your AWS secret access key you will need to create a new IAM user with
  its own new set of keys.
- If you include the `version=beta` parameter, the workflow authorizes an application
  in Draft state.
- LWA authorization code expires after five minutes.
- An LWA access token must be included in calls to all operations except restricted
  operations.
- When calling restricted operations, include a Restricted Data Token (RDT) instead
  of an LWA access token.
- Uses OAuth2 for authorization.
- The authorization code expires after five minutes.
- Generating a new refresh token does not invalidate previous refresh tokens.
- A User-Agent header must be included with every request.
- 'The sandbox is for testing functionality, not scalability testing. Calls to sandbox
  endpoints are subject to throttling limits: rate = five requests per second; burst
  = 15.'
- The Selling Partner API is a modernization of Amazon MWS and includes all functionality
  previously available from Amazon MWS.
- Requires setup of IAM role with AWS Security Token Service (AWS STS) policy attached
- Restricted Data Token (RDT) is required for calls to restricted operations
- API reliability depends on sizing your capacity and resources to meet the changing
  needs of applications over time.
- Requests are rate limited using the token bucket algorithm.
- Developers must encrypt all Amazon Information in transit using HTTP over TLS 1.2
  at minimum (HTTPS).
- Developers must encrypt all PII at rest using industry best practice standards (AES-256
  bit preferred, or RSA with 2048-bit key size or higher).
- Unprotected data, whether in-transit or at-rest, leaves enterprises vulnerable to
  attack.
- Developers should ensure that all data is protected through encryption.
- All data, especially PII, should be secured with encryption both at rest and in
  transit.
- Roles protect access to personally identifiable information (PII) and other sensitive
  data.
errors:
- '400: Request has missing or invalid parameters and cannot be parsed.'
- '403: Indicates that access to the resource is forbidden.'
- '404: The resource specified does not exist.'
- '429: The frequency of requests was greater than allowed.'
- '500: An unexpected condition occurred that prevented the server from fulfilling
  the request.'
- '503: Temporary overloading or maintenance of the server.'
- '401 Unauthorized: 检查OAuth范围或令牌过期'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '400 Bad Request: Check request parameters'
- '401 Unauthorized: Verify client ID and secret'
- '403 Forbidden: Ensure correct permissions'
- '401 Unauthorized: Recheck OAuth credentials or scopes.'
- 'invalid_grant: The authorization code is invalid or expired.'
- 'Token expired: Request a new LWA access token.'
- '403 Forbidden: Check if the operation requires sales partner authorization.'
- '401 Unauthorized: Verify if the correct credentials are provided.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- 'Unauthorized: Invalid credentials or missing permissions.'
- 'Unauthorized: Ensure valid RDT is provided or token is not expired.'
- 'Not Found: Verify the orderId format and existence.'
- 'Unauthorized: Access to requested resource is denied. Access token is missing in
  the request header.'
- '401: The request''s Authorization header is not formatted correctly or does not
  contain a valid token.'
- '404: The specified resource does not exist.'
- '410: The specified resource no longer exists.'
- '429: Retry-able status code, implement a back off strategy.'
- transactionId must be provided
- '401 Unauthorized: Ensure proper authorization setup'
- 'ResourceNotFound: Cannot find resource by the given URI'
- 'INVALID_WAREHOUSE_CODE: Invalid Warehouse Code. Retry request with correct Warehouse
  code'
- '无效的授权码: 请检查提供的授权码'
- '401 Unauthorized: Verify OAuth scopes or token expiration.'
- 访问令牌发出后，其有效期为一小时
- '401 Unauthorized: Include LWA access token for non-restricted operations.'
- '403 Forbidden: Access to the resource is denied.'
- '401 Unauthorized: Check OAuth scopes or token expiration.'
- '400 Bad Request: Missing access token in the request header.'
- '401 Unauthorized: Check for valid refresh token.'
- '429: 可重试的状态代码。请随意再试，但重复的节流请求需要采取回避策略。'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- '403: Forbidden - You do not have the required role.'
- '400: 请求参数缺失或无效，无法解析.'
- '403: 表示禁止访问资源。 可能的原因包括拒绝访问、未授权、过期令牌或无效签名.'
- '404: 请求的资源不存在.'
- '413: 请求大小超过了可接受的最大大小.'
- '415: 请求的格式不受支持.'
- '429: 请求的频率大于允许的频率.'
- '500: 发生了一个意外的情况，使服务器无法满足请求.'
- '503: 服务器暂时超载或维护.'
- '413: The request size exceeded the maximum accepted size.'
- '415: The request payload is in an unsupported format.'
- '403: Indicates access to the resource is forbidden.'
- '400: Request has missing or invalid parameters'
- '403: Access to the resource is forbidden'
- '404: The resource specified does not exist'
- '429: The frequency of requests was greater than allowed'
- '401 Unauthorized: Check OAuth token validity or scopes'
- '401: The request''s Authorization header is not formatted correctly or does not
  contain a valid token'
- '403: Indicates access to the resource is forbidden'
- '404: The specified resource does not exist'
- '415: The request payload is in an unsupported format'
- '500: An unexpected condition occurred that prevented the server from fulfilling
  the request'
- '503: Temporary overloading or maintenance of the server'
- '403: Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource
  Not Found.'
- '500: Encountered an unexpected condition which prevented the server from fulfilling
  the request.'
- 'UNKNOWN_INB_ERROR_CODE: Unknown Ineligibility Reason.'
- '415: The request''s Content-Type header is invalid.'
- '403: Indicates access to the resource is forbidden. Possible reasons include Access
  Denied, Unauthorized, Expired Token, or Invalid Signature.'
- '403: Indicates that access to the resource is forbidden. Possible reasons include
  Access Denied, Unauthorized, Expired Token, or Invalid Signature.'
- '90220: ''[batteries_required]'' is required but not supplied.'
- '90220: ''[supplier_declared_dg_hz_regulation]'' is required but not supplied.'
- '99022: The field ''prices'' for the attribute ''purchasable_offer.our_price'' does
  not have enough values. The required minimum is ''1'' value(s).'
- '403: Access Denied, Unauthorized, Expired Token, or Invalid Signature.'
- '400: Request has missing or invalid parameters.'
- '403: Access to the resource is forbidden.'
- '201: The message was created for the order.'
- A list of error responses returned when a request is unsuccessful.
- '409: The resource specified conflicts with the current state.'
- One or more unexpected errors occurred during the getDestination operation.
- One or more unexpected errors occurred during the getDestinations operation.
- One or more unexpected errors occurred during the deleteDestination operation.
- '401: Authorization header is not formatted correctly or does not contain a valid
  token'
- '500: An unexpected condition occurred'
- 'UnexpectedError: One or more unexpected errors occurred during the operation.'
- 'code: INVALID_PARAMETER, message: The parameter provided is invalid.'
- 'code: RATE_LIMIT_EXCEEDED, message: You have exceeded the rate limit for requests.'
- '415: The entity of the request is in a format not supported by the requested resource.'
- '403: 403 can be caused for reasons like Access Denied, Unauthorized, Expired Token,
  Invalid Signature or Resource Not Found.'
- '422: Unprocessable Entity. Unable to process the contained instructions.'
- '403: Access to the resource is forbidden. Possible reasons include Access Denied,
  Unauthorized, Expired Token, or Invalid Signature.'
- '403: Access forbidden'
- '404: Resource does not exist'
- '429: Frequency of requests greater than allowed'
- '500: Unexpected condition preventing fulfillment'
- 'code: required'
- 'message: required'
- 'REQUEST_LIMIT_EXCEEDED: An error code indicating that the request limit has been
  exceeded.'
- 'QUERY_TIMEOUT: An error code indicating that the request has timed out.'
- '401 Unauthorized: An error code indicating that authorization has failed.'
- 'Unauthorized: Access to requested resource is denied.'
- '429: Retry with back off strategy for throttled requests.'
- '403 Forbidden: The response to the request will have an HTTP status code of 403
  and error information in the response body.'
auth_info:
  mentioned_objects:
  - LWA客户标识符
  - 客户秘密
  - MWSAuthToken
  - spapi_oauth_code
  - LWAAuthorizationCredentials
  - AWSAuthenticationCredentials
  - AWSAuthenticationCredentialsProvider
  - LWA
  - refresh_token
  - client_id
  - client_secret
  - OauthToken
  - AuthProvider
client:
  base_url: https://spapi.vip
  headers:
    Accept: application/json
  paginator:
    type: offset
    page_size_param: MaxResultsPerPage
    default_page_size: 100
source_metadata: null
