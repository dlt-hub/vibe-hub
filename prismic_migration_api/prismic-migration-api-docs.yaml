resources:
- name: page
  endpoint:
    path: /documents
    method: POST
    data_selector: data
    params: {}
- name: update_page
  endpoint:
    path: /documents/:id/
    method: PUT
    data_selector: data
    params: {}
- name: slices
  endpoint:
    path: /api/v1/slices
    method: GET
    data_selector: records
    params: {}
- name: pages
  endpoint:
    path: /api/v1/pages
    method: GET
    data_selector: records
    params: {}
- name: migration_api
  endpoint:
    path: /migration
    method: GET
    data_selector: records
- name: document_api
  endpoint:
    path: /documents
    method: GET
    data_selector: records
- name: graphql_api
  endpoint:
    path: /graphql
    method: POST
    data_selector: records
- name: webhooks
  endpoint:
    path: /webhooks
    method: GET
    data_selector: records
- name: pricing
  endpoint:
    path: /pricing
    method: GET
    data_selector: plans
    params: {}
- name: slices
  endpoint:
    path: /slices
    method: GET
    data_selector: records
    params: {}
- name: pages
  endpoint:
    path: /pages
    method: GET
    data_selector: records
    params: {}
- name: localization
  endpoint:
    path: /localization
    method: GET
    data_selector: locales
    params: {}
- name: jobs
  endpoint:
    path: /jobs
    method: GET
    data_selector: positions
    params: {}
- name: jobs
  endpoint:
    path: /api/v1/jobs
    method: GET
    data_selector: results
    params: {}
- name: slices
  endpoint:
    path: /api/slices
    method: GET
    data_selector: records
- name: documents
  endpoint:
    path: /api/documents
    method: GET
    data_selector: results
    params: {}
- name: migration_api
  endpoint:
    path: /api/v1/migration
    method: GET
    data_selector: records
    params: {}
- name: Migration API
  endpoint:
    path: /updates/general-availability-of-the-migration-api
    method: GET
    data_selector: records
    params: {}
- name: user_roles
  endpoint:
    path: /features/user-roles
    method: GET
- name: content
  endpoint:
    path: /api/v1/documents/search
    method: GET
    data_selector: results
    params: {}
- name: slices
  endpoint:
    path: /api/slices
    method: GET
    data_selector: slices
- name: slices
  endpoint:
    path: /api/v1/slices
    method: GET
    data_selector: results
    params: {}
- name: slices
  endpoint:
    path: /slices
    method: GET
    data_selector: records
- name: pages
  endpoint:
    path: /pages
    method: GET
    data_selector: records
- name: products
  endpoint:
    path: /api/v2/documents/search
    method: GET
    data_selector: results
- name: Content API
  endpoint:
    path: /docs/content-api
    method: GET
- name: Repository API
  endpoint:
    path: /docs/repository-api-technical-reference
    method: GET
- name: Tags API
  endpoint:
    path: /docs/tags-api-technical-reference
    method: GET
- name: Types API
  endpoint:
    path: /docs/custom-types-api
    method: GET
- name: Asset API
  endpoint:
    path: /docs/asset-api-technical-reference
    method: GET
- name: Migration API
  endpoint:
    path: /docs/migration-api-technical-reference
    method: GET
- name: GraphQL API
  endpoint:
    path: /docs/graphql-technical-reference
    method: GET
- name: documents
  endpoint:
    path: /documents/search
    method: GET
    data_selector: results
    params: {}
- name: products
  endpoint:
    path: /api/v2/documents/search
    method: GET
    data_selector: results
    params: {}
- name: content
  endpoint:
    path: /content
    method: GET
    data_selector: data
- name: repository_metadata
  endpoint:
    path: /repository
    method: GET
    data_selector: metadata
- name: tags
  endpoint:
    path: /tags
    method: GET
    data_selector: tags
- name: types
  endpoint:
    path: /types
    method: GET
    data_selector: types
- name: preview
  endpoint:
    path: /api/preview
    method: GET
    data_selector: preview
- name: exit_preview
  endpoint:
    path: /api/exit-preview
    method: GET
    data_selector: exit_preview
- name: revalidate
  endpoint:
    path: /api/revalidate
    method: POST
    data_selector: revalidate
- name: documents
  endpoint:
    path: /documents/search
    method: GET
    data_selector: results
- name: tags
  endpoint:
    path: /api/tags
    method: GET
    data_selector: tags
- name: preview
  endpoint:
    path: /preview
    method: GET
    data_selector: data
    params: {}
- name: page
  endpoint:
    path: /api/v2/documents/search
    method: GET
    data_selector: results
- name: repository
  endpoint:
    path: /api/v2/documents/search
    method: GET
    data_selector: results
- name: preview
  endpoint:
    path: /api/preview
    method: GET
    data_selector: response
    params: {}
- name: exit_preview
  endpoint:
    path: /api/exit-preview
    method: GET
    data_selector: response
    params: {}
- name: revalidate
  endpoint:
    path: /api/revalidate
    method: POST
    data_selector: response
    params: {}
- name: preview
  endpoint:
    path: /api/preview
    method: GET
    data_selector: records
    params: {}
- name: prismic_content
  endpoint:
    path: /api/v2/documents/search
    method: GET
    data_selector: results
    params: {}
- name: seo_fields
  endpoint:
    path: /docs/webhooks#add-a-webhook-to-your-hosting-provider
    method: GET
    data_selector: fields
    params: {}
- name: slice_machine
  endpoint:
    path: /slicemachine.config.json
    method: GET
    data_selector: adapter.options
    params: {}
- name: homepage
  endpoint:
    path: /documents/search
    method: GET
    data_selector: results
    params:
      q: '[[:d = at(document.type, "homepage")]]'
- name: page
  endpoint:
    path: /documents/search
    method: GET
    data_selector: results
    params:
      q: '[[:d = at(document.type, "page")]]'
- name: repository
  endpoint:
    path: /api/v2
    method: GET
    data_selector: data
    params: {}
- name: page
  endpoint:
    path: /api/v2/documents/search
    method: GET
    data_selector: results
    params: {}
- name: preview
  endpoint:
    path: /api/preview
    method: GET
    data_selector: data
    params: {}
- name: slice_simulator
  endpoint:
    path: /slice-simulator
    method: GET
    data_selector: slices
    params: {}
- name: routes
  endpoint:
    path: /routes
    method: GET
    data_selector: routes
- name: homepage
  endpoint:
    path: /documents/search
    method: GET
    data_selector: results
    params:
      page: '1'
      pageSize: '20'
- name: page
  endpoint:
    path: /documents/search
    method: GET
    data_selector: results
    params:
      page: '1'
      pageSize: '20'
- name: blog_post
  endpoint:
    path: /blog_post
    method: GET
    data_selector: records
    params:
      lang: en-ca
- name: webhook
  endpoint:
    path: /webhooks
    method: POST
    data_selector: webhook
    params: {}
- name: repository
  endpoint:
    path: /slicemachine/config
    method: GET
    data_selector: repositoryName
    params: {}
- name: boolean
  endpoint:
    path: /docs/fields/boolean
    method: GET
    data_selector: example_boolean
- name: routes
  endpoint:
    path: /routes
    method: GET
- name: blog_post
  endpoint:
    path: /blog_post
    method: GET
    data_selector: records
    params:
      lang: en-ca
- name: color
  endpoint:
    path: /docs/fields/color
    method: GET
    data_selector: example_color
    params: {}
- name: content_relationship
  endpoint:
    path: /api/v2/documents/search
    method: GET
    data_selector: results
- name: webhook_events
  endpoint:
    path: /webhooks
    method: POST
    data_selector: events
- name: date_field
  endpoint:
    path: /docs/fields/date
    method: GET
    data_selector: example_date
    params: {}
- name: embed
  endpoint:
    path: /embed
    method: GET
    data_selector: example_embed
    params: {}
- name: geopoint
  endpoint:
    path: /docs/fields/geopoint
    method: GET
    data_selector: example_geopoint
- name: boolean
  endpoint:
    path: /docs/fields/boolean
    method: GET
    data_selector: example_boolean
- name: color_field
  endpoint:
    path: /docs/fields/color
    method: GET
    data_selector: example_color
- name: integration_field
  endpoint:
    path: /integration
    method: GET
    data_selector: results
- name: date_field
  endpoint:
    path: /docs/fields/date
    method: GET
    data_selector: example_date
- name: embed
  endpoint:
    path: /embed
    method: GET
    data_selector: example_embed
    params: {}
- name: number_field
  endpoint:
    path: /docs/fields/number
    method: GET
    data_selector: example_number
    params: {}
- name: geopoint
  endpoint:
    path: /docs/fields/geopoint
    method: GET
    data_selector: example_geopoint
- name: repeatable_group
  endpoint:
    path: /docs/fields/repeatable-group
    method: GET
    data_selector: example_repeatable_group
    params: {}
- name: select_field
  endpoint:
    path: /docs/fields/select
    method: GET
    data_selector: options
    params: {}
- name: timestamp
  endpoint:
    path: /docs/fields/timestamp
    method: GET
    data_selector: example_timestamp
    params: {}
- name: select_field
  endpoint:
    path: /docs/fields/select
    method: GET
    data_selector: example_select
- name: uid
  endpoint:
    path: /api/v2/documents/search
    method: GET
    data_selector: results
    params: {}
- name: timestamp
  endpoint:
    path: /docs/fields/timestamp
    method: GET
    data_selector: example_timestamp
- name: product
  endpoint:
    path: /admin/api/2023-10/products.json
    method: GET
    data_selector: products
- name: collection
  endpoint:
    path: /admin/api/2023-10/custom_collections.json
    method: GET
    data_selector: custom_collections
- name: product_collection
  endpoint:
    path: /product-collections
    method: GET
    data_selector: collections
- name: forms
  endpoint:
    path: /marketing/v3/forms/
    method: GET
    data_selector: results
- name: form_submission
  endpoint:
    path: /submissions/v3/integration/secure/submit/{{ dlt.secrets['HUBSPOT_PORTAL_ID']
      }}/{{ id }}
    method: POST
    data_selector: null
- name: collections
  endpoint:
    path: /api/collections
    method: GET
    data_selector: results
- name: product_collection
  endpoint:
    path: /collections
    method: GET
    data_selector: collections
    params: {}
- name: images
  endpoint:
    path: /api/images
    method: GET
    data_selector: results
- name: videos
  endpoint:
    path: /api/videos
    method: GET
    data_selector: results
- name: forms
  endpoint:
    path: /marketing/v3/forms/
    method: GET
    data_selector: results
- name: form_submission
  endpoint:
    path: /submissions/v3/integration/secure/submit/{{ dlt.secrets['HUBSPOT_PORTAL_ID']
      }}/{{ id }}
    method: POST
    data_selector: result
- name: documents_search
  endpoint:
    path: /documents/search
    method: GET
    data_selector: results
    params: {}
- name: images
  endpoint:
    path: /api/images
    method: GET
- name: videos
  endpoint:
    path: /api/videos
    method: GET
- name: documents
  endpoint:
    path: /documents/search
    method: GET
    data_selector: results
    params:
      ref: X71BaxIAACMA0NsN
- name: tags
  endpoint:
    path: /api/tags
    method: GET
    data_selector: tags
- name: custom_types
  endpoint:
    path: /customtypes
    method: GET
    data_selector: custom_types
    params: {}
- name: shared_slices
  endpoint:
    path: /slices
    method: GET
    data_selector: shared_slices
    params: {}
- name: tags
  endpoint:
    path: /api/tags
    method: GET
    data_selector: tags
    params: {}
- name: update_shared_slice
  endpoint:
    path: /slices/update
    method: POST
    data_selector: slice
    params: {}
- name: remove_custom_type
  endpoint:
    path: /customtypes/{customTypeId}
    method: DELETE
    data_selector: custom_type
    params: {}
- name: remove_shared_slice
  endpoint:
    path: /slices/{sliceId}
    method: DELETE
    data_selector: shared_slice
    params: {}
- name: custom_types
  endpoint:
    path: /customtypes
    method: GET
    data_selector: custom_types
    params: {}
- name: shared_slices
  endpoint:
    path: /slices
    method: GET
    data_selector: shared_slices
    params: {}
- name: assets
  endpoint:
    path: /assets
    method: GET
    data_selector: assets
- name: update_shared_slice
  endpoint:
    path: /slices/update
    method: POST
    data_selector: data
    params: {}
- name: remove_custom_type
  endpoint:
    path: /customtypes/{customTypeId}
    method: DELETE
    data_selector: data
    params: {}
- name: remove_shared_slice
  endpoint:
    path: /slices/{sliceId}
    method: DELETE
    data_selector: data
    params: {}
- name: user_session
  endpoint:
    path: /login
    method: POST
    data_selector: ''
    params: {}
- name: assets
  endpoint:
    path: /assets
    method: GET
    data_selector: assets
    params:
      limit: 100
- name: upload_asset
  endpoint:
    path: /assets
    method: POST
    data_selector: upload
    params: {}
- name: update_asset
  endpoint:
    path: /assets/{{asset-id}}
    method: PATCH
    data_selector: update
    params: {}
- name: delete_asset
  endpoint:
    path: /assets/{{asset-id}}
    method: DELETE
    data_selector: delete
    params: {}
- name: allDocuments
  endpoint:
    path: _allDocuments
    method: GET
    data_selector: edges
    params: {}
- name: getSingle
  endpoint:
    path: example_custom_type
    method: GET
    data_selector: example_title
    params:
      uid: example
      lang: en-US
- name: login
  endpoint:
    path: /login
    method: POST
    data_selector: session_token
notes:
- Pages created or updated via the Migration API will be added to a migration release
  as drafts.
- Requests are limited to one per second per repository.
- Uses OAuth2 with refresh token — requires setup of connected app in Prismic
- Release on-brand pages fast while using your tech stack.
- Pricing plans support various features for different needs.
- Uses OAuth2 with refresh token — requires setup of connected app in api
- Make sure to configure OAuth properly for access.
- Feature is currently in beta and available upon request.
- Prismic's ability to schedule and release multiple landing pages simultaneously
  is really useful and enables us to plan and execute marketing campaigns more efficiently,
  ensuring a coordinated and timely release of content.
- Request a demo to see how Prismic helps developers and marketers build websites
  that keep getting better.
- The API provides access to job postings and company culture information.
- Prismic is designed for websites, supporting modern web frameworks and website-specific
  content modeling.
- Pricing evolves with your growth, ensuring you never pay more than the value you
  receive.
- Prismic's visual Page Builder offers an easy-to-use interface for creating web pages.
- Ensure consistent design at scale with slices
- Slices provide the right amount of flexibility to marketing teams
- Requires setup of OAuth2 credentials.
- The API is currently rate-limited to 1 request per second per repository.
- The Migration API is free to use across all plans.
- Nothing integrates as easily, or makes Next.js more powerful than Prismic.
- Requires setup of a connected app in Prismic
- Request access to a free trial
- Prismic allows me to create a really powerful page builder for my clients and makes
  the process extremely productive with Slice Machine.
- Fast API, simple to use
- Prismic transformed our web development with an easy-to-use platform, enabling seamless
  tech-marketing collaboration.
- Their Slice Machine has allowed us to embrace the headless approach of website building,
  bringing more value to our clients.
- Natively headless, Prismic serves over 30 billion API requests each month to mission-critical
  websites.
- Prismic API is easy to use through its TypeScript client
- Built-in image optimization through imgix integration
- Prismic's user-friendly interface has made it easy to onboard clients and empower
  them with the flexibility to manage their own content.
- Ensure rapid content delivery to users globally in milliseconds with Prismic's API
  backed by a content delivery network (CDN).
- Integration with Imgix provides on-the-fly image optimization.
- This course assumes you already know HTML, CSS, and JavaScript.
- Development time is 1.5 to 2 times faster on traditional project implementations.
- This course is not an intro to web development
- This course will not go into any depth on Next.js’s advanced features
- Use Prismic's localization tools to display region-specific content.
- Prismic’s read-only HTTP API endpoint for content.
- Published content is public by default. You can require a private access token to
  secure the API.
- Uses OAuth2 for authentication.
- Set up previews in Prismic using the site name 'Development'.
- Add a preview route '/api/preview' for content previews.
- Published content is public by default.
- You can require a private access token to secure the API.
- Prismic integrates seamlessly with popular web frameworks.
- Some objects like Contact may return nulls in deeply nested fields
- Uses Prismic API for content management
- Endpoints are generated during project setup
- Routes prefixed with /preview are not prerendered.
- Previews require setup in Prismic repository.
- The API has a protective rate limit of 200 non-cached requests per second per repository
  to ensure consistent performance for all users.
- Slices are sections of a website page modeled using a collection of fields.
- The API response includes slice data structured with id, slice_type, variation,
  and primary content.
- Routes should be defined close to your Prismic client.
- All published content is publicly accessible through the API by default.
- For maximum security, use Private API to authenticate all requests with an access
  token.
- Webhook delivery will be retried every 10 minutes up to 5 times if the server responds
  with anything other than a 200 response.
- A webhook will be automatically disabled if it fails five times consecutively.
- Uses OAuth2 — requires setup of connected app in Prismic
- Environments are a Platinum and Enterprise plan feature available as a paid add-on.
- Content writers should stay on the production repository to author new content.
- Slice Machine supports environments, a Platinum and Enterprise plan feature.
- Route resolvers are passed to the Prismic client’s routes option.
- Live previews show content updates in real-time while editing in the Page Builder.
- Full-website previews let content writers navigate your entire website with draft
  content.
- Content relationship fields are often used for connecting a blog post to its author.
- A webhook is a message sent by Prismic when a page is published or edited in your
  repository.
- All images distributed through the API have an `auto=compress,format` URL parameter.
- Data is pulled every 30 minutes. This frequency may change in the future.
- Data is pulled every 30 minutes.
- If you do not see the Integration Fields tab, request access via the Prismic Support
  Portal.
- All media formats are supported, including images, videos, MP3s, GIFs, PDFs, and
  more.
- Rich text fields support standard text formatting options.
- Some objects may return nulls in deeply nested fields
- The table field is not supported in the GraphQL API or Content API v1.
- A repeatable group cannot contain another repeatable group.
- Shopify requires custom apps for API access.
- Use the Storefront API for accessing product details.
- Only one UID field per page type or custom type is allowed.
- The value must be unique to the page type or custom type and locale.
- The value must be lowercase and cannot contain spaces.
- Requires setup of Shopify custom app with Storefront API access.
- Uses API key for authentication — keep API Secret secure.
- Endpoint fetches up to 500 images or videos.
- Fetches up to 100 forms from HubSpot.
- Accounts with more forms need a custom implementation to fetch them all.
- Rate limit for the Content API is 200 requests per second.
- Queries that use the CDN are automatically cached.
- The ref must be up-to-date to query content.
- Queries using the CDN are automatically cached.
- The tags API is currently in the beta stage of its development cycle.
- To make a releases ref appear in your API response, provide a master+releases access
  token with your API query or set your repository’s API visibility to Open API.
- Bearer access tokens carry many privileges and should be kept secure.
- Use bearer access tokens for authentication.
- Make all API requests with HTTPS.
- Requests are limited to one per second.
- The body for POST must be multipart/form-data.
errors:
- 'Invalid block type. Supported block types are: paragraph, embed'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '401 Unauthorized: Check your access token and permissions.'
- '404 Not Found: The requested resource does not exist.'
- '401 Unauthorized: Check OAuth token.'
- '404 Not Found: Verify the endpoint path.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- '400 Bad Request: Check your request parameters'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck access token or API access settings'
- 'NotFoundError: A matching page was not found.'
- 'ForbiddenError: An incorrect access token was provided.'
- 'ParsingError: The filters option contains invalid syntax.'
- 200 requests per second limit.
- 'Rate limit exceeded: Automatically retries after one second.'
- '404: Returned if the repository is brand new and without any tags.'
- '404: If the repository is brand new and without any tags.'
- '204 No Content: Custom type or Shared slice successfully deleted'
- '422: No shared slices with that ID exist in the repository'
- '200 OK: Successful request.'
- '201 (Created): Custom type or Shared slice successfully created.'
- '204 No Content: Custom type successfully updated.'
- '409: Custom type or Shared slice with the same ID already exists.'
- '422: No custom type with that ID exists.'
- '204 No Content: Means the operation was successful'
- '422: Means no shared slices with that ID exist in the repository'
auth_info:
  mentioned_objects:
  - OauthToken
  - AuthProvider
  - NamedCredential
  - repository ID
  - bearer access token
client:
  base_url: https://prismic.io
  auth:
    type: oauth2
    flow: refresh_token
    token_url: https://prismic.io/auth/token
    client_id: '{{ dlt.secrets[''prismic_client_id''] }}'
    client_secret: '{{ dlt.secrets[''prismic_client_secret''] }}'
    refresh_token: '{{ dlt.secrets[''prismic_refresh_token''] }}'
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
