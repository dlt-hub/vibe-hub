resources:
- name: logout_all_user_sessions
  endpoint:
    path: /auth/logoutAllUserSessions
    method: POST
    data_selector: 'true'
    params: {}
- name: create_user
  endpoint:
    path: /api/backend/v1/user/
    method: POST
    data_selector: 'true'
- name: fetch_user_by_user_id
  endpoint:
    path: /api/backend/v1/user/
    method: GET
    data_selector: 'true'
- name: fetch_user_by_email
  endpoint:
    path: /api/backend/v1/user/
    method: GET
    data_selector: 'true'
- name: fetch_user_by_username
  endpoint:
    path: /api/backend/v1/user/
    method: GET
    data_selector: 'true'
- name: query_for_users
  endpoint:
    path: /api/backend/v1/user/
    method: GET
    data_selector: 'true'
- name: update_user
  endpoint:
    path: /api/backend/v1/user/
    method: PUT
    data_selector: 'true'
- name: update_user_email
  endpoint:
    path: /api/backend/v1/user/
    method: PUT
    data_selector: 'true'
- name: update_user_password
  endpoint:
    path: /api/backend/v1/user/
    method: PUT
    data_selector: 'true'
- name: create_magic_link
  endpoint:
    path: /api/backend/v1/user/
    method: POST
    data_selector: 'true'
- name: create_access_token
  endpoint:
    path: /api/backend/v1/user/
    method: POST
    data_selector: 'true'
- name: migrate_user_from_external_source
  endpoint:
    path: /api/backend/v1/user/
    method: POST
    data_selector: 'true'
- name: migrate_user_password
  endpoint:
    path: /api/backend/v1/user/
    method: POST
    data_selector: 'true'
- name: delete_user
  endpoint:
    path: /api/backend/v1/user/
    method: DELETE
    data_selector: 'true'
- name: disable_block_user
  endpoint:
    path: /api/backend/v1/user/
    method: POST
    data_selector: 'true'
- name: enable_unblock_user
  endpoint:
    path: /api/backend/v1/user/
    method: POST
    data_selector: 'true'
- name: disable_user_2fa
  endpoint:
    path: /api/backend/v1/user/
    method: POST
    data_selector: 'true'
- name: resend_email_confirmation
  endpoint:
    path: /api/backend/v1/user/
    method: POST
    data_selector: 'true'
- name: validate_api_key
  endpoint:
    path: /api/validate
    method: POST
- name: login
  endpoint:
    path: /login
    method: GET
- name: signup
  endpoint:
    path: /signup
    method: GET
- name: account_settings
  endpoint:
    path: /account/settings
    method: GET
- name: org_settings
  endpoint:
    path: /org/settings/{ORG_ID}
    method: GET
- name: org_members
  endpoint:
    path: /org/members/{ORG_ID}
    method: GET
- name: org_audit_log
  endpoint:
    path: /org/audit_log/{ORG_ID}
    method: GET
- name: api_keys
  endpoint:
    path: /org/api_keys/{ORG_ID}
    method: GET
- name: account_api_keys
  endpoint:
    path: /account/api_keys
    method: GET
- name: emails
  endpoint:
    path: /emails
    method: GET
    data_selector: emails
    params: {}
- name: orgs
  endpoint:
    path: /orgs
    method: GET
    data_selector: orgs
- name: userinfo
  endpoint:
    path: /propelauth/oauth/userinfo
    method: GET
- name: org_users
  endpoint:
    path: /org/:orgId
    method: GET
    data_selector: users
    params: {}
- name: whoami
  endpoint:
    path: /whoami
    method: GET
    data_selector: user
    params: {}
- name: whoami
  endpoint:
    path: /api/whoami
    method: GET
    data_selector: user
- name: orgs
  endpoint:
    path: /api/org/:orgId
    method: GET
    data_selector: org_users
- name: org_users
  endpoint:
    path: /api/org/<org_id>
    method: GET
    data_selector: users
- name: org
  endpoint:
    path: /api/org/<org_id>
    method: GET
    data_selector: org_users
    params: {}
- name: org_members
  endpoint:
    path: /api/org/{orgId}
    method: GET
    data_selector: org_members
    params: {}
- name: org_members
  endpoint:
    path: /api/whoami
    method: GET
    data_selector: response
    params: {}
- name: whoami
  endpoint:
    path: /api/whoami
    method: GET
    data_selector: claims
- name: auth_callback
  endpoint:
    path: /auth/callback
    method: GET
- name: auth_redirect
  endpoint:
    path: /auth/redirect
    method: GET
- name: auth_logout
  endpoint:
    path: /auth/logout
    method: GET
- name: validate_api_token
  endpoint:
    path: /api/validate_api_token
    method: POST
    data_selector: accessToken
- name: get_user
  endpoint:
    path: /api/get_user
    method: GET
    data_selector: user
- name: auth
  endpoint:
    path: /api/auth
    method: GET
    data_selector: user
    params: {}
- name: user
  endpoint:
    path: /validate_access_token_and_get_user
    method: GET
    data_selector: user
    params: {}
- name: org_member_info
  endpoint:
    path: /get_org
    method: GET
    data_selector: orgMemberInfo
    params: {}
- name: fetch_org
  endpoint:
    path: /api/backend/v1/org/<orgId>
    method: GET
- name: fetch_orgs
  endpoint:
    path: /api/backend/v1/orgs
    method: POST
- name: fetch_users_in_org
  endpoint:
    path: /api/backend/v1/users-in-org
    method: GET
- name: create_org
  endpoint:
    path: /api/backend/v1/org
    method: POST
- name: add_user_to_org
  endpoint:
    path: /api/backend/v1/add-user-to-org
    method: POST
- name: invite_user_to_org
  endpoint:
    path: /api/backend/v1/invite-user-to-org
    method: POST
- name: change_role
  endpoint:
    path: /api/backend/v1/change-role
    method: POST
- name: remove_user_from_org
  endpoint:
    path: /api/backend/v1/remove-user-from-org
    method: POST
- name: update_org
  endpoint:
    path: /api/backend/v1/update-org
    method: PUT
- name: delete_org
  endpoint:
    path: /api/backend/v1/delete-org
    method: DELETE
- name: fetch_role_mappings
  endpoint:
    path: /api/backend/v1/fetch-role-mappings
    method: GET
- name: subscribe_org_to_role_mapping
  endpoint:
    path: /api/backend/v1/subscribe-org-to-role-mapping
    method: PUT
- name: fetch_pending_invites
  endpoint:
    path: /api/backend/v1/fetch-pending-invites
    method: GET
- name: revoke_pending_org_invite
  endpoint:
    path: /api/backend/v1/revoke-pending-org-invite
    method: DELETE
- name: validate_api_key
  endpoint:
    path: /api/backend/v1/end_user_api_keys/validate
    method: POST
    data_selector: apiKeys
    params:
      userId: string
      userEmail: string
      orgId: string
      pageSize: number
      pageNumber: number
- name: fetch_archived_api_keys
  endpoint:
    path: /api/backend/v1/end_user_api_keys/fetch_archived
    method: GET
    data_selector: apiKeys
    params:
      userId: string
      userEmail: string
      orgId: string
      pageSize: number
      pageNumber: number
- name: fetch_active_api_keys
  endpoint:
    path: /fetch-active-api-keys
    method: GET
    params:
      userId: 31c41c16-c281-44ae-9602-8a047e3bf33d
      orgId: 1189c444-8a2d-4c41-8b4b-ae43ce79a492
      userEmail: test@example.com
      pageSize: 10
      pageNumber: 0
- name: fetch_expired_api_keys
  endpoint:
    path: /fetch-expired-api-keys
    method: GET
    params:
      userId: 31c41c16-c281-44ae-9602-8a047e3bf33d
      orgId: 1189c444-8a2d-4c41-8b4b-ae43ce79a492
      userEmail: test@example.com
      pageSize: 10
      pageNumber: 0
- name: allow_org_to_setup_saml
  endpoint:
    path: /api/backend/v1/org/<orgId>/allow_saml
    method: POST
- name: disallow_org_to_setup_saml
  endpoint:
    path: /api/backend/v1/org/<orgId>/disallow_saml
    method: POST
- name: create_saml_connection_link
  endpoint:
    path: /api/backend/v1/org/<orgId>/create_saml_connection_link
    method: POST
- name: fetch_saml_sp_metadata
  endpoint:
    path: /api/backend/v1/org/<orgId>/fetch_saml_sp_metadata
    method: GET
- name: set_saml_idp_metadata
  endpoint:
    path: /api/backend/v1/org/<orgId>/set_saml_idp_metadata
    method: POST
- name: enable_saml_connection
  endpoint:
    path: /api/backend/v1/org/<orgId>/enable_saml_connection
    method: POST
- name: delete_saml_connection
  endpoint:
    path: /api/backend/v1/org/<orgId>/delete_saml_connection
    method: DELETE
- name: fetch_user_oauth_tokens
  endpoint:
    path: /backend/v1/user/<userId>/oauth_token
    method: GET
- name: link_social_account
  endpoint:
    path: /backend/v1/user/<userId>/link
    method: GET
- name: fetch_user_mfa_methods
  endpoint:
    path: /api/backend/v1/user/<user_id>/mfa
    method: GET
    data_selector: success
- name: verify_totp_challenge
  endpoint:
    path: /api/backend/v1/user/<user_id>/mfa/verify-totp
    method: POST
    data_selector: success
- name: send_sms_mfa_code
  endpoint:
    path: /api/backend/v1/user/<user_id>/mfa/send-sms
    method: POST
    data_selector: success
- name: verify_sms_challenge
  endpoint:
    path: /api/backend/v1/user/<user_id>/mfa/verify-sms
    method: POST
    data_selector: success
- name: verify_step_up_grant
  endpoint:
    path: /api/backend/v1/user/<user_id>/mfa/verify-grant
    method: POST
    data_selector: success
- name: login
  endpoint:
    path: /login
    method: POST
- name: setup
  endpoint:
    path: /setup
    method: POST
- name: user_resources
  endpoint:
    path: /api/user/{user_id}/resources
    method: GET
- name: set_active_org
  endpoint:
    path: /api/auth/set-active-org
    method: POST
- name: create_access_token
  endpoint:
    path: /api/backend/v1/access_token
    method: POST
    data_selector: token
    params: {}
- name: webhook_events
  endpoint:
    path: /integrations/webhooks
    method: GET
    data_selector: events
    params: {}
- name: user_resources
  endpoint:
    path: /api/user/{user_id}/resources
    method: GET
- name: set_active_org
  endpoint:
    path: /api/auth/set-active-org
    method: POST
notes:
- PropelAuth provides end-to-end managed user authentication specializing in B2B use
  cases.
- API Key authentication allows you to create API Keys for your end users as well
  as your organizations in order to protect requests they make to your product.
- An API Key cannot be fully deleted by your users and organizations.
- Passwords should never be stored in plaintext or any recoverable form.
- All this works in both your production and test environments, allowing you to test
  the migration before fully committing to it.
- Users can sign up using various methods including email/password, passwordless,
  Social SSO, and SAML.
- Users can create their own organizations if enabled
- All users must be in an organization
- Emails will share the same color scheme and style configured for hosted authentication
  pages
- Email domains must match the verified production domain
- If you do not yet have an Application URL set in your Frontend Integration page,
  you will automatically be redirected to a default landing page.
- Supports locking user accounts after too many unsuccessful login attempts.
- Can customize password requirements.
- User properties can be any information you want to store about a user.
- PropelAuth comes pre-configured with a set of default user properties.
- Converting to a multi-role project is a permanent change and cannot be reverted.
- PropelAuth empowers your customers to setup SAML themselves
- A Relay State URL is not required for Enterprise SSO and currently not supported
- SCIM integration works alongside SAML support — SAML must be enabled before SCIM
  can be enabled.
- You cannot use the other hooks without the AuthProvider.
- Requires authentication to access organization information.
- Social login (SSO) allows your users to login using their existing accounts (e.g.
  Google, Facebook, Twitter).
- If a user signs up with a social provider after signing up with email, their accounts
  will automatically be linked.
- Client ID and Client Secret are required to enable Sign in with Apple.
- Expiration for Client Secret must be within 6 months.
- Make sure that the Confidential setting is checked.
- 'Scroll down and check the following scopes: openid, profile, email.'
- 'Enabling Sign in with Google only requires two fields: Client ID and Client Secret.'
- 'Enabling Sign in with Microsoft only requires two fields: Client ID and Client
  Secret.'
- Users that sign up via Outreach look the same as users that sign up via any other
  method.
- Expects an access token to be passed in via an Authorization header
- PropelAuth provides UIs for signup, login, and account management.
- You need to handle CORS issues when making requests from frontend to backend.
- Requires API Key for backend integration
- Handles CORS issues via Next.js rewrites
- Requires setup of PropelAuth API key.
- CORS issues must be handled when making requests to a backend on a different port.
- We return a 403 for valid users that do not have access to the specified organization
- Ensure to handle CORS issues when making requests from Next.js to a backend running
  on a different localhost port.
- When a request is made to your Spring Boot service, it includes an authentication
  token for the user.
- PropelAuth uses JSON Web Tokens (JWTs) for access tokens.
- PropelAuth uses an asymmetric signing algorithm for JWTs.
- To remove the Sidebar and Log Out button, disable the Display Sidebar setting in
  the Look & Feel section.
- To create a Logout page, set the Default redirect path after logout in the Frontend
  Integrations page.
- Streamlit requires that the Redirect URI is equal to your app's absolute URL with
  the pathname oauth2callback.
- OAuth2 requires setup of an OAuth client in PropelAuth
- Access tokens are valid for 30 minutes
- It is not recommended to use Dash's logout command as it will not completely log
  the user out of your application.
- Dash requires that this value is equal to your app's absolute URL with the pathname
  /oidc/propelauth/callback.
- Authentication should be as easy as possible while also getting out of your way.
- Version 0.2.0 introduces breaking changes to initialization.
- API keys must be enabled via the API Key Settings page in the PropelAuth dashboard.
- Ensure to handle error parsing when fetching user information.
- Requires setup of environment variables in Cloudflare for deployment.
- Requires setup of authorization header in the form `Bearer {TOKEN}`
- To login you'll be prompted to create and copy/paste a Personal API Key.
- Access tokens can be generated with a configurable expiration time.
- Webhooks are sent immediately, so you can be sure that your users will receive their
  emails quickly, and they are retried if they fail.
- CORS errors occur when attempting to make a request from one domain to another,
  such as http://localhost:3000 and http://localhost:3001.
- Customers may require their users to be completely isolated from the rest of the
  user base.
- Using OAuth makes it easy to support multiple domains in one project.
- You provide it in the request in the Authorization header
errors:
- 'Expired token: The API Key has expired.'
- '429 Too Many Requests: Please wait before trying again.'
- 'REQUEST_LIMIT_EXCEEDED: Throttle API calls or reduce frequency'
- 'QUERY_TIMEOUT: Break down filters or add selectivity'
- '401 Unauthorized: Recheck API Key or user authentication'
- '401 Unauthorized: Check API key or user permissions.'
- 'Unauthorized: Invalid access token'
- 'Forbidden: Valid user without access to the organization'
- '401 Unauthorized: Recheck OAuth scopes or token expiration'
- '403 Forbidden: Ensure the user is authenticated and authorized.'
- '401 Unauthorized: Access token expired or invalid'
- 'Failed to log out: Ensure correct refresh token is used'
- '401 Unauthorized: Invalid API Token'
- '403: Invalid access token'
- '403 Forbidden: Invalid access token'
- 'Random Logouts, 401 Errors, or Invalid JWT: This could be because of how Javascript
  captures variables, such as your users access tokens.'
- Third-party cookies may cause errors and infinite redirects.
auth_info:
  mentioned_objects:
  - AuthProvider
  - RequiredAuthProvider
  - UserClass
  - OrgHelper
  - AccessHelper
  - Tokens
  - OrgMemberInfo
  - requireUser
  - requireOrgMember
  - fetchUsersInOrg
  - require_org_member
  - Socialite
  - SocialiteProviders\Manager\SocialiteWasCalled
  - SocialiteProviders\PropelAuth\Provider
  - OIDCAuth
  - Auth
  - ClaimsPrincipal
  - User Class
  - AuthenticationStateProvider
  - authorization_endpoint
  - claims_supported
  - token_endpoint
  - userinfo_endpoint
client:
  base_url: https://auth.propelauth.com
  auth:
    type: apikey
    location: header
    header_name: Authorization
  headers:
    Accept: application/json
source_metadata: null
